/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockMorgothTokenApprover,
  MockMorgothTokenApproverInterface,
} from "../MockMorgothTokenApprover";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "addToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "approved",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "approvedTokens",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "removeToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "bool",
        name: "value",
        type: "bool",
      },
    ],
    name: "toggleManyTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610640806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063145371dc1461005c5780635fa7b584146100785780636d1ea3fa14610094578063d48bfca7146100c4578063d8b964e6146100e0575b600080fd5b610076600480360381019061007191906103dc565b610110565b005b610092600480360381019061008d91906103b3565b6101ca565b005b6100ae60048036038101906100a991906103b3565b610224565b6040516100bb919061043f565b60405180910390f35b6100de60048036038101906100d991906103b3565b610244565b005b6100fa60048036038101906100f591906103b3565b61029e565b604051610107919061043f565b60405180910390f35b60005b82518110156101c55781600080858481518110610159577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806101bd90610524565b915050610113565b505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60006020528060005260406000206000915054906101000a900460ff1681565b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60006103066103018461047f565b61045a565b9050808382526020820190508285602086028201111561032557600080fd5b60005b85811015610355578161033b888261035f565b845260208401935060208301925050600181019050610328565b5050509392505050565b60008135905061036e816105dc565b92915050565b600082601f83011261038557600080fd5b81356103958482602086016102f3565b91505092915050565b6000813590506103ad816105f3565b92915050565b6000602082840312156103c557600080fd5b60006103d38482850161035f565b91505092915050565b600080604083850312156103ef57600080fd5b600083013567ffffffffffffffff81111561040957600080fd5b61041585828601610374565b92505060206104268582860161039e565b9150509250929050565b610439816104bd565b82525050565b60006020820190506104546000830184610430565b92915050565b6000610464610475565b905061047082826104f3565b919050565b6000604051905090565b600067ffffffffffffffff82111561049a5761049961059c565b5b602082029050602081019050919050565b60006104b6826104c9565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6104fc826105cb565b810181811067ffffffffffffffff8211171561051b5761051a61059c565b5b80604052505050565b600061052f826104e9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156105625761056161056d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6105e5816104ab565b81146105f057600080fd5b50565b6105fc816104bd565b811461060757600080fd5b5056fea264697066735822122095cef34c0c9082d1fa471bcea6bf953f04e98ae84ec2c624d75e705251e8e1e164736f6c63430008040033";

export class MockMorgothTokenApprover__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockMorgothTokenApprover> {
    return super.deploy(overrides || {}) as Promise<MockMorgothTokenApprover>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockMorgothTokenApprover {
    return super.attach(address) as MockMorgothTokenApprover;
  }
  connect(signer: Signer): MockMorgothTokenApprover__factory {
    return super.connect(signer) as MockMorgothTokenApprover__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockMorgothTokenApproverInterface {
    return new utils.Interface(_abi) as MockMorgothTokenApproverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockMorgothTokenApprover {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockMorgothTokenApprover;
  }
}
