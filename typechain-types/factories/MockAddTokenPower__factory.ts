/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockAddTokenPower,
  MockAddTokenPowerInterface,
} from "../MockAddTokenPower";

const _abi = [
  {
    inputs: [],
    name: "invoke",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "bool",
        name: "burnable",
        type: "bool",
      },
    ],
    name: "parameterize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_behodler",
        type: "address",
      },
      {
        internalType: "address",
        name: "_limbo",
        type: "address",
      },
    ],
    name: "seed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_scarcity",
        type: "uint256",
      },
    ],
    name: "setScarcityToMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405261271060025534801561001657600080fd5b506104e6806100266000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806314c6fd2814610051578063289add0c1461006d5780639127d6c814610089578063cab7f521146100a5575b600080fd5b61006b60048036038101906100669190610333565b6100af565b005b610087600480360381019061008291906102f7565b6100b3565b005b6100a3600480360381019061009e9190610398565b610138565b005b6100ad610142565b005b5050565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b8060028190555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a0712d686002546040518263ffffffff1660e01b815260040161019d9190610408565b600060405180830381600087803b1580156101b757600080fd5b505af11580156101cb573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002546040518363ffffffff1660e01b815260040161024e9291906103df565b602060405180830381600087803b15801561026857600080fd5b505af115801561027c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a0919061036f565b50565b6000813590506102b28161046b565b92915050565b6000813590506102c781610482565b92915050565b6000815190506102dc81610482565b92915050565b6000813590506102f181610499565b92915050565b6000806040838503121561030a57600080fd5b6000610318858286016102a3565b9250506020610329858286016102a3565b9150509250929050565b6000806040838503121561034657600080fd5b6000610354858286016102a3565b9250506020610365858286016102b8565b9150509250929050565b60006020828403121561038157600080fd5b600061038f848285016102cd565b91505092915050565b6000602082840312156103aa57600080fd5b60006103b8848285016102e2565b91505092915050565b6103ca81610423565b82525050565b6103d981610461565b82525050565b60006040820190506103f460008301856103c1565b61040160208301846103d0565b9392505050565b600060208201905061041d60008301846103d0565b92915050565b600061042e82610441565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61047481610423565b811461047f57600080fd5b50565b61048b81610435565b811461049657600080fd5b50565b6104a281610461565b81146104ad57600080fd5b5056fea26469706673582212202336a4094b2e586ec3af19b39522fed6735b008219a96fdf7107f3aea2018ef264736f6c63430008040033";

export class MockAddTokenPower__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockAddTokenPower> {
    return super.deploy(overrides || {}) as Promise<MockAddTokenPower>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockAddTokenPower {
    return super.attach(address) as MockAddTokenPower;
  }
  connect(signer: Signer): MockAddTokenPower__factory {
    return super.connect(signer) as MockAddTokenPower__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAddTokenPowerInterface {
    return new utils.Interface(_abi) as MockAddTokenPowerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockAddTokenPower {
    return new Contract(address, _abi, signerOrProvider) as MockAddTokenPower;
  }
}
