/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TokenProxyRegistry,
  TokenProxyRegistryInterface,
} from "../TokenProxyRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DAO",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "configured",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "endConfiguration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address",
      },
    ],
    name: "setDAO",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "baseToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "proxy",
        type: "address",
      },
      {
        internalType: "bool",
        name: "migrateBase",
        type: "bool",
      },
    ],
    name: "setProxy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "tokenProxy",
    outputs: [
      {
        internalType: "address",
        name: "baseToken",
        type: "address",
      },
      {
        internalType: "bool",
        name: "migrateBaseToBehodler",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000c4e38038062000c4e833981810160405281019062000037919062000273565b8062000049816200005160201b60201c565b505062000370565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480620000fc5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80620001155750600060149054906101000a900460ff16155b62000157576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200014e90620002c6565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16632317beae6040518163ffffffff1660e01b815260040160206040518083038186803b158015620001df57600080fd5b505afa158015620001f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200021a919062000273565b6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000815190506200026d8162000356565b92915050565b6000602082840312156200028657600080fd5b600062000296848285016200025c565b91505092915050565b6000620002ae600283620002e8565b9150620002bb826200032d565b602082019050919050565b60006020820190508181036000830152620002e1816200029f565b9050919050565b600082825260208201905092915050565b600062000306826200030d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f454b000000000000000000000000000000000000000000000000000000000000600082015250565b6200036181620002f9565b81146200036d57600080fd5b50565b6108ce80620003806000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806307bc0e8014610067578063478fa629146100835780637f1c59ae1461008d5780638772a23a146100be57806398fabd3a146100dc578063e73a914c146100fa575b600080fd5b610081600480360381019061007c919061064e565b610116565b005b61008b6101fa565b005b6100a760048036038101906100a291906105fc565b610217565b6040516100b5929190610745565b60405180910390f35b6100c6610268565b6040516100d3919061076e565b60405180910390f35b6100e461027b565b6040516100f1919061072a565b60405180910390f35b610114600480360381019061010f91906105fc565b6102a1565b005b61011f336104a3565b60405180604001604052808473ffffffffffffffffffffffffffffffffffffffff168152602001821515815250600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908315150217905550905050505050565b6001600060146101000a81548160ff021916908315150217905550565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16905082565b600060149054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061034b5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806103635750600060149054906101000a900460ff16155b6103a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039990610789565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16632317beae6040518163ffffffff1660e01b815260040160206040518083038186803b15801561042957600080fd5b505afa15801561043d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104619190610625565b6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060149054906101000a900460ff1615806105665750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b7ebc23b826040518263ffffffff1660e01b8152600401610515919061072a565b60206040518083038186803b15801561052d57600080fd5b505afa158015610541573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610565919061069d565b5b6105a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059c906107a9565b60405180910390fd5b50565b6000813590506105b78161086a565b92915050565b6000815190506105cc8161086a565b92915050565b6000813590506105e181610881565b92915050565b6000815190506105f681610881565b92915050565b60006020828403121561060e57600080fd5b600061061c848285016105a8565b91505092915050565b60006020828403121561063757600080fd5b6000610645848285016105bd565b91505092915050565b60008060006060848603121561066357600080fd5b6000610671868287016105a8565b9350506020610682868287016105a8565b9250506040610693868287016105d2565b9150509250925092565b6000602082840312156106af57600080fd5b60006106bd848285016105e7565b91505092915050565b6106cf816107da565b82525050565b6106de816107ec565b82525050565b60006106f16002836107c9565b91506106fc82610818565b602082019050919050565b60006107146002836107c9565b915061071f82610841565b602082019050919050565b600060208201905061073f60008301846106c6565b92915050565b600060408201905061075a60008301856106c6565b61076760208301846106d5565b9392505050565b600060208201905061078360008301846106d5565b92915050565b600060208201905081810360008301526107a2816106e4565b9050919050565b600060208201905081810360008301526107c281610707565b9050919050565b600082825260208201905092915050565b60006107e5826107f8565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f454b000000000000000000000000000000000000000000000000000000000000600082015250565b7f454a000000000000000000000000000000000000000000000000000000000000600082015250565b610873816107da565b811461087e57600080fd5b50565b61088a816107ec565b811461089557600080fd5b5056fea26469706673582212200638981159dfcd6221cf80474182de03ff1fb06eb93570a670f984ca434059e364736f6c63430008040033";

export class TokenProxyRegistry__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    dao: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenProxyRegistry> {
    return super.deploy(dao, overrides || {}) as Promise<TokenProxyRegistry>;
  }
  getDeployTransaction(
    dao: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(dao, overrides || {});
  }
  attach(address: string): TokenProxyRegistry {
    return super.attach(address) as TokenProxyRegistry;
  }
  connect(signer: Signer): TokenProxyRegistry__factory {
    return super.connect(signer) as TokenProxyRegistry__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenProxyRegistryInterface {
    return new utils.Interface(_abi) as TokenProxyRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenProxyRegistry {
    return new Contract(address, _abi, signerOrProvider) as TokenProxyRegistry;
  }
}
