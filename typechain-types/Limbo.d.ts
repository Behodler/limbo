/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LimboInterface extends ethers.utils.Interface {
  functions: {
    "DAO()": FunctionFragment;
    "adjustSoul(address,uint256,int256,uint256)": FunctionFragment;
    "approveUnstake(address,address,uint256)": FunctionFragment;
    "attemptToTargetAPY(address,uint256,uint256)": FunctionFragment;
    "claimBonus(address,uint256)": FunctionFragment;
    "claimReward(address,uint256)": FunctionFragment;
    "claimSecondaryRewards(address)": FunctionFragment;
    "configureCrossingConfig(address,address,address,address,uint256,uint256,uint16)": FunctionFragment;
    "configureCrossingParameters(address,uint256,int256,bool,uint256)": FunctionFragment;
    "configureSoul(address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "configured()": FunctionFragment;
    "crossingConfig()": FunctionFragment;
    "disableProtocol()": FunctionFragment;
    "enableProtocol()": FunctionFragment;
    "endConfiguration()": FunctionFragment;
    "latestIndex(address)": FunctionFragment;
    "migrate(address)": FunctionFragment;
    "setDAO(address)": FunctionFragment;
    "souls(address,uint256)": FunctionFragment;
    "stake(address,uint256)": FunctionFragment;
    "tokenCrossingParameters(address,uint256)": FunctionFragment;
    "unstake(address,uint256)": FunctionFragment;
    "unstakeFor(address,uint256,address)": FunctionFragment;
    "updateSoul(address)": FunctionFragment;
    "userInfo(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DAO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adjustSoul",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveUnstake",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "attemptToTargetAPY",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBonus",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSecondaryRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "configureCrossingConfig",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "configureCrossingParameters",
    values: [string, BigNumberish, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configureSoul",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "configured",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "crossingConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "latestIndex", values: [string]): string;
  encodeFunctionData(functionFragment: "migrate", values: [string]): string;
  encodeFunctionData(functionFragment: "setDAO", values: [string]): string;
  encodeFunctionData(
    functionFragment: "souls",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCrossingParameters",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeFor",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "updateSoul", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "DAO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "adjustSoul", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attemptToTargetAPY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimBonus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSecondaryRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureCrossingConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureCrossingParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureSoul",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "configured", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "crossingConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDAO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "souls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenCrossingParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstakeFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateSoul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;

  events: {
    "BonusPaid(address,uint256,address,uint256)": EventFragment;
    "ClaimedReward(address,address,uint256,uint256)": EventFragment;
    "SoulUpdated(address,uint256)": EventFragment;
    "Staked(address,address,uint256)": EventFragment;
    "TokenListed(address,uint256,uint256)": EventFragment;
    "Unstaked(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BonusPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimedReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SoulUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
}

export class Limbo extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LimboInterface;

  functions: {
    DAO(overrides?: CallOverrides): Promise<[string]>;

    adjustSoul(
      token: string,
      initialCrossingBonus: BigNumberish,
      crossingBonusDelta: BigNumberish,
      fps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveUnstake(
      soul: string,
      unstaker: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    attemptToTargetAPY(
      token: string,
      desiredAPY: BigNumberish,
      daiThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimBonus(
      token: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      token: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimSecondaryRewards(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configureCrossingConfig(
      behodler: string,
      angband: string,
      ammHelper: string,
      morgothPower: string,
      migrationInvocationReward: BigNumberish,
      crossingMigrationDelay: BigNumberish,
      rectInflationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configureCrossingParameters(
      token: string,
      initialCrossingBonus: BigNumberish,
      crossingBonusDelta: BigNumberish,
      burnable: boolean,
      crossingThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configureSoul(
      token: string,
      crossingThreshold: BigNumberish,
      soulType: BigNumberish,
      state: BigNumberish,
      index: BigNumberish,
      fps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configured(overrides?: CallOverrides): Promise<[boolean]>;

    crossingConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        number
      ] & {
        behodler: string;
        SCX_fee: BigNumber;
        migrationInvocationReward: BigNumber;
        crossingMigrationDelay: BigNumber;
        morgothPower: string;
        angband: string;
        ammHelper: string;
        rectangleOfFairnessInflationFactor: number;
      }
    >;

    disableProtocol(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableProtocol(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endConfiguration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    latestIndex(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    migrate(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDAO(
      dao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    souls(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, number, BigNumber] & {
        lastRewardTimestamp: BigNumber;
        accumulatedFlanPerShare: BigNumber;
        crossingThreshold: BigNumber;
        soulType: number;
        state: number;
        flanPerSecond: BigNumber;
      }
    >;

    stake(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenCrossingParameters(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        stakingBeginsTimestamp: BigNumber;
        stakingEndsTimestamp: BigNumber;
        crossingBonusDelta: BigNumber;
        initialCrossingBonus: BigNumber;
        burnable: boolean;
      }
    >;

    unstake(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeFor(
      token: string,
      amount: BigNumberish,
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSoul(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        stakedAmount: BigNumber;
        rewardDebt: BigNumber;
        bonusPaid: boolean;
      }
    >;
  };

  DAO(overrides?: CallOverrides): Promise<string>;

  adjustSoul(
    token: string,
    initialCrossingBonus: BigNumberish,
    crossingBonusDelta: BigNumberish,
    fps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveUnstake(
    soul: string,
    unstaker: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  attemptToTargetAPY(
    token: string,
    desiredAPY: BigNumberish,
    daiThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimBonus(
    token: string,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    token: string,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimSecondaryRewards(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configureCrossingConfig(
    behodler: string,
    angband: string,
    ammHelper: string,
    morgothPower: string,
    migrationInvocationReward: BigNumberish,
    crossingMigrationDelay: BigNumberish,
    rectInflationFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configureCrossingParameters(
    token: string,
    initialCrossingBonus: BigNumberish,
    crossingBonusDelta: BigNumberish,
    burnable: boolean,
    crossingThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configureSoul(
    token: string,
    crossingThreshold: BigNumberish,
    soulType: BigNumberish,
    state: BigNumberish,
    index: BigNumberish,
    fps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configured(overrides?: CallOverrides): Promise<boolean>;

  crossingConfig(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      number
    ] & {
      behodler: string;
      SCX_fee: BigNumber;
      migrationInvocationReward: BigNumber;
      crossingMigrationDelay: BigNumber;
      morgothPower: string;
      angband: string;
      ammHelper: string;
      rectangleOfFairnessInflationFactor: number;
    }
  >;

  disableProtocol(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableProtocol(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endConfiguration(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  latestIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  migrate(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDAO(
    dao: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  souls(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number, number, BigNumber] & {
      lastRewardTimestamp: BigNumber;
      accumulatedFlanPerShare: BigNumber;
      crossingThreshold: BigNumber;
      soulType: number;
      state: number;
      flanPerSecond: BigNumber;
    }
  >;

  stake(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenCrossingParameters(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      stakingBeginsTimestamp: BigNumber;
      stakingEndsTimestamp: BigNumber;
      crossingBonusDelta: BigNumber;
      initialCrossingBonus: BigNumber;
      burnable: boolean;
    }
  >;

  unstake(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeFor(
    token: string,
    amount: BigNumberish,
    holder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSoul(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      stakedAmount: BigNumber;
      rewardDebt: BigNumber;
      bonusPaid: boolean;
    }
  >;

  callStatic: {
    DAO(overrides?: CallOverrides): Promise<string>;

    adjustSoul(
      token: string,
      initialCrossingBonus: BigNumberish,
      crossingBonusDelta: BigNumberish,
      fps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveUnstake(
      soul: string,
      unstaker: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    attemptToTargetAPY(
      token: string,
      desiredAPY: BigNumberish,
      daiThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimBonus(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimSecondaryRewards(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    configureCrossingConfig(
      behodler: string,
      angband: string,
      ammHelper: string,
      morgothPower: string,
      migrationInvocationReward: BigNumberish,
      crossingMigrationDelay: BigNumberish,
      rectInflationFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    configureCrossingParameters(
      token: string,
      initialCrossingBonus: BigNumberish,
      crossingBonusDelta: BigNumberish,
      burnable: boolean,
      crossingThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    configureSoul(
      token: string,
      crossingThreshold: BigNumberish,
      soulType: BigNumberish,
      state: BigNumberish,
      index: BigNumberish,
      fps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    configured(overrides?: CallOverrides): Promise<boolean>;

    crossingConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        number
      ] & {
        behodler: string;
        SCX_fee: BigNumber;
        migrationInvocationReward: BigNumber;
        crossingMigrationDelay: BigNumber;
        morgothPower: string;
        angband: string;
        ammHelper: string;
        rectangleOfFairnessInflationFactor: number;
      }
    >;

    disableProtocol(overrides?: CallOverrides): Promise<void>;

    enableProtocol(overrides?: CallOverrides): Promise<void>;

    endConfiguration(overrides?: CallOverrides): Promise<void>;

    latestIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    migrate(token: string, overrides?: CallOverrides): Promise<void>;

    setDAO(dao: string, overrides?: CallOverrides): Promise<void>;

    souls(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, number, BigNumber] & {
        lastRewardTimestamp: BigNumber;
        accumulatedFlanPerShare: BigNumber;
        crossingThreshold: BigNumber;
        soulType: number;
        state: number;
        flanPerSecond: BigNumber;
      }
    >;

    stake(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenCrossingParameters(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        stakingBeginsTimestamp: BigNumber;
        stakingEndsTimestamp: BigNumber;
        crossingBonusDelta: BigNumber;
        initialCrossingBonus: BigNumber;
        burnable: boolean;
      }
    >;

    unstake(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeFor(
      token: string,
      amount: BigNumberish,
      holder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSoul(token: string, overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        stakedAmount: BigNumber;
        rewardDebt: BigNumber;
        bonusPaid: boolean;
      }
    >;
  };

  filters: {
    BonusPaid(
      token?: null,
      index?: null,
      recipient?: null,
      bonus?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      { token: string; index: BigNumber; recipient: string; bonus: BigNumber }
    >;

    ClaimedReward(
      staker?: null,
      soul?: null,
      index?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { staker: string; soul: string; index: BigNumber; amount: BigNumber }
    >;

    SoulUpdated(
      soul?: null,
      fps?: null
    ): TypedEventFilter<[string, BigNumber], { soul: string; fps: BigNumber }>;

    Staked(
      staker?: null,
      soul?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { staker: string; soul: string; amount: BigNumber }
    >;

    TokenListed(
      token?: null,
      amount?: null,
      scxfln_LP_minted?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { token: string; amount: BigNumber; scxfln_LP_minted: BigNumber }
    >;

    Unstaked(
      staker?: null,
      soul?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { staker: string; soul: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    DAO(overrides?: CallOverrides): Promise<BigNumber>;

    adjustSoul(
      token: string,
      initialCrossingBonus: BigNumberish,
      crossingBonusDelta: BigNumberish,
      fps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveUnstake(
      soul: string,
      unstaker: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    attemptToTargetAPY(
      token: string,
      desiredAPY: BigNumberish,
      daiThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimBonus(
      token: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      token: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimSecondaryRewards(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configureCrossingConfig(
      behodler: string,
      angband: string,
      ammHelper: string,
      morgothPower: string,
      migrationInvocationReward: BigNumberish,
      crossingMigrationDelay: BigNumberish,
      rectInflationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configureCrossingParameters(
      token: string,
      initialCrossingBonus: BigNumberish,
      crossingBonusDelta: BigNumberish,
      burnable: boolean,
      crossingThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configureSoul(
      token: string,
      crossingThreshold: BigNumberish,
      soulType: BigNumberish,
      state: BigNumberish,
      index: BigNumberish,
      fps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configured(overrides?: CallOverrides): Promise<BigNumber>;

    crossingConfig(overrides?: CallOverrides): Promise<BigNumber>;

    disableProtocol(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableProtocol(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endConfiguration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    latestIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDAO(
      dao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    souls(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenCrossingParameters(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeFor(
      token: string,
      amount: BigNumberish,
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSoul(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DAO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adjustSoul(
      token: string,
      initialCrossingBonus: BigNumberish,
      crossingBonusDelta: BigNumberish,
      fps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveUnstake(
      soul: string,
      unstaker: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    attemptToTargetAPY(
      token: string,
      desiredAPY: BigNumberish,
      daiThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimBonus(
      token: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      token: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimSecondaryRewards(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configureCrossingConfig(
      behodler: string,
      angband: string,
      ammHelper: string,
      morgothPower: string,
      migrationInvocationReward: BigNumberish,
      crossingMigrationDelay: BigNumberish,
      rectInflationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configureCrossingParameters(
      token: string,
      initialCrossingBonus: BigNumberish,
      crossingBonusDelta: BigNumberish,
      burnable: boolean,
      crossingThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configureSoul(
      token: string,
      crossingThreshold: BigNumberish,
      soulType: BigNumberish,
      state: BigNumberish,
      index: BigNumberish,
      fps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configured(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crossingConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableProtocol(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableProtocol(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endConfiguration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    latestIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrate(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDAO(
      dao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    souls(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenCrossingParameters(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstake(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeFor(
      token: string,
      amount: BigNumberish,
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSoul(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
