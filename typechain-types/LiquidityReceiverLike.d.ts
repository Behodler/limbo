/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LiquidityReceiverLikeInterface extends ethers.utils.Interface {
  functions: {
    "drain(address)": FunctionFragment;
    "getPyroToken(address)": FunctionFragment;
    "registerPyroToken(address,string,string)": FunctionFragment;
    "setFeeExemptionStatusOnPyroForContract(address,address,uint8)": FunctionFragment;
    "setPyroTokenLoanOfficer(address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "drain", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPyroToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPyroToken",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeExemptionStatusOnPyroForContract",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPyroTokenLoanOfficer",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "drain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPyroToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPyroToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeExemptionStatusOnPyroForContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPyroTokenLoanOfficer",
    data: BytesLike
  ): Result;

  events: {};
}

export class LiquidityReceiverLike extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LiquidityReceiverLikeInterface;

  functions: {
    drain(
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPyroToken(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registerPyroToken(
      baseToken: string,
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeExemptionStatusOnPyroForContract(
      pyroToken: string,
      target: string,
      exemption: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPyroTokenLoanOfficer(
      pyroToken: string,
      loanOfficer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  drain(
    baseToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPyroToken(baseToken: string, overrides?: CallOverrides): Promise<string>;

  registerPyroToken(
    baseToken: string,
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeExemptionStatusOnPyroForContract(
    pyroToken: string,
    target: string,
    exemption: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPyroTokenLoanOfficer(
    pyroToken: string,
    loanOfficer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    drain(baseToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPyroToken(baseToken: string, overrides?: CallOverrides): Promise<string>;

    registerPyroToken(
      baseToken: string,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeExemptionStatusOnPyroForContract(
      pyroToken: string,
      target: string,
      exemption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPyroTokenLoanOfficer(
      pyroToken: string,
      loanOfficer: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    drain(
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPyroToken(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerPyroToken(
      baseToken: string,
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeExemptionStatusOnPyroForContract(
      pyroToken: string,
      target: string,
      exemption: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPyroTokenLoanOfficer(
      pyroToken: string,
      loanOfficer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    drain(
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPyroToken(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerPyroToken(
      baseToken: string,
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeExemptionStatusOnPyroForContract(
      pyroToken: string,
      target: string,
      exemption: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPyroTokenLoanOfficer(
      pyroToken: string,
      loanOfficer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
