/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LimboDAOLikeInterface extends ethers.utils.Interface {
  functions: {
    "approveFlanMintingPower(address,bool)": FunctionFragment;
    "currentProposalState()": FunctionFragment;
    "domainConfig()": FunctionFragment;
    "getFlashGoverner()": FunctionFragment;
    "makeProposal(address,address)": FunctionFragment;
    "proposalConfig()": FunctionFragment;
    "setApprovedAsset(address,bool)": FunctionFragment;
    "setFateToFlan(uint256)": FunctionFragment;
    "setProposalConfig(uint256,uint256,address)": FunctionFragment;
    "successfulProposal(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveFlanMintingPower",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "currentProposalState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFlashGoverner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeProposal",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovedAsset",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFateToFlan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalConfig",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "successfulProposal",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveFlanMintingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentProposalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFlashGoverner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFateToFlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "successfulProposal",
    data: BytesLike
  ): Result;

  events: {};
}

export class LimboDAOLike extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LimboDAOLikeInterface;

  functions: {
    approveFlanMintingPower(
      minter: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentProposalState(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string, BigNumber, string]>;

    domainConfig(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getFlashGoverner(overrides?: CallOverrides): Promise<[string]>;

    makeProposal(
      proposal: string,
      proposer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposalConfig(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>;

    setApprovedAsset(
      asset: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFateToFlan(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProposalConfig(
      votingDuration: BigNumberish,
      requiredFateStake: BigNumberish,
      proposalFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    successfulProposal(
      proposal: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  approveFlanMintingPower(
    minter: string,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentProposalState(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, string, BigNumber, string]>;

  domainConfig(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getFlashGoverner(overrides?: CallOverrides): Promise<string>;

  makeProposal(
    proposal: string,
    proposer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposalConfig(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, string]>;

  setApprovedAsset(
    asset: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFateToFlan(
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProposalConfig(
    votingDuration: BigNumberish,
    requiredFateStake: BigNumberish,
    proposalFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  successfulProposal(
    proposal: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    approveFlanMintingPower(
      minter: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    currentProposalState(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string, BigNumber, string]>;

    domainConfig(
      overrides?: CallOverrides
    ): Promise<[string, string, string, string, boolean, string, string]>;

    getFlashGoverner(overrides?: CallOverrides): Promise<string>;

    makeProposal(
      proposal: string,
      proposer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposalConfig(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>;

    setApprovedAsset(
      asset: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFateToFlan(rate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setProposalConfig(
      votingDuration: BigNumberish,
      requiredFateStake: BigNumberish,
      proposalFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    successfulProposal(
      proposal: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    approveFlanMintingPower(
      minter: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentProposalState(overrides?: CallOverrides): Promise<BigNumber>;

    domainConfig(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getFlashGoverner(overrides?: CallOverrides): Promise<BigNumber>;

    makeProposal(
      proposal: string,
      proposer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposalConfig(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovedAsset(
      asset: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFateToFlan(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProposalConfig(
      votingDuration: BigNumberish,
      requiredFateStake: BigNumberish,
      proposalFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    successfulProposal(
      proposal: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveFlanMintingPower(
      minter: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentProposalState(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainConfig(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getFlashGoverner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makeProposal(
      proposal: string,
      proposer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposalConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApprovedAsset(
      asset: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFateToFlan(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProposalConfig(
      votingDuration: BigNumberish,
      requiredFateStake: BigNumberish,
      proposalFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    successfulProposal(
      proposal: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
