/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LimboDAOInterface extends ethers.utils.Interface {
  functions: {
    "approveFlanMintingPower(address,bool)": FunctionFragment;
    "assetApproved(address)": FunctionFragment;
    "burnAsset(address,uint256)": FunctionFragment;
    "convertFateToFlan(uint256)": FunctionFragment;
    "currentProposalState()": FunctionFragment;
    "domainConfig()": FunctionFragment;
    "executeCurrentProposal()": FunctionFragment;
    "fateGrowthStrategy(address)": FunctionFragment;
    "fateState(address)": FunctionFragment;
    "fateToFlan()": FunctionFragment;
    "getFlashGoverner()": FunctionFragment;
    "incrementFateFor(address)": FunctionFragment;
    "killDAO(address)": FunctionFragment;
    "makeLive()": FunctionFragment;
    "makeProposal(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "previousProposalState()": FunctionFragment;
    "proposalConfig()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "seed(address,address,address,address,address,address,address,uint256,address[],address[])": FunctionFragment;
    "setApprovedAsset(address,bool)": FunctionFragment;
    "setEYEBasedAssetStake(uint256,uint256,uint256,address)": FunctionFragment;
    "setFateToFlan(uint256)": FunctionFragment;
    "setProposalConfig(uint256,uint256,address)": FunctionFragment;
    "stakedUserAssetWeight(address,address)": FunctionFragment;
    "successfulProposal(address)": FunctionFragment;
    "timeRemainingOnProposal()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferOwnershipOfThing(address,address)": FunctionFragment;
    "vote(address,int256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveFlanMintingPower",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "assetApproved",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "burnAsset",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertFateToFlan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentProposalState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeCurrentProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fateGrowthStrategy",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "fateState", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fateToFlan",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFlashGoverner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incrementFateFor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "killDAO", values: [string]): string;
  encodeFunctionData(functionFragment: "makeLive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "makeProposal",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "previousProposalState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seed",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      string[],
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovedAsset",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEYEBasedAssetStake",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFateToFlan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalConfig",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedUserAssetWeight",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "successfulProposal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "timeRemainingOnProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnershipOfThing",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveFlanMintingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertFateToFlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentProposalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeCurrentProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fateGrowthStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fateState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fateToFlan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFlashGoverner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementFateFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "killDAO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeLive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previousProposalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEYEBasedAssetStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFateToFlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedUserAssetWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "successfulProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeRemainingOnProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnershipOfThing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "assetApproval(address,bool)": EventFragment;
    "assetBurnt(address,address,uint256)": EventFragment;
    "daoKilled(address)": EventFragment;
    "proposalExecuted(address,bool)": EventFragment;
    "proposalLodged(address,address)": EventFragment;
    "voteCast(address,address,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "assetApproval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "assetBurnt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "daoKilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "proposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "proposalLodged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "voteCast"): EventFragment;
}

export class LimboDAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LimboDAOInterface;

  functions: {
    approveFlanMintingPower(
      minter: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assetApproved(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    burnAsset(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    convertFateToFlan(
      fate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentProposalState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, string, BigNumber, string] & {
        fate: BigNumber;
        decision: number;
        proposer: string;
        start: BigNumber;
        proposal: string;
      }
    >;

    domainConfig(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, boolean, string, string, string] & {
        limbo: string;
        flan: string;
        eye: string;
        fate: string;
        live: boolean;
        flashGoverner: string;
        sushiFactory: string;
        uniFactory: string;
      }
    >;

    executeCurrentProposal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fateGrowthStrategy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    fateState(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        fatePerDay: BigNumber;
        fateBalance: BigNumber;
        lastDamnAdjustment: BigNumber;
      }
    >;

    fateToFlan(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFlashGoverner(overrides?: CallOverrides): Promise<[string]>;

    incrementFateFor(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    killDAO(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeLive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeProposal(
      proposal: string,
      proposer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    previousProposalState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, string, BigNumber, string] & {
        fate: BigNumber;
        decision: number;
        proposer: string;
        start: BigNumber;
        proposal: string;
      }
    >;

    proposalConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        votingDuration: BigNumber;
        requiredFateStake: BigNumber;
        proposalFactory: string;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    seed(
      limbo: string,
      flan: string,
      eye: string,
      proposalFactory: string,
      sushiFactory: string,
      uniFactory: string,
      flashGoverner: string,
      precisionOrderOfMagnitude: BigNumberish,
      sushiLPs: string[],
      uniLPs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovedAsset(
      asset: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEYEBasedAssetStake(
      finalAssetBalance: BigNumberish,
      finalEYEBalance: BigNumberish,
      rootEYE: BigNumberish,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFateToFlan(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProposalConfig(
      votingDuration: BigNumberish,
      requiredFateStake: BigNumberish,
      proposalFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakedUserAssetWeight(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fateWeight: BigNumber; balance: BigNumber }
    >;

    successfulProposal(
      proposal: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    timeRemainingOnProposal(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnershipOfThing(
      thing: string,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote(
      proposal: string,
      fate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approveFlanMintingPower(
    minter: string,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assetApproved(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  burnAsset(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  convertFateToFlan(
    fate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentProposalState(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, string, BigNumber, string] & {
      fate: BigNumber;
      decision: number;
      proposer: string;
      start: BigNumber;
      proposal: string;
    }
  >;

  domainConfig(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, boolean, string, string, string] & {
      limbo: string;
      flan: string;
      eye: string;
      fate: string;
      live: boolean;
      flashGoverner: string;
      sushiFactory: string;
      uniFactory: string;
    }
  >;

  executeCurrentProposal(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fateGrowthStrategy(arg0: string, overrides?: CallOverrides): Promise<number>;

  fateState(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      fatePerDay: BigNumber;
      fateBalance: BigNumber;
      lastDamnAdjustment: BigNumber;
    }
  >;

  fateToFlan(overrides?: CallOverrides): Promise<BigNumber>;

  getFlashGoverner(overrides?: CallOverrides): Promise<string>;

  incrementFateFor(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  killDAO(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeLive(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeProposal(
    proposal: string,
    proposer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  previousProposalState(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, string, BigNumber, string] & {
      fate: BigNumber;
      decision: number;
      proposer: string;
      start: BigNumber;
      proposal: string;
    }
  >;

  proposalConfig(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      votingDuration: BigNumber;
      requiredFateStake: BigNumber;
      proposalFactory: string;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  seed(
    limbo: string,
    flan: string,
    eye: string,
    proposalFactory: string,
    sushiFactory: string,
    uniFactory: string,
    flashGoverner: string,
    precisionOrderOfMagnitude: BigNumberish,
    sushiLPs: string[],
    uniLPs: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovedAsset(
    asset: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEYEBasedAssetStake(
    finalAssetBalance: BigNumberish,
    finalEYEBalance: BigNumberish,
    rootEYE: BigNumberish,
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFateToFlan(
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProposalConfig(
    votingDuration: BigNumberish,
    requiredFateStake: BigNumberish,
    proposalFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakedUserAssetWeight(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { fateWeight: BigNumber; balance: BigNumber }
  >;

  successfulProposal(
    proposal: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  timeRemainingOnProposal(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnershipOfThing(
    thing: string,
    destination: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote(
    proposal: string,
    fate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveFlanMintingPower(
      minter: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    assetApproved(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    burnAsset(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    convertFateToFlan(
      fate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentProposalState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, string, BigNumber, string] & {
        fate: BigNumber;
        decision: number;
        proposer: string;
        start: BigNumber;
        proposal: string;
      }
    >;

    domainConfig(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, boolean, string, string, string] & {
        limbo: string;
        flan: string;
        eye: string;
        fate: string;
        live: boolean;
        flashGoverner: string;
        sushiFactory: string;
        uniFactory: string;
      }
    >;

    executeCurrentProposal(overrides?: CallOverrides): Promise<void>;

    fateGrowthStrategy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<number>;

    fateState(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        fatePerDay: BigNumber;
        fateBalance: BigNumber;
        lastDamnAdjustment: BigNumber;
      }
    >;

    fateToFlan(overrides?: CallOverrides): Promise<BigNumber>;

    getFlashGoverner(overrides?: CallOverrides): Promise<string>;

    incrementFateFor(user: string, overrides?: CallOverrides): Promise<void>;

    killDAO(newOwner: string, overrides?: CallOverrides): Promise<void>;

    makeLive(overrides?: CallOverrides): Promise<void>;

    makeProposal(
      proposal: string,
      proposer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    previousProposalState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, string, BigNumber, string] & {
        fate: BigNumber;
        decision: number;
        proposer: string;
        start: BigNumber;
        proposal: string;
      }
    >;

    proposalConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        votingDuration: BigNumber;
        requiredFateStake: BigNumber;
        proposalFactory: string;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    seed(
      limbo: string,
      flan: string,
      eye: string,
      proposalFactory: string,
      sushiFactory: string,
      uniFactory: string,
      flashGoverner: string,
      precisionOrderOfMagnitude: BigNumberish,
      sushiLPs: string[],
      uniLPs: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovedAsset(
      asset: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setEYEBasedAssetStake(
      finalAssetBalance: BigNumberish,
      finalEYEBalance: BigNumberish,
      rootEYE: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFateToFlan(rate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setProposalConfig(
      votingDuration: BigNumberish,
      requiredFateStake: BigNumberish,
      proposalFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedUserAssetWeight(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fateWeight: BigNumber; balance: BigNumber }
    >;

    successfulProposal(
      proposal: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    timeRemainingOnProposal(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnershipOfThing(
      thing: string,
      destination: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      proposal: string,
      fate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    assetApproval(
      asset?: null,
      appoved?: null
    ): TypedEventFilter<[string, boolean], { asset: string; appoved: boolean }>;

    assetBurnt(
      burner?: null,
      asset?: null,
      fateCreated?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { burner: string; asset: string; fateCreated: BigNumber }
    >;

    daoKilled(
      newOwner?: null
    ): TypedEventFilter<[string], { newOwner: string }>;

    proposalExecuted(
      proposal?: null,
      approved?: null
    ): TypedEventFilter<
      [string, boolean],
      { proposal: string; approved: boolean }
    >;

    proposalLodged(
      proposal?: null,
      proposer?: null
    ): TypedEventFilter<
      [string, string],
      { proposal: string; proposer: string }
    >;

    voteCast(
      voter?: null,
      proposal?: null,
      fateCast?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { voter: string; proposal: string; fateCast: BigNumber }
    >;
  };

  estimateGas: {
    approveFlanMintingPower(
      minter: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assetApproved(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    burnAsset(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    convertFateToFlan(
      fate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentProposalState(overrides?: CallOverrides): Promise<BigNumber>;

    domainConfig(overrides?: CallOverrides): Promise<BigNumber>;

    executeCurrentProposal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fateGrowthStrategy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fateState(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fateToFlan(overrides?: CallOverrides): Promise<BigNumber>;

    getFlashGoverner(overrides?: CallOverrides): Promise<BigNumber>;

    incrementFateFor(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    killDAO(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeLive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeProposal(
      proposal: string,
      proposer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    previousProposalState(overrides?: CallOverrides): Promise<BigNumber>;

    proposalConfig(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    seed(
      limbo: string,
      flan: string,
      eye: string,
      proposalFactory: string,
      sushiFactory: string,
      uniFactory: string,
      flashGoverner: string,
      precisionOrderOfMagnitude: BigNumberish,
      sushiLPs: string[],
      uniLPs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovedAsset(
      asset: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEYEBasedAssetStake(
      finalAssetBalance: BigNumberish,
      finalEYEBalance: BigNumberish,
      rootEYE: BigNumberish,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFateToFlan(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProposalConfig(
      votingDuration: BigNumberish,
      requiredFateStake: BigNumberish,
      proposalFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakedUserAssetWeight(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    successfulProposal(
      proposal: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeRemainingOnProposal(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnershipOfThing(
      thing: string,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote(
      proposal: string,
      fate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveFlanMintingPower(
      minter: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assetApproved(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnAsset(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    convertFateToFlan(
      fate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentProposalState(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeCurrentProposal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fateGrowthStrategy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fateState(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fateToFlan(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFlashGoverner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incrementFateFor(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    killDAO(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeLive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeProposal(
      proposal: string,
      proposer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previousProposalState(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    seed(
      limbo: string,
      flan: string,
      eye: string,
      proposalFactory: string,
      sushiFactory: string,
      uniFactory: string,
      flashGoverner: string,
      precisionOrderOfMagnitude: BigNumberish,
      sushiLPs: string[],
      uniLPs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovedAsset(
      asset: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEYEBasedAssetStake(
      finalAssetBalance: BigNumberish,
      finalEYEBalance: BigNumberish,
      rootEYE: BigNumberish,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFateToFlan(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProposalConfig(
      votingDuration: BigNumberish,
      requiredFateStake: BigNumberish,
      proposalFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakedUserAssetWeight(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    successfulProposal(
      proposal: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeRemainingOnProposal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnershipOfThing(
      thing: string,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      proposal: string,
      fate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
