/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface UniswapHelperInterface extends ethers.utils.Interface {
  functions: {
    "DAO()": FunctionFragment;
    "blackHole()": FunctionFragment;
    "buyFlanAndBurn(address,uint256,address)": FunctionFragment;
    "configure(address,address,address,address,uint256,uint256,uint8,uint8)": FunctionFragment;
    "configured()": FunctionFragment;
    "endConfiguration()": FunctionFragment;
    "generateFLNQuote()": FunctionFragment;
    "latestFlanQuotes(uint256)": FunctionFragment;
    "minAPY_to_FPS(uint256,uint256)": FunctionFragment;
    "setDAI(address)": FunctionFragment;
    "setDAO(address)": FunctionFragment;
    "setFactory(address)": FunctionFragment;
    "stabilizeFlan(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DAO", values?: undefined): string;
  encodeFunctionData(functionFragment: "blackHole", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyFlanAndBurn",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "configure",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "configured",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateFLNQuote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestFlanQuotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minAPY_to_FPS",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setDAI", values: [string]): string;
  encodeFunctionData(functionFragment: "setDAO", values: [string]): string;
  encodeFunctionData(functionFragment: "setFactory", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stabilizeFlan",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "DAO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blackHole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyFlanAndBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "configure", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "configured", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateFLNQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestFlanQuotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAPY_to_FPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDAI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDAO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stabilizeFlan",
    data: BytesLike
  ): Result;

  events: {};
}

export class UniswapHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UniswapHelperInterface;

  functions: {
    DAO(overrides?: CallOverrides): Promise<[string]>;

    blackHole(overrides?: CallOverrides): Promise<[string]>;

    buyFlanAndBurn(
      inputToken: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configure(
      _limbo: string,
      FlanSCXPair: string,
      behodler: string,
      flan: string,
      divergenceTolerance: BigNumberish,
      minQuoteWaitDuration: BigNumberish,
      precision: BigNumberish,
      priceBoostOvershoot: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configured(overrides?: CallOverrides): Promise<[boolean]>;

    endConfiguration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    generateFLNQuote(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    latestFlanQuotes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        DaiScxSpotPrice: BigNumber;
        DaiBalanceOnBehodler: BigNumber;
        blockProduced: BigNumber;
      }
    >;

    minAPY_to_FPS(
      minAPY: BigNumberish,
      daiThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fps: BigNumber }>;

    setDAI(
      dai: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDAO(
      dao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFactory(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stabilizeFlan(
      rectangleOfFairness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DAO(overrides?: CallOverrides): Promise<string>;

  blackHole(overrides?: CallOverrides): Promise<string>;

  buyFlanAndBurn(
    inputToken: string,
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configure(
    _limbo: string,
    FlanSCXPair: string,
    behodler: string,
    flan: string,
    divergenceTolerance: BigNumberish,
    minQuoteWaitDuration: BigNumberish,
    precision: BigNumberish,
    priceBoostOvershoot: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configured(overrides?: CallOverrides): Promise<boolean>;

  endConfiguration(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  generateFLNQuote(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  latestFlanQuotes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      DaiScxSpotPrice: BigNumber;
      DaiBalanceOnBehodler: BigNumber;
      blockProduced: BigNumber;
    }
  >;

  minAPY_to_FPS(
    minAPY: BigNumberish,
    daiThreshold: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setDAI(
    dai: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDAO(
    dao: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFactory(
    factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stabilizeFlan(
    rectangleOfFairness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DAO(overrides?: CallOverrides): Promise<string>;

    blackHole(overrides?: CallOverrides): Promise<string>;

    buyFlanAndBurn(
      inputToken: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    configure(
      _limbo: string,
      FlanSCXPair: string,
      behodler: string,
      flan: string,
      divergenceTolerance: BigNumberish,
      minQuoteWaitDuration: BigNumberish,
      precision: BigNumberish,
      priceBoostOvershoot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    configured(overrides?: CallOverrides): Promise<boolean>;

    endConfiguration(overrides?: CallOverrides): Promise<void>;

    generateFLNQuote(overrides?: CallOverrides): Promise<void>;

    latestFlanQuotes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        DaiScxSpotPrice: BigNumber;
        DaiBalanceOnBehodler: BigNumber;
        blockProduced: BigNumber;
      }
    >;

    minAPY_to_FPS(
      minAPY: BigNumberish,
      daiThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDAI(dai: string, overrides?: CallOverrides): Promise<void>;

    setDAO(dao: string, overrides?: CallOverrides): Promise<void>;

    setFactory(factory: string, overrides?: CallOverrides): Promise<void>;

    stabilizeFlan(
      rectangleOfFairness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    DAO(overrides?: CallOverrides): Promise<BigNumber>;

    blackHole(overrides?: CallOverrides): Promise<BigNumber>;

    buyFlanAndBurn(
      inputToken: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configure(
      _limbo: string,
      FlanSCXPair: string,
      behodler: string,
      flan: string,
      divergenceTolerance: BigNumberish,
      minQuoteWaitDuration: BigNumberish,
      precision: BigNumberish,
      priceBoostOvershoot: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configured(overrides?: CallOverrides): Promise<BigNumber>;

    endConfiguration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    generateFLNQuote(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    latestFlanQuotes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minAPY_to_FPS(
      minAPY: BigNumberish,
      daiThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDAI(
      dai: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDAO(
      dao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFactory(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stabilizeFlan(
      rectangleOfFairness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DAO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blackHole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyFlanAndBurn(
      inputToken: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configure(
      _limbo: string,
      FlanSCXPair: string,
      behodler: string,
      flan: string,
      divergenceTolerance: BigNumberish,
      minQuoteWaitDuration: BigNumberish,
      precision: BigNumberish,
      priceBoostOvershoot: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configured(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endConfiguration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    generateFLNQuote(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    latestFlanQuotes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minAPY_to_FPS(
      minAPY: BigNumberish,
      daiThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDAI(
      dai: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDAO(
      dao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFactory(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stabilizeFlan(
      rectangleOfFairness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
