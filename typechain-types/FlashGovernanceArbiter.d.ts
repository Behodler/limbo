/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FlashGovernanceArbiterInterface extends ethers.utils.Interface {
  functions: {
    "DAO()": FunctionFragment;
    "assertGovernanceApproved(address,address,bool)": FunctionFragment;
    "burnFlashGovernanceAsset(address,address,address,uint256)": FunctionFragment;
    "configureFlashGovernance(address,uint256,uint256,bool)": FunctionFragment;
    "configureSecurityParameters(uint8,uint256,uint8)": FunctionFragment;
    "configured()": FunctionFragment;
    "endConfiguration()": FunctionFragment;
    "enforceTolerance(uint256,uint256)": FunctionFragment;
    "enforceToleranceInt(int256,int256)": FunctionFragment;
    "flashGovernanceConfig()": FunctionFragment;
    "pendingFlashDecision(address,address)": FunctionFragment;
    "security()": FunctionFragment;
    "setDAO(address)": FunctionFragment;
    "setEnforcement(bool)": FunctionFragment;
    "withdrawGovernanceAsset(address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DAO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assertGovernanceApproved",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "burnFlashGovernanceAsset",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configureFlashGovernance",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "configureSecurityParameters",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configured",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enforceTolerance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enforceToleranceInt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flashGovernanceConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingFlashDecision",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "security", values?: undefined): string;
  encodeFunctionData(functionFragment: "setDAO", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setEnforcement",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawGovernanceAsset",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "DAO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assertGovernanceApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnFlashGovernanceAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureFlashGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureSecurityParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "configured", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enforceTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enforceToleranceInt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashGovernanceConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingFlashDecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "security", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDAO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEnforcement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawGovernanceAsset",
    data: BytesLike
  ): Result;

  events: {
    "flashDecision(address,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "flashDecision"): EventFragment;
}

export class FlashGovernanceArbiter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FlashGovernanceArbiterInterface;

  functions: {
    DAO(overrides?: CallOverrides): Promise<[string]>;

    assertGovernanceApproved(
      sender: string,
      target: string,
      emergency: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnFlashGovernanceAsset(
      targetContract: string,
      user: string,
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configureFlashGovernance(
      asset: string,
      amount: BigNumberish,
      unlockTime: BigNumberish,
      assetBurnable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configureSecurityParameters(
      maxGovernanceChangePerEpoch: BigNumberish,
      epochSize: BigNumberish,
      changeTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configured(overrides?: CallOverrides): Promise<[boolean]>;

    endConfiguration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enforceTolerance(
      v1: BigNumberish,
      v2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    enforceToleranceInt(
      v1: BigNumberish,
      v2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    flashGovernanceConfig(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        asset: string;
        amount: BigNumber;
        unlockTime: BigNumber;
        assetBurnable: boolean;
      }
    >;

    pendingFlashDecision(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        asset: string;
        amount: BigNumber;
        unlockTime: BigNumber;
        assetBurnable: boolean;
      }
    >;

    security(
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, number] & {
        maxGovernanceChangePerEpoch: number;
        epochSize: BigNumber;
        lastFlashGovernanceAct: BigNumber;
        changeTolerance: number;
      }
    >;

    setDAO(
      dao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEnforcement(
      enforce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawGovernanceAsset(
      targetContract: string,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DAO(overrides?: CallOverrides): Promise<string>;

  assertGovernanceApproved(
    sender: string,
    target: string,
    emergency: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnFlashGovernanceAsset(
    targetContract: string,
    user: string,
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configureFlashGovernance(
    asset: string,
    amount: BigNumberish,
    unlockTime: BigNumberish,
    assetBurnable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configureSecurityParameters(
    maxGovernanceChangePerEpoch: BigNumberish,
    epochSize: BigNumberish,
    changeTolerance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configured(overrides?: CallOverrides): Promise<boolean>;

  endConfiguration(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enforceTolerance(
    v1: BigNumberish,
    v2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  enforceToleranceInt(
    v1: BigNumberish,
    v2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  flashGovernanceConfig(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean] & {
      asset: string;
      amount: BigNumber;
      unlockTime: BigNumber;
      assetBurnable: boolean;
    }
  >;

  pendingFlashDecision(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean] & {
      asset: string;
      amount: BigNumber;
      unlockTime: BigNumber;
      assetBurnable: boolean;
    }
  >;

  security(
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, number] & {
      maxGovernanceChangePerEpoch: number;
      epochSize: BigNumber;
      lastFlashGovernanceAct: BigNumber;
      changeTolerance: number;
    }
  >;

  setDAO(
    dao: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEnforcement(
    enforce: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawGovernanceAsset(
    targetContract: string,
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DAO(overrides?: CallOverrides): Promise<string>;

    assertGovernanceApproved(
      sender: string,
      target: string,
      emergency: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    burnFlashGovernanceAsset(
      targetContract: string,
      user: string,
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    configureFlashGovernance(
      asset: string,
      amount: BigNumberish,
      unlockTime: BigNumberish,
      assetBurnable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    configureSecurityParameters(
      maxGovernanceChangePerEpoch: BigNumberish,
      epochSize: BigNumberish,
      changeTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    configured(overrides?: CallOverrides): Promise<boolean>;

    endConfiguration(overrides?: CallOverrides): Promise<void>;

    enforceTolerance(
      v1: BigNumberish,
      v2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enforceToleranceInt(
      v1: BigNumberish,
      v2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    flashGovernanceConfig(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        asset: string;
        amount: BigNumber;
        unlockTime: BigNumber;
        assetBurnable: boolean;
      }
    >;

    pendingFlashDecision(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        asset: string;
        amount: BigNumber;
        unlockTime: BigNumber;
        assetBurnable: boolean;
      }
    >;

    security(
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, number] & {
        maxGovernanceChangePerEpoch: number;
        epochSize: BigNumber;
        lastFlashGovernanceAct: BigNumber;
        changeTolerance: number;
      }
    >;

    setDAO(dao: string, overrides?: CallOverrides): Promise<void>;

    setEnforcement(enforce: boolean, overrides?: CallOverrides): Promise<void>;

    withdrawGovernanceAsset(
      targetContract: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    flashDecision(
      actor?: null,
      deposit_asset?: null,
      amount?: null,
      target?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        actor: string;
        deposit_asset: string;
        amount: BigNumber;
        target: string;
      }
    >;
  };

  estimateGas: {
    DAO(overrides?: CallOverrides): Promise<BigNumber>;

    assertGovernanceApproved(
      sender: string,
      target: string,
      emergency: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnFlashGovernanceAsset(
      targetContract: string,
      user: string,
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configureFlashGovernance(
      asset: string,
      amount: BigNumberish,
      unlockTime: BigNumberish,
      assetBurnable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configureSecurityParameters(
      maxGovernanceChangePerEpoch: BigNumberish,
      epochSize: BigNumberish,
      changeTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configured(overrides?: CallOverrides): Promise<BigNumber>;

    endConfiguration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enforceTolerance(
      v1: BigNumberish,
      v2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enforceToleranceInt(
      v1: BigNumberish,
      v2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashGovernanceConfig(overrides?: CallOverrides): Promise<BigNumber>;

    pendingFlashDecision(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    security(overrides?: CallOverrides): Promise<BigNumber>;

    setDAO(
      dao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEnforcement(
      enforce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawGovernanceAsset(
      targetContract: string,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DAO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assertGovernanceApproved(
      sender: string,
      target: string,
      emergency: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnFlashGovernanceAsset(
      targetContract: string,
      user: string,
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configureFlashGovernance(
      asset: string,
      amount: BigNumberish,
      unlockTime: BigNumberish,
      assetBurnable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configureSecurityParameters(
      maxGovernanceChangePerEpoch: BigNumberish,
      epochSize: BigNumberish,
      changeTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configured(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endConfiguration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enforceTolerance(
      v1: BigNumberish,
      v2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enforceToleranceInt(
      v1: BigNumberish,
      v2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flashGovernanceConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingFlashDecision(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    security(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDAO(
      dao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEnforcement(
      enforce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawGovernanceAsset(
      targetContract: string,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
