{
  "address": "0xB9f5A0Ad0B8F3b3C704C9b071f753F73Cc8843bE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dao",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "CrossingParameters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SoulStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "configured",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endConfiguration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dao",
          "type": "address"
        }
      ],
      "name": "setDAO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xecdf8cd6990ed83b270b7df54d33d2a215b109dd332646ad582cf18973e9c1e3",
  "receipt": {
    "to": null,
    "from": "0xD8d8632Bb8C8b199e43faDf7205749dd34C4B8c9",
    "contractAddress": "0xB9f5A0Ad0B8F3b3C704C9b071f753F73Cc8843bE",
    "transactionIndex": 0,
    "gasUsed": "793149",
    "logsBloom": "0x
    "blockHash": "0xf7de6e5bf672241917bfd0d55262e43ecb24d1210bbf29749468f9fb8bf47ca2",
    "transactionHash": "0xecdf8cd6990ed83b270b7df54d33d2a215b109dd332646ad582cf18973e9c1e3",
    "logs": [],
    "blockNumber": 7,
    "cumulativeGasUsed": "793149",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8c9bd714e2598860E56a4D9E675E717665204442"
  ],
  "solcInputHash": "3b633f60859fc01482cc6a8d04cca0a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CrossingParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SoulStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configured\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"}],\"name\":\"setDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/SoulReader.sol\":\"SoulReader\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/DAO/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../facades/LimboDAOLike.sol\\\";\\nimport \\\"../facades/FlashGovernanceArbiterLike.sol\\\";\\nimport \\\"../facades/ProposalFactoryLike.sol\\\";\\n\\nabstract contract Governable {\\n    FlashGovernanceArbiterLike internal flashGoverner;\\n    bool public configured;\\n    address public DAO;\\n\\n    function endConfiguration() public {\\n        configured = true;\\n    }\\n\\n    modifier onlySuccessfulProposal() {\\n        assertSuccessfulProposal(msg.sender);\\n        _;\\n    }\\n\\n    modifier onlySoulUpdateProposal(){\\n        assertSoulUpdateProposal(msg.sender);\\n        _;\\n    }\\n\\n    function assertSoulUpdateProposal(address sender) internal view {\\n        (,,address proposalFactory) = LimboDAOLike(DAO).proposalConfig();\\n        require(!configured || sender == ProposalFactoryLike(proposalFactory).soulUpdateProposal(),\\\"EJ\\\");\\n        assertSuccessfulProposal(sender);\\n    }\\n\\n    function _governanceApproved(bool emergency) internal {\\n        bool successfulProposal = LimboDAOLike(DAO).successfulProposal(\\n            msg.sender\\n        );\\n        if (successfulProposal) {\\n            flashGoverner.setEnforcement(false);\\n        } else if (configured)\\n            flashGoverner.assertGovernanceApproved(\\n                msg.sender,\\n                address(this),\\n                emergency\\n            );\\n    }\\n\\n    modifier governanceApproved(bool emergency) {\\n        _governanceApproved(emergency);\\n        _;\\n        flashGoverner.setEnforcement(true);\\n    }\\n\\n    function assertSuccessfulProposal(address sender) internal view {\\n        require(\\n            !configured || LimboDAOLike(DAO).successfulProposal(sender),\\n            \\\"EJ\\\"\\n        );\\n    }\\n\\n    constructor(address dao) {\\n        setDAO(dao);\\n    }\\n\\n    function setDAO(address dao) public {\\n        require(\\n            DAO == address(0) || msg.sender == DAO || !configured,\\n            \\\"EK\\\"\\n        );\\n        DAO = dao;\\n        flashGoverner = FlashGovernanceArbiterLike(\\n            LimboDAOLike(dao).getFlashGoverner()\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xefe9bfcfdb344f577be29b45db74381e271e88b90f1449e65775bccffb278af9\",\"license\":\"MIT\"},\"contracts/facades/FlashGovernanceArbiterLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract FlashGovernanceArbiterLike {\\n    function assertGovernanceApproved(address sender, address target, bool emergency)\\n        public\\n        virtual;\\n\\n    function enforceToleranceInt(int256 v1, int256 v2) public view virtual;\\n\\n    function enforceTolerance(uint256 v1, uint256 v2) public view virtual;\\n\\n    function burnFlashGovernanceAsset(\\n        address targetContract,\\n        address user,\\n        address asset,\\n        uint256 amount\\n    ) public virtual;\\n\\n     function setEnforcement(bool enforce) public virtual;\\n}\\n\",\"keccak256\":\"0x075201e18136944b3d1047edf9fc868acfbb63be95f8ede423e3253aa2d46712\",\"license\":\"MIT\"},\"contracts/facades/LimboDAOLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract LimboDAOLike {\\n    function approveFlanMintingPower(address minter, bool enabled)\\n        public\\n        virtual;\\n\\n    function makeProposal(address proposal, address proposer) public virtual;\\n\\n    function currentProposalState() public view virtual returns (uint,uint,address,uint,address);\\n\\n    function setProposalConfig(\\n        uint256 votingDuration,\\n        uint256 requiredFateStake,\\n        address proposalFactory\\n    ) public virtual;\\n\\n    function setApprovedAsset(address asset, bool approved) public virtual;\\n\\n    function successfulProposal(address proposal)\\n        public\\n        view\\n        virtual\\n        returns (bool);\\n\\n    function domainConfig()\\n        public\\n        virtual\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool,\\n            address,\\n            address\\n        );\\n\\n    function getFlashGoverner() external view virtual returns (address);\\n\\n    function proposalConfig() public virtual view returns (uint,uint,address);\\n}\\n\",\"keccak256\":\"0x8fb9ac064c3210e09b61cf5e28a8a7aaff41d406bad26458a7b37bc77d16cc77\",\"license\":\"MIT\"},\"contracts/facades/LimboLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract LimboLike {\\n    function latestIndex(address) public view virtual returns (uint256);\\n\\n    function souls(address, uint256)\\n        public\\n        view\\n        virtual\\n        returns (\\n            uint256, //lastRewardTimeStamp\\n            uint256,//accumulatedFlanPerShare\\n            uint256,//crossingThreshold\\n            uint256,//soulType\\n            uint256,//state\\n            uint256//flanPerSecond\\n        );\\n\\n    function tokenCrossingParameters(address, uint256)\\n        public\\n        view\\n        virtual\\n        returns (\\n            uint256,\\n            uint256,\\n            int256,\\n            uint256,\\n            bool\\n        );\\n\\n    function configureSoul(\\n        address token,\\n        uint256 crossingThreshold,\\n        uint256 soulType,\\n        uint256 state,\\n        uint256 index,\\n        uint256 fps\\n    ) public virtual;\\n\\n    function withdrawERC20(address token, address destination) public virtual;\\n\\n    function userTokenBalance(address token) public virtual returns (uint);\\n}\\n\",\"keccak256\":\"0x824095a315210698ff160a04fb30b7dceede5f9d30a2398627b4f27d8539d6a1\",\"license\":\"MIT\"},\"contracts/facades/ProposalFactoryLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ProposalFactoryLike {\\n     function toggleWhitelistProposal(address proposal) public virtual;\\n     function soulUpdateProposal () public  virtual view returns (address); \\n}\",\"keccak256\":\"0xeba46d344881a1bcc49c0afbd592f66629fc63529ba5679a8a4d9051e3b2a62c\",\"license\":\"MIT\"},\"contracts/periphery/SoulReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../DAO/Governable.sol\\\";\\nimport \\\"../facades/LimboLike.sol\\\";\\nimport \\\"../facades/LimboDAOLike.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract SoulReader is Governable {\\n    LimboLike limbo;\\n\\n    constructor(address dao) Governable(dao) {\\n        (address _limbo, , , , , , ) = LimboDAOLike(dao).domainConfig();\\n        limbo = LimboLike(_limbo);\\n    }\\n\\n    function SoulStats(address token)\\n        public\\n        view\\n        returns (\\n            uint256, //state\\n            uint256, //staked balance\\n            uint256 //fps\\n        )\\n    {\\n        uint256 latestIndex = limbo.latestIndex(token);\\n        (, , , ,uint256 state, uint256 fps) = limbo.souls(\\n            token,\\n            latestIndex\\n        );\\n        uint256 stakeBalance = IERC20(token).balanceOf(address(limbo));\\n        return (state, stakeBalance, fps);\\n    }\\n\\n    function CrossingParameters(address token)\\n        public\\n        view\\n        returns (\\n            uint256, //initialCrossingbonus\\n            int256, //bonusDelta,\\n            uint256 //fps\\n        )\\n    {\\n        uint256 latestIndex = limbo.latestIndex(token);\\n        (, , , , , uint256 flanPerSecond) = limbo.souls(\\n            token,\\n            latestIndex\\n        );\\n\\n        (, , int256 crossingBonusDelta, uint256 initialCrossingBonus, ) = limbo\\n            .tokenCrossingParameters(token, latestIndex);\\n        return (\\n            initialCrossingBonus,\\n            crossingBonusDelta,\\n            flanPerSecond\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7c36e40691eb72762b4f661d5d7901aa8638bbb7aa015d8be954d4a4e2a627ff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620011553803806200115583398181016040528101906200003791906200035a565b8062000049816200012160201b60201c565b5060008173ffffffffffffffffffffffffffffffffffffffff1663e8d9735f6040518163ffffffff1660e01b815260040160e060405180830381600087803b1580156200009557600080fd5b505af1158015620000aa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000d0919062000386565b505050505050905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200051c565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480620001cc5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80620001e55750600060149054906101000a900460ff16155b62000227576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200021e9062000475565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16632317beae6040518163ffffffff1660e01b815260040160206040518083038186803b158015620002af57600080fd5b505afa158015620002c4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002ea91906200035a565b6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000815190506200033d81620004e8565b92915050565b600081519050620003548162000502565b92915050565b6000602082840312156200036d57600080fd5b60006200037d848285016200032c565b91505092915050565b600080600080600080600060e0888a031215620003a257600080fd5b6000620003b28a828b016200032c565b9750506020620003c58a828b016200032c565b9650506040620003d88a828b016200032c565b9550506060620003eb8a828b016200032c565b9450506080620003fe8a828b0162000343565b93505060a0620004118a828b016200032c565b92505060c0620004248a828b016200032c565b91505092959891949750929550565b60006200044260028362000497565b91507f454b0000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006020820190508181036000830152620004908162000433565b9050919050565b600082825260208201905092915050565b6000620004b582620004c8565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620004f381620004a8565b8114620004ff57600080fd5b50565b6200050d81620004bc565b81146200051957600080fd5b50565b610c29806200052c6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063478fa62914610067578063534a763f146100715780635c832e93146100a35780638772a23a146100d557806398fabd3a146100f3578063e73a914c14610111575b600080fd5b61006f61012d565b005b61008b60048036038101906100869190610850565b61014a565b60405161009a93929190610afd565b60405180910390f35b6100bd60048036038101906100b89190610850565b610378565b6040516100cc93929190610ac6565b60405180910390f35b6100dd6105ac565b6040516100ea9190610a8b565b60405180910390f35b6100fb6105bf565b6040516101089190610a47565b60405180910390f35b61012b60048036038101906101269190610850565b6105e5565b005b6001600060146101000a81548160ff021916908315150217905550565b600080600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663057e9b96866040518263ffffffff1660e01b81526004016101ab9190610a47565b60206040518083038186803b1580156101c357600080fd5b505afa1580156101d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fb91906108a2565b9050600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c12cbe8688856040518363ffffffff1660e01b815260040161025d929190610a62565b60c06040518083038186803b15801561027557600080fd5b505afa158015610289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ad9190610942565b955095505050505060008773ffffffffffffffffffffffffffffffffffffffff166370a08231600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016103129190610a47565b60206040518083038186803b15801561032a57600080fd5b505afa15801561033e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036291906108a2565b9050828183965096509650505050509193909250565b600080600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663057e9b96866040518263ffffffff1660e01b81526004016103d99190610a47565b60206040518083038186803b1580156103f157600080fd5b505afa158015610405573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042991906108a2565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c12cbe8687846040518363ffffffff1660e01b815260040161048a929190610a62565b60c06040518083038186803b1580156104a257600080fd5b505afa1580156104b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104da9190610942565b95505050505050600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166325c2c38989866040518363ffffffff1660e01b8152600401610541929190610a62565b60a06040518083038186803b15801561055957600080fd5b505afa15801561056d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059191906108cb565b50935093505050808284965096509650505050509193909250565b600060149054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061068f5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806106a75750600060149054906101000a900460ff16155b6106e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106dd90610aa6565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16632317beae6040518163ffffffff1660e01b815260040160206040518083038186803b15801561076d57600080fd5b505afa158015610781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a59190610879565b6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000813590506107f681610b97565b92915050565b60008151905061080b81610b97565b92915050565b60008151905061082081610bae565b92915050565b60008151905061083581610bc5565b92915050565b60008151905061084a81610bdc565b92915050565b60006020828403121561086257600080fd5b6000610870848285016107e7565b91505092915050565b60006020828403121561088b57600080fd5b6000610899848285016107fc565b91505092915050565b6000602082840312156108b457600080fd5b60006108c28482850161083b565b91505092915050565b600080600080600060a086880312156108e357600080fd5b60006108f18882890161083b565b95505060206109028882890161083b565b945050604061091388828901610826565b93505060606109248882890161083b565b925050608061093588828901610811565b9150509295509295909350565b60008060008060008060c0878903121561095b57600080fd5b600061096989828a0161083b565b965050602061097a89828a0161083b565b955050604061098b89828a0161083b565b945050606061099c89828a0161083b565b93505060806109ad89828a0161083b565b92505060a06109be89828a0161083b565b9150509295509295509295565b6109d481610b45565b82525050565b6109e381610b57565b82525050565b6109f281610b63565b82525050565b6000610a05600283610b34565b91507f454b0000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b610a4181610b8d565b82525050565b6000602082019050610a5c60008301846109cb565b92915050565b6000604082019050610a7760008301856109cb565b610a846020830184610a38565b9392505050565b6000602082019050610aa060008301846109da565b92915050565b60006020820190508181036000830152610abf816109f8565b9050919050565b6000606082019050610adb6000830186610a38565b610ae860208301856109e9565b610af56040830184610a38565b949350505050565b6000606082019050610b126000830186610a38565b610b1f6020830185610a38565b610b2c6040830184610a38565b949350505050565b600082825260208201905092915050565b6000610b5082610b6d565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b610ba081610b45565b8114610bab57600080fd5b50565b610bb781610b57565b8114610bc257600080fd5b50565b610bce81610b63565b8114610bd957600080fd5b50565b610be581610b8d565b8114610bf057600080fd5b5056fea2646970667358221220b2cd6cbc64a9b4e9b742bf1a2ba8738afb6cf941e0006b171597075dbe96c03e64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063478fa62914610067578063534a763f146100715780635c832e93146100a35780638772a23a146100d557806398fabd3a146100f3578063e73a914c14610111575b600080fd5b61006f61012d565b005b61008b60048036038101906100869190610850565b61014a565b60405161009a93929190610afd565b60405180910390f35b6100bd60048036038101906100b89190610850565b610378565b6040516100cc93929190610ac6565b60405180910390f35b6100dd6105ac565b6040516100ea9190610a8b565b60405180910390f35b6100fb6105bf565b6040516101089190610a47565b60405180910390f35b61012b60048036038101906101269190610850565b6105e5565b005b6001600060146101000a81548160ff021916908315150217905550565b600080600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663057e9b96866040518263ffffffff1660e01b81526004016101ab9190610a47565b60206040518083038186803b1580156101c357600080fd5b505afa1580156101d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fb91906108a2565b9050600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c12cbe8688856040518363ffffffff1660e01b815260040161025d929190610a62565b60c06040518083038186803b15801561027557600080fd5b505afa158015610289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ad9190610942565b955095505050505060008773ffffffffffffffffffffffffffffffffffffffff166370a08231600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016103129190610a47565b60206040518083038186803b15801561032a57600080fd5b505afa15801561033e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036291906108a2565b9050828183965096509650505050509193909250565b600080600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663057e9b96866040518263ffffffff1660e01b81526004016103d99190610a47565b60206040518083038186803b1580156103f157600080fd5b505afa158015610405573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042991906108a2565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c12cbe8687846040518363ffffffff1660e01b815260040161048a929190610a62565b60c06040518083038186803b1580156104a257600080fd5b505afa1580156104b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104da9190610942565b95505050505050600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166325c2c38989866040518363ffffffff1660e01b8152600401610541929190610a62565b60a06040518083038186803b15801561055957600080fd5b505afa15801561056d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059191906108cb565b50935093505050808284965096509650505050509193909250565b600060149054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061068f5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806106a75750600060149054906101000a900460ff16155b6106e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106dd90610aa6565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16632317beae6040518163ffffffff1660e01b815260040160206040518083038186803b15801561076d57600080fd5b505afa158015610781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a59190610879565b6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000813590506107f681610b97565b92915050565b60008151905061080b81610b97565b92915050565b60008151905061082081610bae565b92915050565b60008151905061083581610bc5565b92915050565b60008151905061084a81610bdc565b92915050565b60006020828403121561086257600080fd5b6000610870848285016107e7565b91505092915050565b60006020828403121561088b57600080fd5b6000610899848285016107fc565b91505092915050565b6000602082840312156108b457600080fd5b60006108c28482850161083b565b91505092915050565b600080600080600060a086880312156108e357600080fd5b60006108f18882890161083b565b95505060206109028882890161083b565b945050604061091388828901610826565b93505060606109248882890161083b565b925050608061093588828901610811565b9150509295509295909350565b60008060008060008060c0878903121561095b57600080fd5b600061096989828a0161083b565b965050602061097a89828a0161083b565b955050604061098b89828a0161083b565b945050606061099c89828a0161083b565b93505060806109ad89828a0161083b565b92505060a06109be89828a0161083b565b9150509295509295509295565b6109d481610b45565b82525050565b6109e381610b57565b82525050565b6109f281610b63565b82525050565b6000610a05600283610b34565b91507f454b0000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b610a4181610b8d565b82525050565b6000602082019050610a5c60008301846109cb565b92915050565b6000604082019050610a7760008301856109cb565b610a846020830184610a38565b9392505050565b6000602082019050610aa060008301846109da565b92915050565b60006020820190508181036000830152610abf816109f8565b9050919050565b6000606082019050610adb6000830186610a38565b610ae860208301856109e9565b610af56040830184610a38565b949350505050565b6000606082019050610b126000830186610a38565b610b1f6020830185610a38565b610b2c6040830184610a38565b949350505050565b600082825260208201905092915050565b6000610b5082610b6d565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b610ba081610b45565b8114610bab57600080fd5b50565b610bb781610b57565b8114610bc257600080fd5b50565b610bce81610b63565b8114610bd957600080fd5b50565b610be581610b8d565b8114610bf057600080fd5b5056fea2646970667358221220b2cd6cbc64a9b4e9b742bf1a2ba8738afb6cf941e0006b171597075dbe96c03e64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1206,
        "contract": "contracts/periphery/SoulReader.sol:SoulReader",
        "label": "flashGoverner",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(FlashGovernanceArbiterLike)7575"
      },
      {
        "astId": 1208,
        "contract": "contracts/periphery/SoulReader.sol:SoulReader",
        "label": "configured",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1210,
        "contract": "contracts/periphery/SoulReader.sol:SoulReader",
        "label": "DAO",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7841,
        "contract": "contracts/periphery/SoulReader.sol:SoulReader",
        "label": "limbo",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LimboLike)7744"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(FlashGovernanceArbiterLike)7575": {
        "encoding": "inplace",
        "label": "contract FlashGovernanceArbiterLike",
        "numberOfBytes": "20"
      },
      "t_contract(LimboLike)7744": {
        "encoding": "inplace",
        "label": "contract LimboLike",
        "numberOfBytes": "20"
      }
    }
  }
}