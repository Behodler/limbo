{
  "address": "0x156E7b05073A8AD3C867b1362bb917696dCCA3f2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dao",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "oldFee",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "newFee",
          "type": "uint8"
        }
      ],
      "name": "burnOnTransferFeeAdjusted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnOnTransferFee",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "configured",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endConfiguration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allowance",
          "type": "uint256"
        }
      ],
      "name": "increaseMintAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int8",
          "name": "change",
          "type": "int8"
        }
      ],
      "name": "incrementBurnOnTransferFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "safeTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "fee",
          "type": "uint8"
        }
      ],
      "name": "setBurnOnTransferFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dao",
          "type": "address"
        }
      ],
      "name": "setDAO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "transferAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "whiteListMinting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd9b9b99cc3105d94bf5c85b16e7af7b1acd8459428670999690f3865055eb8f3",
  "receipt": {
    "to": null,
    "from": "0xD8d8632Bb8C8b199e43faDf7205749dd34C4B8c9",
    "contractAddress": "0x156E7b05073A8AD3C867b1362bb917696dCCA3f2",
    "transactionIndex": 0,
    "gasUsed": "2953211",
    "logsBloom": "0x
    "blockHash": "0x118352bea9ed78d38f73cc7904b6e09bc7f2ae0fd667afeca2d31c0f5e2f5ee5",
    "transactionHash": "0xd9b9b99cc3105d94bf5c85b16e7af7b1acd8459428670999690f3865055eb8f3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0xd9b9b99cc3105d94bf5c85b16e7af7b1acd8459428670999690f3865055eb8f3",
        "address": "0x156E7b05073A8AD3C867b1362bb917696dCCA3f2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d8d8632bb8c8b199e43fadf7205749dd34c4b8c9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x118352bea9ed78d38f73cc7904b6e09bc7f2ae0fd667afeca2d31c0f5e2f5ee5"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "2953211",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8c9bd714e2598860E56a4D9E675E717665204442"
  ],
  "solcInputHash": "3b633f60859fc01482cc6a8d04cca0a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"oldFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newFee\",\"type\":\"uint8\"}],\"name\":\"burnOnTransferFeeAdjusted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnOnTransferFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configured\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowance\",\"type\":\"uint256\"}],\"name\":\"increaseMintAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int8\",\"name\":\"change\",\"type\":\"int8\"}],\"name\":\"incrementBurnOnTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"safeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"}],\"name\":\"setBurnOnTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"}],\"name\":\"setDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"whiteListMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferAndCall(address,uint256,bytes)\":{\"details\":\"transfer token to a contract address with additional data if the recipient is a contact.\",\"params\":{\"_data\":\"The extra data to be passed to the receiving contract.\",\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Flan.sol\":\"Flan\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/DAO/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../facades/LimboDAOLike.sol\\\";\\nimport \\\"../facades/FlashGovernanceArbiterLike.sol\\\";\\nimport \\\"../facades/ProposalFactoryLike.sol\\\";\\n\\nabstract contract Governable {\\n    FlashGovernanceArbiterLike internal flashGoverner;\\n    bool public configured;\\n    address public DAO;\\n\\n    function endConfiguration() public {\\n        configured = true;\\n    }\\n\\n    modifier onlySuccessfulProposal() {\\n        assertSuccessfulProposal(msg.sender);\\n        _;\\n    }\\n\\n    modifier onlySoulUpdateProposal(){\\n        assertSoulUpdateProposal(msg.sender);\\n        _;\\n    }\\n\\n    function assertSoulUpdateProposal(address sender) internal view {\\n        (,,address proposalFactory) = LimboDAOLike(DAO).proposalConfig();\\n        require(!configured || sender == ProposalFactoryLike(proposalFactory).soulUpdateProposal(),\\\"EJ\\\");\\n        assertSuccessfulProposal(sender);\\n    }\\n\\n    function _governanceApproved(bool emergency) internal {\\n        bool successfulProposal = LimboDAOLike(DAO).successfulProposal(\\n            msg.sender\\n        );\\n        if (successfulProposal) {\\n            flashGoverner.setEnforcement(false);\\n        } else if (configured)\\n            flashGoverner.assertGovernanceApproved(\\n                msg.sender,\\n                address(this),\\n                emergency\\n            );\\n    }\\n\\n    modifier governanceApproved(bool emergency) {\\n        _governanceApproved(emergency);\\n        _;\\n        flashGoverner.setEnforcement(true);\\n    }\\n\\n    function assertSuccessfulProposal(address sender) internal view {\\n        require(\\n            !configured || LimboDAOLike(DAO).successfulProposal(sender),\\n            \\\"EJ\\\"\\n        );\\n    }\\n\\n    constructor(address dao) {\\n        setDAO(dao);\\n    }\\n\\n    function setDAO(address dao) public {\\n        require(\\n            DAO == address(0) || msg.sender == DAO || !configured,\\n            \\\"EK\\\"\\n        );\\n        DAO = dao;\\n        flashGoverner = FlashGovernanceArbiterLike(\\n            LimboDAOLike(dao).getFlashGoverner()\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xefe9bfcfdb344f577be29b45db74381e271e88b90f1449e65775bccffb278af9\",\"license\":\"MIT\"},\"contracts/ERC677/ERC20Burnable.sol\":{\"content\":\"// Sources flattened with hardhat v2.4.1 https://hardhat.org\\n\\n// File temp/@openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\n\\n// File temp/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\n// File temp/@openzeppelin/contracts/utils/Context.sol\\n\\n// File temp/@openzeppelin/contracts/token/ERC20/ERC20.sol\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) internal _balances;\\n\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n    uint256 internal _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(\\n            senderBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\\n// File temp/@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual returns (bool) {\\n       _burn(_msgSender(), amount);\\n       return true;\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: burn amount exceeds allowance\\\"\\n        );\\n        _approve(account, _msgSender(), currentAllowance - amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x3f25cd9b9f57823493179dc682f7bbd7ba21497d11a44712005b4caa821458b0\",\"license\":\"MIT\"},\"contracts/ERC677/ERC677.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./ERC20Burnable.sol\\\";\\nimport \\\"./IERC677Receiver.sol\\\";\\n\\n/*\\nAll tokens in Limbo comply with the ERC677 standard. In addition they are ownable, alow burning\\nand can whitelist addresses with finite or infinite minting power\\n*/\\n\\ncontract ERC677 is ERC20Burnable, Ownable {\\n   \\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\n\\n    }\\n\\n    /**\\n     * @dev transfer token to a contract address with additional data if the recipient is a contact.\\n     * @param _to The address to transfer to.\\n     * @param _value The amount to be transferred.\\n     * @param _data The extra data to be passed to the receiving contract.\\n     */\\n    function transferAndCall(\\n        address _to,\\n        uint256 _value,\\n        bytes memory _data\\n    ) public returns (bool success) {\\n        super.transfer(_to, _value);\\n        _transfer(msg.sender, _to, _value);\\n        if (isContract(_to)) {\\n            contractFallback(_to, _value, _data);\\n        }\\n        return true;\\n    }\\n\\n    function contractFallback(\\n        address _to,\\n        uint256 _value,\\n        bytes memory _data\\n    ) private {\\n        IERC677Receiver receiver = IERC677Receiver(_to);\\n        receiver.onTokenTransfer(msg.sender, _value, _data);\\n    }\\n\\n    function isContract(address _addr) private view returns (bool hasCode) {\\n        uint256 length;\\n        assembly {\\n            length := extcodesize(_addr)\\n        }\\n        return length > 0;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {}\\n}\\n\",\"keccak256\":\"0x5641dd66f364ce1d2cf85023cffa8fb176f9acaf05dcb3ae572fce83cdba5565\",\"license\":\"MIT\"},\"contracts/ERC677/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC677Receiver {\\n  function onTokenTransfer(address _sender, uint _value, bytes memory  _data) external;\\n}\",\"keccak256\":\"0xdf5ac91cee60955d7958504c7275b82357cb3aed3e05884b7265b24dc3759658\",\"license\":\"MIT\"},\"contracts/Flan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./ERC677/ERC677.sol\\\";\\nimport \\\"../contracts/DAO/Governable.sol\\\";\\n\\ncontract Flan is ERC677(\\\"Flan\\\", \\\"FLN\\\"), Governable {\\n    event burnOnTransferFeeAdjusted(uint8 oldFee, uint8 newFee);\\n    mapping(address => uint256) public mintAllowance; //type(uint).max == whitelist\\n\\n    uint8 public burnOnTransferFee = 0; //% between 1 and 100, recipient pays\\n\\n    constructor(address dao) Governable(dao) {}\\n\\n    function setBurnOnTransferFee(uint8 fee) public onlySuccessfulProposal {\\n        _setBurnOnTransferFee(fee);\\n    }\\n\\n    function incrementBurnOnTransferFee(int8 change) public governanceApproved(false) {\\n        uint8 newFee = uint8(int8(burnOnTransferFee) + change);\\n        flashGoverner.enforceTolerance(newFee, burnOnTransferFee);\\n        _setBurnOnTransferFee(newFee);\\n    }\\n\\n    function _setBurnOnTransferFee(uint8 fee) internal {\\n        uint8 priorFee = burnOnTransferFee;\\n        burnOnTransferFee = fee > 100 ? 100 : fee;\\n        emit burnOnTransferFeeAdjusted(priorFee, burnOnTransferFee);\\n    }\\n\\n    function whiteListMinting(address minter, bool enabled)\\n        public\\n        onlySuccessfulProposal\\n    {\\n        mintAllowance[minter] = enabled ? type(uint256).max : 0;\\n    }\\n\\n    function increaseMintAllowance(address minter, uint256 _allowance)\\n        public\\n        onlySuccessfulProposal\\n    {\\n        mintAllowance[minter] = mintAllowance[minter] + _allowance;\\n    }\\n\\n    function mint(address recipient, uint256 amount) public returns (bool) {\\n        uint256 allowance = mintAllowance[_msgSender()];\\n        require(\\n            _msgSender() == owner() || allowance >= amount,\\n            \\\"Flan: Mint allowance exceeded\\\"\\n        );\\n        approvedMint(recipient, amount, _msgSender(), allowance);\\n        return true;\\n    }\\n\\n    function approvedMint(\\n        address recipient,\\n        uint256 amount,\\n        address minter,\\n        uint256 allowance\\n    ) internal {\\n        _mint(recipient, amount);\\n        if (allowance < type(uint256).max) {\\n            mintAllowance[minter] = mintAllowance[minter] - amount;\\n        }\\n    }\\n\\n    function safeTransfer(address _to, uint256 _amount) external {\\n        uint256 flanBal = balanceOf(address(this));\\n        uint256 flanToTransfer = _amount > flanBal ? flanBal : _amount;\\n        _transfer(_msgSender(), _to, flanToTransfer);\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal override {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 fee = (burnOnTransferFee * amount) / 100;\\n\\n        _totalSupply = _totalSupply - fee;\\n        uint256 senderBalance = _balances[sender];\\n        require(\\n            senderBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount - fee;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa7eebeb72abb1f7849a1dff687462919a5c6c1f0ab8ab95560deccfca79b367b\",\"license\":\"MIT\"},\"contracts/facades/FlashGovernanceArbiterLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract FlashGovernanceArbiterLike {\\n    function assertGovernanceApproved(address sender, address target, bool emergency)\\n        public\\n        virtual;\\n\\n    function enforceToleranceInt(int256 v1, int256 v2) public view virtual;\\n\\n    function enforceTolerance(uint256 v1, uint256 v2) public view virtual;\\n\\n    function burnFlashGovernanceAsset(\\n        address targetContract,\\n        address user,\\n        address asset,\\n        uint256 amount\\n    ) public virtual;\\n\\n     function setEnforcement(bool enforce) public virtual;\\n}\\n\",\"keccak256\":\"0x075201e18136944b3d1047edf9fc868acfbb63be95f8ede423e3253aa2d46712\",\"license\":\"MIT\"},\"contracts/facades/LimboDAOLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract LimboDAOLike {\\n    function approveFlanMintingPower(address minter, bool enabled)\\n        public\\n        virtual;\\n\\n    function makeProposal(address proposal, address proposer) public virtual;\\n\\n    function currentProposalState() public view virtual returns (uint,uint,address,uint,address);\\n\\n    function setProposalConfig(\\n        uint256 votingDuration,\\n        uint256 requiredFateStake,\\n        address proposalFactory\\n    ) public virtual;\\n\\n    function setApprovedAsset(address asset, bool approved) public virtual;\\n\\n    function successfulProposal(address proposal)\\n        public\\n        view\\n        virtual\\n        returns (bool);\\n\\n    function domainConfig()\\n        public\\n        virtual\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool,\\n            address,\\n            address\\n        );\\n\\n    function getFlashGoverner() external view virtual returns (address);\\n\\n    function proposalConfig() public virtual view returns (uint,uint,address);\\n}\\n\",\"keccak256\":\"0x8fb9ac064c3210e09b61cf5e28a8a7aaff41d406bad26458a7b37bc77d16cc77\",\"license\":\"MIT\"},\"contracts/facades/ProposalFactoryLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ProposalFactoryLike {\\n     function toggleWhitelistProposal(address proposal) public virtual;\\n     function soulUpdateProposal () public  virtual view returns (address); \\n}\",\"keccak256\":\"0xeba46d344881a1bcc49c0afbd592f66629fc63529ba5679a8a4d9051e3b2a62c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600960006101000a81548160ff021916908360ff1602179055503480156200002d57600080fd5b50604051620038a3380380620038a38339818101604052810190620000539190620004d2565b806040518060400160405280600481526020017f466c616e000000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f464c4e000000000000000000000000000000000000000000000000000000000081525081818160039080519060200190620000da9291906200040b565b508060049080519060200190620000f39291906200040b565b505050620001166200010a6200013160201b60201c565b6200013960201b60201c565b50506200012981620001ff60201b60201c565b505062000626565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480620002aa5750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80620002c35750600660149054906101000a900460ff16155b62000305576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002fc9062000540565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16632317beae6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200038d57600080fd5b505afa158015620003a2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003c89190620004d2565b600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8280546200041990620005a7565b90600052602060002090601f0160209004810192826200043d576000855562000489565b82601f106200045857805160ff191683800117855562000489565b8280016001018555821562000489579182015b82811115620004885782518255916020019190600101906200046b565b5b5090506200049891906200049c565b5090565b5b80821115620004b75760008160009055506001016200049d565b5090565b600081519050620004cc816200060c565b92915050565b600060208284031215620004e557600080fd5b6000620004f584828501620004bb565b91505092915050565b60006200050d60028362000562565b91507f454b0000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600060208201905081810360008301526200055b81620004fe565b9050919050565b600082825260208201905092915050565b6000620005808262000587565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006002820490506001821680620005c057607f821691505b60208210811415620005d757620005d6620005dd565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b620006178162000573565b81146200062357600080fd5b50565b61326d80620006366000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063785a47f811610104578063a9059cbb116100a2578063dd62ed3e11610071578063dd62ed3e14610544578063e73a914c14610574578063eeca018314610590578063f2fde38b146105ac576101cf565b8063a9059cbb146104aa578063c5119ff8146104da578063d7a8ac0a1461050a578063dd549bc314610526576101cf565b80638da5cb5b116100de5780638da5cb5b1461042057806395d89b411461043e57806398fabd3a1461045c578063a457c2d71461047a576101cf565b8063785a47f8146103ca57806379cc6790146103e65780638772a23a14610402576101cf565b80634000aea01161017157806342966c681161014b57806342966c6814610356578063478fa6291461038657806370a0823114610390578063715018a6146103c0576101cf565b80634000aea0146102da57806340c10f191461030a578063423f6cef1461033a576101cf565b806318160ddd116101ad57806318160ddd1461023e57806323b872dd1461025c578063313ce5671461028c57806339509351146102aa576101cf565b806304a3692d146101d457806306fdde03146101f0578063095ea7b31461020e575b600080fd5b6101ee60048036038101906101e9919061240f565b6105c8565b005b6101f86105dd565b6040516102059190612b42565b60405180910390f35b610228600480360381019061022391906122f1565b61066f565b6040516102359190612b27565b60405180910390f35b61024661068d565b6040516102539190612d64565b60405180910390f35b61027660048036038101906102719190612266565b610697565b6040516102839190612b27565b60405180910390f35b610294610798565b6040516102a19190612d7f565b60405180910390f35b6102c460048036038101906102bf91906122f1565b6107a1565b6040516102d19190612b27565b60405180910390f35b6102f460048036038101906102ef919061232d565b61084d565b6040516103019190612b27565b60405180910390f35b610324600480360381019061031f91906122f1565b61088a565b6040516103319190612b27565b60405180910390f35b610354600480360381019061034f91906122f1565b61097b565b005b610370600480360381019061036b91906123e6565b6109b3565b60405161037d9190612b27565b60405180910390f35b61038e6109cf565b005b6103aa60048036038101906103a591906121d8565b6109ec565b6040516103b79190612d64565b60405180910390f35b6103c8610a34565b005b6103e460048036038101906103df91906122f1565b610abc565b005b61040060048036038101906103fb91906122f1565b610b57565b005b61040a610bdb565b6040516104179190612b27565b60405180910390f35b610428610bee565b6040516104359190612a97565b60405180910390f35b610446610c18565b6040516104539190612b42565b60405180910390f35b610464610caa565b6040516104719190612a97565b60405180910390f35b610494600480360381019061048f91906122f1565b610cd0565b6040516104a19190612b27565b60405180910390f35b6104c460048036038101906104bf91906122f1565b610dc4565b6040516104d19190612b27565b60405180910390f35b6104f460048036038101906104ef91906121d8565b610de2565b6040516105019190612d64565b60405180910390f35b610524600480360381019061051f91906122b5565b610dfa565b005b61052e610e78565b60405161053b9190612d7f565b60405180910390f35b61055e6004803603810190610559919061222a565b610e8b565b60405161056b9190612d64565b60405180910390f35b61058e600480360381019061058991906121d8565b610f12565b005b6105aa60048036038101906105a591906123bd565b611115565b005b6105c660048036038101906105c191906121d8565b611277565b005b6105d13361136f565b6105da81611474565b50565b6060600380546105ec906130c5565b80601f0160208091040260200160405190810160405280929190818152602001828054610618906130c5565b80156106655780601f1061063a57610100808354040283529160200191610665565b820191906000526020600020905b81548152906001019060200180831161064857829003601f168201915b5050505050905090565b600061068361067c611502565b848461150a565b6001905092915050565b6000600254905090565b60006106a48484846116d5565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006106ef611502565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561076f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076690612c64565b60405180910390fd5b61078c8561077b611502565b85846107879190612fdb565b61150a565b60019150509392505050565b60006012905090565b60006108436107ae611502565b8484600160006107bc611502565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461083e9190612efa565b61150a565b6001905092915050565b60006108598484610dc4565b506108653385856116d5565b61086e846119a2565b1561087f5761087e8484846119b5565b5b600190509392505050565b60008060086000610899611502565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506108de610bee565b73ffffffffffffffffffffffffffffffffffffffff166108fc611502565b73ffffffffffffffffffffffffffffffffffffffff16148061091e5750828110155b61095d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095490612c04565b60405180910390fd5b610970848461096a611502565b84611a2f565b600191505092915050565b6000610986306109ec565b905060008183116109975782610999565b815b90506109ad6109a6611502565b85836116d5565b50505050565b60006109c66109c0611502565b83611af6565b60019050919050565b6001600660146101000a81548160ff021916908315150217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a3c611502565b73ffffffffffffffffffffffffffffffffffffffff16610a5a610bee565b73ffffffffffffffffffffffffffffffffffffffff1614610ab0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa790612c84565b60405180910390fd5b610aba6000611cca565b565b610ac53361136f565b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b109190612efa565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000610b6a83610b65611502565b610e8b565b905081811015610baf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba690612ca4565b60405180910390fd5b610bcc83610bbb611502565b8484610bc79190612fdb565b61150a565b610bd68383611af6565b505050565b600660149054906101000a900460ff1681565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610c27906130c5565b80601f0160208091040260200160405190810160405280929190818152602001828054610c53906130c5565b8015610ca05780601f10610c7557610100808354040283529160200191610ca0565b820191906000526020600020905b815481529060010190602001808311610c8357829003601f168201915b5050505050905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060016000610cdf611502565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610d9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9390612d24565b60405180910390fd5b610db9610da7611502565b858584610db49190612fdb565b61150a565b600191505092915050565b6000610dd8610dd1611502565b84846116d5565b6001905092915050565b60086020528060005260406000206000915090505481565b610e033361136f565b80610e0f576000610e31565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600960009054906101000a900460ff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610fbc5750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80610fd45750600660149054906101000a900460ff16155b611013576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100a90612c24565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16632317beae6040518163ffffffff1660e01b815260040160206040518083038186803b15801561109a57600080fd5b505afa1580156110ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d29190612201565b600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600061112081611d90565b600082600960009054906101000a900460ff1661113d9190612e85565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634739a2ba82600960009054906101000a900460ff166040518363ffffffff1660e01b81526004016111ab929190612d9a565b60006040518083038186803b1580156111c357600080fd5b505afa1580156111d7573d6000803e3d6000fd5b505050506111e481611474565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad64d6cb60016040518263ffffffff1660e01b81526004016112419190612b27565b600060405180830381600087803b15801561125b57600080fd5b505af115801561126f573d6000803e3d6000fd5b505050505050565b61127f611502565b73ffffffffffffffffffffffffffffffffffffffff1661129d610bee565b73ffffffffffffffffffffffffffffffffffffffff16146112f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ea90612c84565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611363576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135a90612ba4565b60405180910390fd5b61136c81611cca565b50565b600660149054906101000a900460ff1615806114325750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b7ebc23b826040518263ffffffff1660e01b81526004016113e19190612a97565b60206040518083038186803b1580156113f957600080fd5b505afa15801561140d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114319190612394565b5b611471576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146890612c44565b60405180910390fd5b50565b6000600960009054906101000a900460ff16905060648260ff1611611499578161149c565b60645b600960006101000a81548160ff021916908360ff1602179055507f2254c3f9f4378b228a7dbc8aaf885a3c628ec58f24033af3d4e8d7d90d264db481600960009054906101000a900460ff166040516114f6929190612dc3565b60405180910390a15050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561157a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157190612d04565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156115ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e190612bc4565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516116c89190612d64565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611745576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173c90612ce4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ac90612b64565b60405180910390fd5b6117c0838383611f84565b6000606482600960009054906101000a900460ff1660ff166117e29190612f81565b6117ec9190612f50565b9050806002546117fc9190612fdb565b60028190555060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015611888576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187f90612be4565b60405180910390fd5b82816118949190612fdb565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081836118e29190612fdb565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461192f9190612efa565b925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516119939190612d64565b60405180910390a35050505050565b600080823b905060008111915050919050565b60008390508073ffffffffffffffffffffffffffffffffffffffff1663a4c0ed363385856040518463ffffffff1660e01b81526004016119f793929190612ae9565b600060405180830381600087803b158015611a1157600080fd5b505af1158015611a25573d6000803e3d6000fd5b5050505050505050565b611a398484611f89565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015611af05782600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611aac9190612fdb565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5d90612cc4565b60405180910390fd5b611b7282600083611f84565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611bf8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bef90612b84565b60405180910390fd5b8181611c049190612fdb565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160026000828254611c589190612fdb565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611cbd9190612d64565b60405180910390a3505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b7ebc23b336040518263ffffffff1660e01b8152600401611ded9190612a97565b60206040518083038186803b158015611e0557600080fd5b505afa158015611e19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3d9190612394565b90508015611ed857600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad64d6cb60006040518263ffffffff1660e01b8152600401611ea19190612b27565b600060405180830381600087803b158015611ebb57600080fd5b505af1158015611ecf573d6000803e3d6000fd5b50505050611f80565b600660149054906101000a900460ff1615611f7f57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398f112413330856040518463ffffffff1660e01b8152600401611f4c93929190612ab2565b600060405180830381600087803b158015611f6657600080fd5b505af1158015611f7a573d6000803e3d6000fd5b505050505b5b5050565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ff9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff090612d44565b60405180910390fd5b61200560008383611f84565b80600260008282546120179190612efa565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461206c9190612efa565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516120d19190612d64565b60405180910390a35050565b60006120f06120eb84612e1d565b612dec565b90508281526020810184848401111561210857600080fd5b612113848285613083565b509392505050565b60008135905061212a816131c4565b92915050565b60008151905061213f816131c4565b92915050565b600081359050612154816131db565b92915050565b600081519050612169816131db565b92915050565b600082601f83011261218057600080fd5b81356121908482602086016120dd565b91505092915050565b6000813590506121a8816131f2565b92915050565b6000813590506121bd81613209565b92915050565b6000813590506121d281613220565b92915050565b6000602082840312156121ea57600080fd5b60006121f88482850161211b565b91505092915050565b60006020828403121561221357600080fd5b600061222184828501612130565b91505092915050565b6000806040838503121561223d57600080fd5b600061224b8582860161211b565b925050602061225c8582860161211b565b9150509250929050565b60008060006060848603121561227b57600080fd5b60006122898682870161211b565b935050602061229a8682870161211b565b92505060406122ab868287016121ae565b9150509250925092565b600080604083850312156122c857600080fd5b60006122d68582860161211b565b92505060206122e785828601612145565b9150509250929050565b6000806040838503121561230457600080fd5b60006123128582860161211b565b9250506020612323858286016121ae565b9150509250929050565b60008060006060848603121561234257600080fd5b60006123508682870161211b565b9350506020612361868287016121ae565b925050604084013567ffffffffffffffff81111561237e57600080fd5b61238a8682870161216f565b9150509250925092565b6000602082840312156123a657600080fd5b60006123b48482850161215a565b91505092915050565b6000602082840312156123cf57600080fd5b60006123dd84828501612199565b91505092915050565b6000602082840312156123f857600080fd5b6000612406848285016121ae565b91505092915050565b60006020828403121561242157600080fd5b600061242f848285016121c3565b91505092915050565b6124418161300f565b82525050565b61245081613021565b82525050565b600061246182612e4d565b61246b8185612e63565b935061247b818560208601613092565b612484816131b3565b840191505092915050565b600061249a82612e58565b6124a48185612e74565b93506124b4818560208601613092565b6124bd816131b3565b840191505092915050565b60006124d5602383612e74565b91507f45524332303a207472616e7366657220746f20746865207a65726f206164647260008301527f65737300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061253b602283612e74565b91507f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008301527f63650000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006125a1602683612e74565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612607602283612e74565b91507f45524332303a20617070726f766520746f20746865207a65726f20616464726560008301527f73730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061266d602683612e74565b91507f45524332303a207472616e7366657220616d6f756e742065786365656473206260008301527f616c616e636500000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006126d3601d83612e74565b91507f466c616e3a204d696e7420616c6c6f77616e63652065786365656465640000006000830152602082019050919050565b6000612713600283612e74565b91507f454b0000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612753600283612e74565b91507f454a0000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612793602883612e74565b91507f45524332303a207472616e7366657220616d6f756e742065786365656473206160008301527f6c6c6f77616e63650000000000000000000000000000000000000000000000006020830152604082019050919050565b60006127f9602083612e74565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000612839602483612e74565b91507f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f7760008301527f616e6365000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061289f602183612e74565b91507f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008301527f73000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612905602583612e74565b91507f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008301527f64726573730000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061296b602483612e74565b91507f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006129d1602583612e74565b91507f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008301527f207a65726f0000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612a37601f83612e74565b91507f45524332303a206d696e7420746f20746865207a65726f2061646472657373006000830152602082019050919050565b612a738161305a565b82525050565b612a8281613071565b82525050565b612a9181613064565b82525050565b6000602082019050612aac6000830184612438565b92915050565b6000606082019050612ac76000830186612438565b612ad46020830185612438565b612ae16040830184612447565b949350505050565b6000606082019050612afe6000830186612438565b612b0b6020830185612a6a565b8181036040830152612b1d8184612456565b9050949350505050565b6000602082019050612b3c6000830184612447565b92915050565b60006020820190508181036000830152612b5c818461248f565b905092915050565b60006020820190508181036000830152612b7d816124c8565b9050919050565b60006020820190508181036000830152612b9d8161252e565b9050919050565b60006020820190508181036000830152612bbd81612594565b9050919050565b60006020820190508181036000830152612bdd816125fa565b9050919050565b60006020820190508181036000830152612bfd81612660565b9050919050565b60006020820190508181036000830152612c1d816126c6565b9050919050565b60006020820190508181036000830152612c3d81612706565b9050919050565b60006020820190508181036000830152612c5d81612746565b9050919050565b60006020820190508181036000830152612c7d81612786565b9050919050565b60006020820190508181036000830152612c9d816127ec565b9050919050565b60006020820190508181036000830152612cbd8161282c565b9050919050565b60006020820190508181036000830152612cdd81612892565b9050919050565b60006020820190508181036000830152612cfd816128f8565b9050919050565b60006020820190508181036000830152612d1d8161295e565b9050919050565b60006020820190508181036000830152612d3d816129c4565b9050919050565b60006020820190508181036000830152612d5d81612a2a565b9050919050565b6000602082019050612d796000830184612a6a565b92915050565b6000602082019050612d946000830184612a88565b92915050565b6000604082019050612daf6000830185612a79565b612dbc6020830184612a79565b9392505050565b6000604082019050612dd86000830185612a88565b612de56020830184612a88565b9392505050565b6000604051905081810181811067ffffffffffffffff82111715612e1357612e12613184565b5b8060405250919050565b600067ffffffffffffffff821115612e3857612e37613184565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612e908261302d565b9150612e9b8361302d565b925081607f03831360008312151615612eb757612eb66130f7565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80038312600083121615612eef57612eee6130f7565b5b828201905092915050565b6000612f058261305a565b9150612f108361305a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612f4557612f446130f7565b5b828201905092915050565b6000612f5b8261305a565b9150612f668361305a565b925082612f7657612f75613126565b5b828204905092915050565b6000612f8c8261305a565b9150612f978361305a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612fd057612fcf6130f7565b5b828202905092915050565b6000612fe68261305a565b9150612ff18361305a565b925082821015613004576130036130f7565b5b828203905092915050565b600061301a8261303a565b9050919050565b60008115159050919050565b60008160000b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061307c82613064565b9050919050565b82818337600083830152505050565b60005b838110156130b0578082015181840152602081019050613095565b838111156130bf576000848401525b50505050565b600060028204905060018216806130dd57607f821691505b602082108114156130f1576130f0613155565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6131cd8161300f565b81146131d857600080fd5b50565b6131e481613021565b81146131ef57600080fd5b50565b6131fb8161302d565b811461320657600080fd5b50565b6132128161305a565b811461321d57600080fd5b50565b61322981613064565b811461323457600080fd5b5056fea2646970667358221220b539e947f3c772d8b8ca201eb4837258db6207d9395226e0bfaaf2d97d7c0dab64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063785a47f811610104578063a9059cbb116100a2578063dd62ed3e11610071578063dd62ed3e14610544578063e73a914c14610574578063eeca018314610590578063f2fde38b146105ac576101cf565b8063a9059cbb146104aa578063c5119ff8146104da578063d7a8ac0a1461050a578063dd549bc314610526576101cf565b80638da5cb5b116100de5780638da5cb5b1461042057806395d89b411461043e57806398fabd3a1461045c578063a457c2d71461047a576101cf565b8063785a47f8146103ca57806379cc6790146103e65780638772a23a14610402576101cf565b80634000aea01161017157806342966c681161014b57806342966c6814610356578063478fa6291461038657806370a0823114610390578063715018a6146103c0576101cf565b80634000aea0146102da57806340c10f191461030a578063423f6cef1461033a576101cf565b806318160ddd116101ad57806318160ddd1461023e57806323b872dd1461025c578063313ce5671461028c57806339509351146102aa576101cf565b806304a3692d146101d457806306fdde03146101f0578063095ea7b31461020e575b600080fd5b6101ee60048036038101906101e9919061240f565b6105c8565b005b6101f86105dd565b6040516102059190612b42565b60405180910390f35b610228600480360381019061022391906122f1565b61066f565b6040516102359190612b27565b60405180910390f35b61024661068d565b6040516102539190612d64565b60405180910390f35b61027660048036038101906102719190612266565b610697565b6040516102839190612b27565b60405180910390f35b610294610798565b6040516102a19190612d7f565b60405180910390f35b6102c460048036038101906102bf91906122f1565b6107a1565b6040516102d19190612b27565b60405180910390f35b6102f460048036038101906102ef919061232d565b61084d565b6040516103019190612b27565b60405180910390f35b610324600480360381019061031f91906122f1565b61088a565b6040516103319190612b27565b60405180910390f35b610354600480360381019061034f91906122f1565b61097b565b005b610370600480360381019061036b91906123e6565b6109b3565b60405161037d9190612b27565b60405180910390f35b61038e6109cf565b005b6103aa60048036038101906103a591906121d8565b6109ec565b6040516103b79190612d64565b60405180910390f35b6103c8610a34565b005b6103e460048036038101906103df91906122f1565b610abc565b005b61040060048036038101906103fb91906122f1565b610b57565b005b61040a610bdb565b6040516104179190612b27565b60405180910390f35b610428610bee565b6040516104359190612a97565b60405180910390f35b610446610c18565b6040516104539190612b42565b60405180910390f35b610464610caa565b6040516104719190612a97565b60405180910390f35b610494600480360381019061048f91906122f1565b610cd0565b6040516104a19190612b27565b60405180910390f35b6104c460048036038101906104bf91906122f1565b610dc4565b6040516104d19190612b27565b60405180910390f35b6104f460048036038101906104ef91906121d8565b610de2565b6040516105019190612d64565b60405180910390f35b610524600480360381019061051f91906122b5565b610dfa565b005b61052e610e78565b60405161053b9190612d7f565b60405180910390f35b61055e6004803603810190610559919061222a565b610e8b565b60405161056b9190612d64565b60405180910390f35b61058e600480360381019061058991906121d8565b610f12565b005b6105aa60048036038101906105a591906123bd565b611115565b005b6105c660048036038101906105c191906121d8565b611277565b005b6105d13361136f565b6105da81611474565b50565b6060600380546105ec906130c5565b80601f0160208091040260200160405190810160405280929190818152602001828054610618906130c5565b80156106655780601f1061063a57610100808354040283529160200191610665565b820191906000526020600020905b81548152906001019060200180831161064857829003601f168201915b5050505050905090565b600061068361067c611502565b848461150a565b6001905092915050565b6000600254905090565b60006106a48484846116d5565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006106ef611502565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561076f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076690612c64565b60405180910390fd5b61078c8561077b611502565b85846107879190612fdb565b61150a565b60019150509392505050565b60006012905090565b60006108436107ae611502565b8484600160006107bc611502565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461083e9190612efa565b61150a565b6001905092915050565b60006108598484610dc4565b506108653385856116d5565b61086e846119a2565b1561087f5761087e8484846119b5565b5b600190509392505050565b60008060086000610899611502565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506108de610bee565b73ffffffffffffffffffffffffffffffffffffffff166108fc611502565b73ffffffffffffffffffffffffffffffffffffffff16148061091e5750828110155b61095d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095490612c04565b60405180910390fd5b610970848461096a611502565b84611a2f565b600191505092915050565b6000610986306109ec565b905060008183116109975782610999565b815b90506109ad6109a6611502565b85836116d5565b50505050565b60006109c66109c0611502565b83611af6565b60019050919050565b6001600660146101000a81548160ff021916908315150217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a3c611502565b73ffffffffffffffffffffffffffffffffffffffff16610a5a610bee565b73ffffffffffffffffffffffffffffffffffffffff1614610ab0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa790612c84565b60405180910390fd5b610aba6000611cca565b565b610ac53361136f565b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b109190612efa565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000610b6a83610b65611502565b610e8b565b905081811015610baf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba690612ca4565b60405180910390fd5b610bcc83610bbb611502565b8484610bc79190612fdb565b61150a565b610bd68383611af6565b505050565b600660149054906101000a900460ff1681565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610c27906130c5565b80601f0160208091040260200160405190810160405280929190818152602001828054610c53906130c5565b8015610ca05780601f10610c7557610100808354040283529160200191610ca0565b820191906000526020600020905b815481529060010190602001808311610c8357829003601f168201915b5050505050905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060016000610cdf611502565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610d9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9390612d24565b60405180910390fd5b610db9610da7611502565b858584610db49190612fdb565b61150a565b600191505092915050565b6000610dd8610dd1611502565b84846116d5565b6001905092915050565b60086020528060005260406000206000915090505481565b610e033361136f565b80610e0f576000610e31565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600960009054906101000a900460ff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610fbc5750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80610fd45750600660149054906101000a900460ff16155b611013576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100a90612c24565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16632317beae6040518163ffffffff1660e01b815260040160206040518083038186803b15801561109a57600080fd5b505afa1580156110ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d29190612201565b600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600061112081611d90565b600082600960009054906101000a900460ff1661113d9190612e85565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634739a2ba82600960009054906101000a900460ff166040518363ffffffff1660e01b81526004016111ab929190612d9a565b60006040518083038186803b1580156111c357600080fd5b505afa1580156111d7573d6000803e3d6000fd5b505050506111e481611474565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad64d6cb60016040518263ffffffff1660e01b81526004016112419190612b27565b600060405180830381600087803b15801561125b57600080fd5b505af115801561126f573d6000803e3d6000fd5b505050505050565b61127f611502565b73ffffffffffffffffffffffffffffffffffffffff1661129d610bee565b73ffffffffffffffffffffffffffffffffffffffff16146112f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ea90612c84565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611363576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135a90612ba4565b60405180910390fd5b61136c81611cca565b50565b600660149054906101000a900460ff1615806114325750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b7ebc23b826040518263ffffffff1660e01b81526004016113e19190612a97565b60206040518083038186803b1580156113f957600080fd5b505afa15801561140d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114319190612394565b5b611471576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146890612c44565b60405180910390fd5b50565b6000600960009054906101000a900460ff16905060648260ff1611611499578161149c565b60645b600960006101000a81548160ff021916908360ff1602179055507f2254c3f9f4378b228a7dbc8aaf885a3c628ec58f24033af3d4e8d7d90d264db481600960009054906101000a900460ff166040516114f6929190612dc3565b60405180910390a15050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561157a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157190612d04565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156115ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e190612bc4565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516116c89190612d64565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611745576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173c90612ce4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ac90612b64565b60405180910390fd5b6117c0838383611f84565b6000606482600960009054906101000a900460ff1660ff166117e29190612f81565b6117ec9190612f50565b9050806002546117fc9190612fdb565b60028190555060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015611888576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187f90612be4565b60405180910390fd5b82816118949190612fdb565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081836118e29190612fdb565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461192f9190612efa565b925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516119939190612d64565b60405180910390a35050505050565b600080823b905060008111915050919050565b60008390508073ffffffffffffffffffffffffffffffffffffffff1663a4c0ed363385856040518463ffffffff1660e01b81526004016119f793929190612ae9565b600060405180830381600087803b158015611a1157600080fd5b505af1158015611a25573d6000803e3d6000fd5b5050505050505050565b611a398484611f89565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015611af05782600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611aac9190612fdb565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5d90612cc4565b60405180910390fd5b611b7282600083611f84565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611bf8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bef90612b84565b60405180910390fd5b8181611c049190612fdb565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160026000828254611c589190612fdb565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611cbd9190612d64565b60405180910390a3505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b7ebc23b336040518263ffffffff1660e01b8152600401611ded9190612a97565b60206040518083038186803b158015611e0557600080fd5b505afa158015611e19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3d9190612394565b90508015611ed857600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad64d6cb60006040518263ffffffff1660e01b8152600401611ea19190612b27565b600060405180830381600087803b158015611ebb57600080fd5b505af1158015611ecf573d6000803e3d6000fd5b50505050611f80565b600660149054906101000a900460ff1615611f7f57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398f112413330856040518463ffffffff1660e01b8152600401611f4c93929190612ab2565b600060405180830381600087803b158015611f6657600080fd5b505af1158015611f7a573d6000803e3d6000fd5b505050505b5b5050565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ff9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff090612d44565b60405180910390fd5b61200560008383611f84565b80600260008282546120179190612efa565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461206c9190612efa565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516120d19190612d64565b60405180910390a35050565b60006120f06120eb84612e1d565b612dec565b90508281526020810184848401111561210857600080fd5b612113848285613083565b509392505050565b60008135905061212a816131c4565b92915050565b60008151905061213f816131c4565b92915050565b600081359050612154816131db565b92915050565b600081519050612169816131db565b92915050565b600082601f83011261218057600080fd5b81356121908482602086016120dd565b91505092915050565b6000813590506121a8816131f2565b92915050565b6000813590506121bd81613209565b92915050565b6000813590506121d281613220565b92915050565b6000602082840312156121ea57600080fd5b60006121f88482850161211b565b91505092915050565b60006020828403121561221357600080fd5b600061222184828501612130565b91505092915050565b6000806040838503121561223d57600080fd5b600061224b8582860161211b565b925050602061225c8582860161211b565b9150509250929050565b60008060006060848603121561227b57600080fd5b60006122898682870161211b565b935050602061229a8682870161211b565b92505060406122ab868287016121ae565b9150509250925092565b600080604083850312156122c857600080fd5b60006122d68582860161211b565b92505060206122e785828601612145565b9150509250929050565b6000806040838503121561230457600080fd5b60006123128582860161211b565b9250506020612323858286016121ae565b9150509250929050565b60008060006060848603121561234257600080fd5b60006123508682870161211b565b9350506020612361868287016121ae565b925050604084013567ffffffffffffffff81111561237e57600080fd5b61238a8682870161216f565b9150509250925092565b6000602082840312156123a657600080fd5b60006123b48482850161215a565b91505092915050565b6000602082840312156123cf57600080fd5b60006123dd84828501612199565b91505092915050565b6000602082840312156123f857600080fd5b6000612406848285016121ae565b91505092915050565b60006020828403121561242157600080fd5b600061242f848285016121c3565b91505092915050565b6124418161300f565b82525050565b61245081613021565b82525050565b600061246182612e4d565b61246b8185612e63565b935061247b818560208601613092565b612484816131b3565b840191505092915050565b600061249a82612e58565b6124a48185612e74565b93506124b4818560208601613092565b6124bd816131b3565b840191505092915050565b60006124d5602383612e74565b91507f45524332303a207472616e7366657220746f20746865207a65726f206164647260008301527f65737300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061253b602283612e74565b91507f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008301527f63650000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006125a1602683612e74565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612607602283612e74565b91507f45524332303a20617070726f766520746f20746865207a65726f20616464726560008301527f73730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061266d602683612e74565b91507f45524332303a207472616e7366657220616d6f756e742065786365656473206260008301527f616c616e636500000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006126d3601d83612e74565b91507f466c616e3a204d696e7420616c6c6f77616e63652065786365656465640000006000830152602082019050919050565b6000612713600283612e74565b91507f454b0000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612753600283612e74565b91507f454a0000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612793602883612e74565b91507f45524332303a207472616e7366657220616d6f756e742065786365656473206160008301527f6c6c6f77616e63650000000000000000000000000000000000000000000000006020830152604082019050919050565b60006127f9602083612e74565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000612839602483612e74565b91507f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f7760008301527f616e6365000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061289f602183612e74565b91507f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008301527f73000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612905602583612e74565b91507f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008301527f64726573730000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061296b602483612e74565b91507f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006129d1602583612e74565b91507f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008301527f207a65726f0000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612a37601f83612e74565b91507f45524332303a206d696e7420746f20746865207a65726f2061646472657373006000830152602082019050919050565b612a738161305a565b82525050565b612a8281613071565b82525050565b612a9181613064565b82525050565b6000602082019050612aac6000830184612438565b92915050565b6000606082019050612ac76000830186612438565b612ad46020830185612438565b612ae16040830184612447565b949350505050565b6000606082019050612afe6000830186612438565b612b0b6020830185612a6a565b8181036040830152612b1d8184612456565b9050949350505050565b6000602082019050612b3c6000830184612447565b92915050565b60006020820190508181036000830152612b5c818461248f565b905092915050565b60006020820190508181036000830152612b7d816124c8565b9050919050565b60006020820190508181036000830152612b9d8161252e565b9050919050565b60006020820190508181036000830152612bbd81612594565b9050919050565b60006020820190508181036000830152612bdd816125fa565b9050919050565b60006020820190508181036000830152612bfd81612660565b9050919050565b60006020820190508181036000830152612c1d816126c6565b9050919050565b60006020820190508181036000830152612c3d81612706565b9050919050565b60006020820190508181036000830152612c5d81612746565b9050919050565b60006020820190508181036000830152612c7d81612786565b9050919050565b60006020820190508181036000830152612c9d816127ec565b9050919050565b60006020820190508181036000830152612cbd8161282c565b9050919050565b60006020820190508181036000830152612cdd81612892565b9050919050565b60006020820190508181036000830152612cfd816128f8565b9050919050565b60006020820190508181036000830152612d1d8161295e565b9050919050565b60006020820190508181036000830152612d3d816129c4565b9050919050565b60006020820190508181036000830152612d5d81612a2a565b9050919050565b6000602082019050612d796000830184612a6a565b92915050565b6000602082019050612d946000830184612a88565b92915050565b6000604082019050612daf6000830185612a79565b612dbc6020830184612a79565b9392505050565b6000604082019050612dd86000830185612a88565b612de56020830184612a88565b9392505050565b6000604051905081810181811067ffffffffffffffff82111715612e1357612e12613184565b5b8060405250919050565b600067ffffffffffffffff821115612e3857612e37613184565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612e908261302d565b9150612e9b8361302d565b925081607f03831360008312151615612eb757612eb66130f7565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80038312600083121615612eef57612eee6130f7565b5b828201905092915050565b6000612f058261305a565b9150612f108361305a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612f4557612f446130f7565b5b828201905092915050565b6000612f5b8261305a565b9150612f668361305a565b925082612f7657612f75613126565b5b828204905092915050565b6000612f8c8261305a565b9150612f978361305a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612fd057612fcf6130f7565b5b828202905092915050565b6000612fe68261305a565b9150612ff18361305a565b925082821015613004576130036130f7565b5b828203905092915050565b600061301a8261303a565b9050919050565b60008115159050919050565b60008160000b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061307c82613064565b9050919050565b82818337600083830152505050565b60005b838110156130b0578082015181840152602081019050613095565b838111156130bf576000848401525b50505050565b600060028204905060018216806130dd57607f821691505b602082108114156130f1576130f0613155565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6131cd8161300f565b81146131d857600080fd5b50565b6131e481613021565b81146131ef57600080fd5b50565b6131fb8161302d565b811461320657600080fd5b50565b6132128161305a565b811461321d57600080fd5b50565b61322981613064565b811461323457600080fd5b5056fea2646970667358221220b539e947f3c772d8b8ca201eb4837258db6207d9395226e0bfaaf2d97d7c0dab64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferAndCall(address,uint256,bytes)": {
        "details": "transfer token to a contract address with additional data if the recipient is a contact.",
        "params": {
          "_data": "The extra data to be passed to the receiving contract.",
          "_to": "The address to transfer to.",
          "_value": "The amount to be transferred."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3903,
        "contract": "contracts/Flan.sol:Flan",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3909,
        "contract": "contracts/Flan.sol:Flan",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3911,
        "contract": "contracts/Flan.sol:Flan",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3913,
        "contract": "contracts/Flan.sol:Flan",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 3915,
        "contract": "contracts/Flan.sol:Flan",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/Flan.sol:Flan",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1206,
        "contract": "contracts/Flan.sol:Flan",
        "label": "flashGoverner",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(FlashGovernanceArbiterLike)7575"
      },
      {
        "astId": 1208,
        "contract": "contracts/Flan.sol:Flan",
        "label": "configured",
        "offset": 20,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 1210,
        "contract": "contracts/Flan.sol:Flan",
        "label": "DAO",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 4601,
        "contract": "contracts/Flan.sol:Flan",
        "label": "mintAllowance",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4604,
        "contract": "contracts/Flan.sol:Flan",
        "label": "burnOnTransferFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(FlashGovernanceArbiterLike)7575": {
        "encoding": "inplace",
        "label": "contract FlashGovernanceArbiterLike",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}