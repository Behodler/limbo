{
  "address": "0x59698F078B0004fbbb3EE455c54D88C6c059B274",
  "abi": [
    {
      "inputs": [],
      "name": "invoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "burnable",
          "type": "bool"
        }
      ],
      "name": "parameterize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_behodler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_limbo",
          "type": "address"
        }
      ],
      "name": "seed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_scarcity",
          "type": "uint256"
        }
      ],
      "name": "setScarcityToMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e1f6c8ae3eb37d4ea4c9ff37d339c939b91781a1b34d72c5e21695f15dd7c34",
  "receipt": {
    "to": null,
    "from": "0xD8d8632Bb8C8b199e43faDf7205749dd34C4B8c9",
    "contractAddress": "0x59698F078B0004fbbb3EE455c54D88C6c059B274",
    "transactionIndex": 0,
    "gasUsed": "345960",
    "logsBloom": "0x
    "blockHash": "0x2d58b99724b246751f02bbe6d095cff21f086653021d82bb897e2ea99b66696b",
    "transactionHash": "0x3e1f6c8ae3eb37d4ea4c9ff37d339c939b91781a1b34d72c5e21695f15dd7c34",
    "logs": [],
    "blockNumber": 9,
    "cumulativeGasUsed": "345960",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3b633f60859fc01482cc6a8d04cca0a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"invoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"burnable\",\"type\":\"bool\"}],\"name\":\"parameterize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_behodler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_limbo\",\"type\":\"address\"}],\"name\":\"seed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_scarcity\",\"type\":\"uint256\"}],\"name\":\"setScarcityToMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/testing/MockAddTokenPower.sol\":\"MockAddTokenPower\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/ERC677/ERC20Burnable.sol\":{\"content\":\"// Sources flattened with hardhat v2.4.1 https://hardhat.org\\n\\n// File temp/@openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\n\\n// File temp/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\n// File temp/@openzeppelin/contracts/utils/Context.sol\\n\\n// File temp/@openzeppelin/contracts/token/ERC20/ERC20.sol\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) internal _balances;\\n\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n    uint256 internal _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(\\n            senderBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\\n// File temp/@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual returns (bool) {\\n       _burn(_msgSender(), amount);\\n       return true;\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: burn amount exceeds allowance\\\"\\n        );\\n        _approve(account, _msgSender(), currentAllowance - amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x3f25cd9b9f57823493179dc682f7bbd7ba21497d11a44712005b4caa821458b0\",\"license\":\"MIT\"},\"contracts/ERC677/ERC677.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./ERC20Burnable.sol\\\";\\nimport \\\"./IERC677Receiver.sol\\\";\\n\\n/*\\nAll tokens in Limbo comply with the ERC677 standard. In addition they are ownable, alow burning\\nand can whitelist addresses with finite or infinite minting power\\n*/\\n\\ncontract ERC677 is ERC20Burnable, Ownable {\\n   \\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\n\\n    }\\n\\n    /**\\n     * @dev transfer token to a contract address with additional data if the recipient is a contact.\\n     * @param _to The address to transfer to.\\n     * @param _value The amount to be transferred.\\n     * @param _data The extra data to be passed to the receiving contract.\\n     */\\n    function transferAndCall(\\n        address _to,\\n        uint256 _value,\\n        bytes memory _data\\n    ) public returns (bool success) {\\n        super.transfer(_to, _value);\\n        _transfer(msg.sender, _to, _value);\\n        if (isContract(_to)) {\\n            contractFallback(_to, _value, _data);\\n        }\\n        return true;\\n    }\\n\\n    function contractFallback(\\n        address _to,\\n        uint256 _value,\\n        bytes memory _data\\n    ) private {\\n        IERC677Receiver receiver = IERC677Receiver(_to);\\n        receiver.onTokenTransfer(msg.sender, _value, _data);\\n    }\\n\\n    function isContract(address _addr) private view returns (bool hasCode) {\\n        uint256 length;\\n        assembly {\\n            length := extcodesize(_addr)\\n        }\\n        return length > 0;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {}\\n}\\n\",\"keccak256\":\"0x5641dd66f364ce1d2cf85023cffa8fb176f9acaf05dcb3ae572fce83cdba5565\",\"license\":\"MIT\"},\"contracts/ERC677/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC677Receiver {\\n  function onTokenTransfer(address _sender, uint _value, bytes memory  _data) external;\\n}\",\"keccak256\":\"0xdf5ac91cee60955d7958504c7275b82357cb3aed3e05884b7265b24dc3759658\",\"license\":\"MIT\"},\"contracts/facades/BehodlerLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract BehodlerLike {\\n    function withdrawLiquidityFindSCX(\\n        address outputToken,\\n        uint256 tokensToRelease,\\n        uint256 scx,\\n        uint256 passes\\n    ) external view virtual returns (uint256);\\n\\n    function burn(uint256 value) public virtual returns (bool);\\n\\n    function config()\\n        public\\n        virtual\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            address\\n        );\\n\\n    function transfer(address dest, uint256 amount)\\n        external\\n        virtual\\n        returns (bool);\\n\\n    function totalSupply () external virtual returns (uint);\\n}\\n\",\"keccak256\":\"0xbe75d0165e5a390e3d934afdcffdc7a259586faf6c23ac3442381a87107af70f\",\"license\":\"MIT\"},\"contracts/facades/LimboAddTokenToBehodlerPowerLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract LimboAddTokenToBehodlerPowerLike {\\n    function parameterize(address soul, bool burnable) public virtual;\\n}\\n\\n\",\"keccak256\":\"0xf0671be25664595117b71d727bbc8a75e3b2ba9e29bc0b43882aaf95a4536256\",\"license\":\"MIT\"},\"contracts/testing/MockAddTokenPower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./MockBehodler.sol\\\";\\nimport \\\"../facades/LimboAddTokenToBehodlerPowerLike.sol\\\";\\n\\ncontract MockAddTokenPower is LimboAddTokenToBehodlerPowerLike {\\n    address behodler;\\n    address limbo;\\n    uint256 scxToMint = 10000;\\n\\n    function setScarcityToMint(uint256 _scarcity) public {\\n        scxToMint = _scarcity;\\n    }\\n\\n    function seed(address _behodler, address _limbo) public {\\n        limbo = _limbo;\\n        behodler = _behodler;\\n    }\\n\\n    function parameterize(address token, bool burnable) public override {}\\n\\n    function invoke() public {\\n        MockBehodler(behodler).mint(scxToMint);\\n        MockBehodler(behodler).transfer(limbo, scxToMint);\\n    }\\n}\\n\",\"keccak256\":\"0xa55ed04083cfb850cf7c81b72e20b4bb3c38209084174435bf0d860ea37496df\",\"license\":\"MIT\"},\"contracts/testing/MockBehodler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../ERC677/ERC677.sol\\\";\\nimport \\\"../facades/BehodlerLike.sol\\\";\\n\\ncontract MockBehodler is ERC677 {\\n    address addTokenPower;\\n    uint256 priceMultiplier = 200;\\n\\n    function setPriceMultiplier(uint256 _priceMultiplier) public {\\n        priceMultiplier = _priceMultiplier;\\n    }\\n\\n    function withdrawLiquidityFindSCX(\\n        address outputToken,\\n        uint256 tokensToRelease,\\n        uint256 scx,\\n        uint256 passes\\n    ) external view returns (uint256) {\\n        return priceMultiplier * scx;\\n    }\\n\\n    function mintTo(address recipient, uint256 amount) public {\\n        _mint(recipient, amount);\\n    }\\n\\n    function mint(uint256 amount) public {\\n        require(\\n            msg.sender == addTokenPower,\\n            \\\"Only Mock Power can mint on Mock Behodler.\\\"\\n        );\\n        _mint(msg.sender, amount);\\n    }\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address _addTokenPower\\n    ) ERC677(name, symbol) {\\n        _mint(msg.sender, 100 ether);\\n        addTokenPower = _addTokenPower;\\n    }\\n\\n    address MickyMouseToken = 0xAa645185F79506175917Ae2Fdd3128E4711D4065;\\n\\n    function config()\\n        public\\n        view\\n        returns (\\n            uint256 transferFee,\\n            uint256 burnFee,\\n            address feeDestination\\n        )\\n    {\\n        transferFee = 15;\\n        burnFee = 5;\\n        feeDestination = MickyMouseToken;\\n    }\\n}\\n\",\"keccak256\":\"0x209cbe3a257e61bffd96f893b5304e2c67f27ad40baba9b67ee63b3bb980aab0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405261271060025534801561001657600080fd5b506104e6806100266000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806314c6fd2814610051578063289add0c1461006d5780639127d6c814610089578063cab7f521146100a5575b600080fd5b61006b60048036038101906100669190610333565b6100af565b005b610087600480360381019061008291906102f7565b6100b3565b005b6100a3600480360381019061009e9190610398565b610138565b005b6100ad610142565b005b5050565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b8060028190555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a0712d686002546040518263ffffffff1660e01b815260040161019d9190610408565b600060405180830381600087803b1580156101b757600080fd5b505af11580156101cb573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002546040518363ffffffff1660e01b815260040161024e9291906103df565b602060405180830381600087803b15801561026857600080fd5b505af115801561027c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a0919061036f565b50565b6000813590506102b28161046b565b92915050565b6000813590506102c781610482565b92915050565b6000815190506102dc81610482565b92915050565b6000813590506102f181610499565b92915050565b6000806040838503121561030a57600080fd5b6000610318858286016102a3565b9250506020610329858286016102a3565b9150509250929050565b6000806040838503121561034657600080fd5b6000610354858286016102a3565b9250506020610365858286016102b8565b9150509250929050565b60006020828403121561038157600080fd5b600061038f848285016102cd565b91505092915050565b6000602082840312156103aa57600080fd5b60006103b8848285016102e2565b91505092915050565b6103ca81610423565b82525050565b6103d981610461565b82525050565b60006040820190506103f460008301856103c1565b61040160208301846103d0565b9392505050565b600060208201905061041d60008301846103d0565b92915050565b600061042e82610441565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61047481610423565b811461047f57600080fd5b50565b61048b81610435565b811461049657600080fd5b50565b6104a281610461565b81146104ad57600080fd5b5056fea26469706673582212203b1e690a08cfb11f28a7cb43a01594212514922ddbf8281028c48a16b9372fac64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806314c6fd2814610051578063289add0c1461006d5780639127d6c814610089578063cab7f521146100a5575b600080fd5b61006b60048036038101906100669190610333565b6100af565b005b610087600480360381019061008291906102f7565b6100b3565b005b6100a3600480360381019061009e9190610398565b610138565b005b6100ad610142565b005b5050565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b8060028190555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a0712d686002546040518263ffffffff1660e01b815260040161019d9190610408565b600060405180830381600087803b1580156101b757600080fd5b505af11580156101cb573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002546040518363ffffffff1660e01b815260040161024e9291906103df565b602060405180830381600087803b15801561026857600080fd5b505af115801561027c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a0919061036f565b50565b6000813590506102b28161046b565b92915050565b6000813590506102c781610482565b92915050565b6000815190506102dc81610482565b92915050565b6000813590506102f181610499565b92915050565b6000806040838503121561030a57600080fd5b6000610318858286016102a3565b9250506020610329858286016102a3565b9150509250929050565b6000806040838503121561034657600080fd5b6000610354858286016102a3565b9250506020610365858286016102b8565b9150509250929050565b60006020828403121561038157600080fd5b600061038f848285016102cd565b91505092915050565b6000602082840312156103aa57600080fd5b60006103b8848285016102e2565b91505092915050565b6103ca81610423565b82525050565b6103d981610461565b82525050565b60006040820190506103f460008301856103c1565b61040160208301846103d0565b9392505050565b600060208201905061041d60008301846103d0565b92915050565b600061042e82610441565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61047481610423565b811461047f57600080fd5b50565b61048b81610435565b811461049657600080fd5b50565b6104a281610461565b81146104ad57600080fd5b5056fea26469706673582212203b1e690a08cfb11f28a7cb43a01594212514922ddbf8281028c48a16b9372fac64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7986,
        "contract": "contracts/testing/MockAddTokenPower.sol:MockAddTokenPower",
        "label": "behodler",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7988,
        "contract": "contracts/testing/MockAddTokenPower.sol:MockAddTokenPower",
        "label": "limbo",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7991,
        "contract": "contracts/testing/MockAddTokenPower.sol:MockAddTokenPower",
        "label": "scxToMint",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}