{
  "address": "0xa37e010A79f8156de749806068860A3D01366F2c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dao",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orchestrateExecute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proposalFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toggleContract",
          "type": "address"
        }
      ],
      "name": "parameterize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb1b6a0b9e2ea8aa476476e61cb4b398ab51e8a21cb081038644afb925da72a77",
  "receipt": {
    "to": null,
    "from": "0xD8d8632Bb8C8b199e43faDf7205749dd34C4B8c9",
    "contractAddress": "0xa37e010A79f8156de749806068860A3D01366F2c",
    "transactionIndex": 0,
    "gasUsed": "606133",
    "logsBloom": "0x
    "blockHash": "0xf778b14c6b974ab6ec304262ed8798e4feefc1f9add1848d58d510f9b22cf62d",
    "transactionHash": "0xb1b6a0b9e2ea8aa476476e61cb4b398ab51e8a21cb081038644afb925da72a77",
    "logs": [],
    "blockNumber": 26,
    "cumulativeGasUsed": "606133",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8c9bd714e2598860E56a4D9E675E717665204442",
    "Toggle Whitelist"
  ],
  "solcInputHash": "3b633f60859fc01482cc6a8d04cca0a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orchestrateExecute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposalFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toggleContract\",\"type\":\"address\"}],\"name\":\"parameterize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAO/Proposals/ToggleWhitelistProposalProposal.sol\":\"ToggleWhitelistProposalProposal\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/DAO/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../facades/LimboDAOLike.sol\\\";\\nimport \\\"../facades/FlashGovernanceArbiterLike.sol\\\";\\nimport \\\"../facades/ProposalFactoryLike.sol\\\";\\n\\nabstract contract Governable {\\n    FlashGovernanceArbiterLike internal flashGoverner;\\n    bool public configured;\\n    address public DAO;\\n\\n    function endConfiguration() public {\\n        configured = true;\\n    }\\n\\n    modifier onlySuccessfulProposal() {\\n        assertSuccessfulProposal(msg.sender);\\n        _;\\n    }\\n\\n    modifier onlySoulUpdateProposal(){\\n        assertSoulUpdateProposal(msg.sender);\\n        _;\\n    }\\n\\n    function assertSoulUpdateProposal(address sender) internal view {\\n        (,,address proposalFactory) = LimboDAOLike(DAO).proposalConfig();\\n        require(!configured || sender == ProposalFactoryLike(proposalFactory).soulUpdateProposal(),\\\"EJ\\\");\\n        assertSuccessfulProposal(sender);\\n    }\\n\\n    function _governanceApproved(bool emergency) internal {\\n        bool successfulProposal = LimboDAOLike(DAO).successfulProposal(\\n            msg.sender\\n        );\\n        if (successfulProposal) {\\n            flashGoverner.setEnforcement(false);\\n        } else if (configured)\\n            flashGoverner.assertGovernanceApproved(\\n                msg.sender,\\n                address(this),\\n                emergency\\n            );\\n    }\\n\\n    modifier governanceApproved(bool emergency) {\\n        _governanceApproved(emergency);\\n        _;\\n        flashGoverner.setEnforcement(true);\\n    }\\n\\n    function assertSuccessfulProposal(address sender) internal view {\\n        require(\\n            !configured || LimboDAOLike(DAO).successfulProposal(sender),\\n            \\\"EJ\\\"\\n        );\\n    }\\n\\n    constructor(address dao) {\\n        setDAO(dao);\\n    }\\n\\n    function setDAO(address dao) public {\\n        require(\\n            DAO == address(0) || msg.sender == DAO || !configured,\\n            \\\"EK\\\"\\n        );\\n        DAO = dao;\\n        flashGoverner = FlashGovernanceArbiterLike(\\n            LimboDAOLike(dao).getFlashGoverner()\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xefe9bfcfdb344f577be29b45db74381e271e88b90f1449e65775bccffb278af9\",\"license\":\"MIT\"},\"contracts/DAO/ProposalFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../facades/LimboDAOLike.sol\\\";\\nimport \\\"./Governable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract Proposal {\\n    string public description;\\n    LimboDAOLike DAO;\\n\\n    constructor(address dao, string memory _description) {\\n        DAO = LimboDAOLike(dao);\\n        description = _description;\\n    }\\n\\n    modifier onlyDAO() {\\n        address dao = address(DAO);\\n        require(dao != address(0), \\\"PROPOSAL: DAO not set\\\");\\n        require(msg.sender == dao, \\\"PROPOSAL: only DAO can invoke\\\");\\n        _;\\n    }\\n\\n    modifier notCurrent() {\\n        (, , , , address proposal) = DAO.currentProposalState();\\n        require(proposal != address(this), \\\"LimboDAO: proposal locked\\\");\\n        _;\\n    }\\n\\n    function orchestrateExecute() public onlyDAO {\\n        require(execute(), \\\"LimboDAO: execution of proposal failed\\\");\\n    }\\n\\n    function execute() internal virtual returns (bool);\\n}\\n\\ncontract ProposalFactory is Governable, Ownable {\\n    mapping(address => bool) public whitelistedProposalContracts;\\n    address public soulUpdateProposal;\\n\\n    constructor(\\n        address _dao,\\n        address whitelistingProposal,\\n        address _soulUpdateProposal\\n    ) Governable(_dao) {\\n        whitelistedProposalContracts[whitelistingProposal] = true;\\n        whitelistedProposalContracts[_soulUpdateProposal] = true;\\n        soulUpdateProposal = _soulUpdateProposal;\\n    }\\n\\n    //MorgothDAO is the ultimate rule maker\\n    function changeSoulUpdateProposal(address newProposal) public onlyOwner {\\n        soulUpdateProposal = newProposal;\\n    }\\n\\n    function toggleWhitelistProposal(address proposal)\\n        public\\n        onlySuccessfulProposal\\n    {\\n        whitelistedProposalContracts[proposal] = !whitelistedProposalContracts[\\n            proposal\\n        ];\\n    }\\n\\n    function lodgeProposal(address proposal) public {\\n        require(\\n            whitelistedProposalContracts[proposal],\\n            \\\"LimboDAO: invalid proposal\\\"\\n        );\\n        LimboDAOLike(DAO).makeProposal(proposal, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x4063a2350cb4f4b77096e484b047759a69193ec010232189af785f8464739cda\",\"license\":\"MIT\"},\"contracts/DAO/Proposals/ToggleWhitelistProposalProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../ProposalFactory.sol\\\";\\nimport \\\"../../facades/ProposalFactoryLike.sol\\\";\\n\\ncontract ToggleWhitelistProposalProposal is Proposal {\\n    struct Parameters {\\n        address proposalFactory;\\n        address toggleContract;\\n    }\\n\\n    Parameters params;\\n\\n    constructor(address dao, string memory _description)\\n        Proposal(dao, description){\\n    }\\n\\n    function parameterize(address proposalFactory, address toggleContract)\\n        public\\n        notCurrent\\n    {\\n        params.proposalFactory = proposalFactory;\\n        params.toggleContract = toggleContract;\\n    }\\n\\n    function execute() internal override returns (bool) {\\n        ProposalFactoryLike(params.proposalFactory).toggleWhitelistProposal(\\n            params.toggleContract\\n        );\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xe3190cb518209b173fb26b79efeee795eac46da46e1fd32104b569a2373c933e\",\"license\":\"MIT\"},\"contracts/facades/FlashGovernanceArbiterLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract FlashGovernanceArbiterLike {\\n    function assertGovernanceApproved(address sender, address target, bool emergency)\\n        public\\n        virtual;\\n\\n    function enforceToleranceInt(int256 v1, int256 v2) public view virtual;\\n\\n    function enforceTolerance(uint256 v1, uint256 v2) public view virtual;\\n\\n    function burnFlashGovernanceAsset(\\n        address targetContract,\\n        address user,\\n        address asset,\\n        uint256 amount\\n    ) public virtual;\\n\\n     function setEnforcement(bool enforce) public virtual;\\n}\\n\",\"keccak256\":\"0x075201e18136944b3d1047edf9fc868acfbb63be95f8ede423e3253aa2d46712\",\"license\":\"MIT\"},\"contracts/facades/LimboDAOLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract LimboDAOLike {\\n    function approveFlanMintingPower(address minter, bool enabled)\\n        public\\n        virtual;\\n\\n    function makeProposal(address proposal, address proposer) public virtual;\\n\\n    function currentProposalState() public view virtual returns (uint,uint,address,uint,address);\\n\\n    function setProposalConfig(\\n        uint256 votingDuration,\\n        uint256 requiredFateStake,\\n        address proposalFactory\\n    ) public virtual;\\n\\n    function setApprovedAsset(address asset, bool approved) public virtual;\\n\\n    function successfulProposal(address proposal)\\n        public\\n        view\\n        virtual\\n        returns (bool);\\n\\n    function domainConfig()\\n        public\\n        virtual\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool,\\n            address,\\n            address\\n        );\\n\\n    function getFlashGoverner() external view virtual returns (address);\\n\\n    function proposalConfig() public virtual view returns (uint,uint,address);\\n}\\n\",\"keccak256\":\"0x8fb9ac064c3210e09b61cf5e28a8a7aaff41d406bad26458a7b37bc77d16cc77\",\"license\":\"MIT\"},\"contracts/facades/ProposalFactoryLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ProposalFactoryLike {\\n     function toggleWhitelistProposal(address proposal) public virtual;\\n     function soulUpdateProposal () public  virtual view returns (address); \\n}\",\"keccak256\":\"0xeba46d344881a1bcc49c0afbd592f66629fc63529ba5679a8a4d9051e3b2a62c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000d9838038062000d98833981810160405281019062000037919062000268565b8160008054620000479062000393565b80601f0160208091040260200160405190810160405280929190818152602001828054620000759062000393565b8015620000c65780601f106200009a57610100808354040283529160200191620000c6565b820191906000526020600020905b815481529060010190602001808311620000a857829003601f168201915b505050505081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060009080519060200190620001249291906200012f565b505050505062000441565b8280546200013d9062000393565b90600052602060002090601f016020900481019282620001615760008555620001ad565b82601f106200017c57805160ff1916838001178555620001ad565b82800160010185558215620001ad579182015b82811115620001ac5782518255916020019190600101906200018f565b5b509050620001bc9190620001c0565b5090565b5b80821115620001db576000816000905550600101620001c1565b5090565b6000620001f6620001f084620002f6565b620002c2565b9050828152602081018484840111156200020f57600080fd5b6200021c8482856200035d565b509392505050565b600081519050620002358162000427565b92915050565b600082601f8301126200024d57600080fd5b81516200025f848260208601620001df565b91505092915050565b600080604083850312156200027c57600080fd5b60006200028c8582860162000224565b925050602083015167ffffffffffffffff811115620002aa57600080fd5b620002b8858286016200023b565b9150509250929050565b6000604051905081810181811067ffffffffffffffff82111715620002ec57620002eb620003f8565b5b8060405250919050565b600067ffffffffffffffff821115620003145762000313620003f8565b5b601f19601f8301169050602081019050919050565b600062000336826200033d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156200037d57808201518184015260208101905062000360565b838111156200038d576000848401525b50505050565b60006002820490506001821680620003ac57607f821691505b60208210811415620003c357620003c2620003c9565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620004328162000329565b81146200043e57600080fd5b50565b61094780620004516000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633e7f6c64146100465780637284e41614610050578063ef99fc0e1461006e575b600080fd5b61004e61008a565b005b6100586101d9565b6040516100659190610744565b60405180910390f35b61008860048036038101906100839190610508565b610267565b005b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610121576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610118906107a6565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461018f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018690610766565b60405180910390fd5b61019761040b565b6101d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101cd906107c6565b60405180910390fd5b50565b600080546101e690610871565b80601f016020809104026020016040519081016040528092919081815260200182805461021290610871565b801561025f5780601f106102345761010080835404028352916020019161025f565b820191906000526020600020905b81548152906001019060200180831161024257829003601f168201915b505050505081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166364c5ce866040518163ffffffff1660e01b815260040160a06040518083038186803b1580156102d157600080fd5b505afa1580156102e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103099190610544565b9450505050503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561037e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037590610786565b60405180910390fd5b82600260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000600260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e5f6f7fd600260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016104909190610729565b600060405180830381600087803b1580156104aa57600080fd5b505af11580156104be573d6000803e3d6000fd5b505050506001905090565b6000813590506104d8816108e3565b92915050565b6000815190506104ed816108e3565b92915050565b600081519050610502816108fa565b92915050565b6000806040838503121561051b57600080fd5b6000610529858286016104c9565b925050602061053a858286016104c9565b9150509250929050565b600080600080600060a0868803121561055c57600080fd5b600061056a888289016104f3565b955050602061057b888289016104f3565b945050604061058c888289016104de565b935050606061059d888289016104f3565b92505060806105ae888289016104de565b9150509295509295909350565b6105c481610802565b82525050565b60006105d5826107e6565b6105df81856107f1565b93506105ef81856020860161083e565b6105f8816108d2565b840191505092915050565b6000610610601d836107f1565b91507f50524f504f53414c3a206f6e6c792044414f2063616e20696e766f6b650000006000830152602082019050919050565b60006106506019836107f1565b91507f4c696d626f44414f3a2070726f706f73616c206c6f636b6564000000000000006000830152602082019050919050565b60006106906015836107f1565b91507f50524f504f53414c3a2044414f206e6f742073657400000000000000000000006000830152602082019050919050565b60006106d06026836107f1565b91507f4c696d626f44414f3a20657865637574696f6e206f662070726f706f73616c2060008301527f6661696c656400000000000000000000000000000000000000000000000000006020830152604082019050919050565b600060208201905061073e60008301846105bb565b92915050565b6000602082019050818103600083015261075e81846105ca565b905092915050565b6000602082019050818103600083015261077f81610603565b9050919050565b6000602082019050818103600083015261079f81610643565b9050919050565b600060208201905081810360008301526107bf81610683565b9050919050565b600060208201905081810360008301526107df816106c3565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061080d82610814565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561085c578082015181840152602081019050610841565b8381111561086b576000848401525b50505050565b6000600282049050600182168061088957607f821691505b6020821081141561089d5761089c6108a3565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b6108ec81610802565b81146108f757600080fd5b50565b61090381610834565b811461090e57600080fd5b5056fea264697066735822122007108fd3c78f42ed136bb15615286bf0e15c3e99617a873f24f7343500851a4564736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80633e7f6c64146100465780637284e41614610050578063ef99fc0e1461006e575b600080fd5b61004e61008a565b005b6100586101d9565b6040516100659190610744565b60405180910390f35b61008860048036038101906100839190610508565b610267565b005b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610121576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610118906107a6565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461018f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018690610766565b60405180910390fd5b61019761040b565b6101d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101cd906107c6565b60405180910390fd5b50565b600080546101e690610871565b80601f016020809104026020016040519081016040528092919081815260200182805461021290610871565b801561025f5780601f106102345761010080835404028352916020019161025f565b820191906000526020600020905b81548152906001019060200180831161024257829003601f168201915b505050505081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166364c5ce866040518163ffffffff1660e01b815260040160a06040518083038186803b1580156102d157600080fd5b505afa1580156102e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103099190610544565b9450505050503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561037e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037590610786565b60405180910390fd5b82600260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000600260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e5f6f7fd600260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016104909190610729565b600060405180830381600087803b1580156104aa57600080fd5b505af11580156104be573d6000803e3d6000fd5b505050506001905090565b6000813590506104d8816108e3565b92915050565b6000815190506104ed816108e3565b92915050565b600081519050610502816108fa565b92915050565b6000806040838503121561051b57600080fd5b6000610529858286016104c9565b925050602061053a858286016104c9565b9150509250929050565b600080600080600060a0868803121561055c57600080fd5b600061056a888289016104f3565b955050602061057b888289016104f3565b945050604061058c888289016104de565b935050606061059d888289016104f3565b92505060806105ae888289016104de565b9150509295509295909350565b6105c481610802565b82525050565b60006105d5826107e6565b6105df81856107f1565b93506105ef81856020860161083e565b6105f8816108d2565b840191505092915050565b6000610610601d836107f1565b91507f50524f504f53414c3a206f6e6c792044414f2063616e20696e766f6b650000006000830152602082019050919050565b60006106506019836107f1565b91507f4c696d626f44414f3a2070726f706f73616c206c6f636b6564000000000000006000830152602082019050919050565b60006106906015836107f1565b91507f50524f504f53414c3a2044414f206e6f742073657400000000000000000000006000830152602082019050919050565b60006106d06026836107f1565b91507f4c696d626f44414f3a20657865637574696f6e206f662070726f706f73616c2060008301527f6661696c656400000000000000000000000000000000000000000000000000006020830152604082019050919050565b600060208201905061073e60008301846105bb565b92915050565b6000602082019050818103600083015261075e81846105ca565b905092915050565b6000602082019050818103600083015261077f81610603565b9050919050565b6000602082019050818103600083015261079f81610643565b9050919050565b600060208201905081810360008301526107bf81610683565b9050919050565b600060208201905081810360008301526107df816106c3565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061080d82610814565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561085c578082015181840152602081019050610841565b8381111561086b576000848401525b50505050565b6000600282049050600182168061088957607f821691505b6020821081141561089d5761089c6108a3565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b6108ec81610802565b81146108f757600080fd5b50565b61090381610834565b811461090e57600080fd5b5056fea264697066735822122007108fd3c78f42ed136bb15615286bf0e15c3e99617a873f24f7343500851a4564736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2889,
        "contract": "contracts/DAO/Proposals/ToggleWhitelistProposalProposal.sol:ToggleWhitelistProposalProposal",
        "label": "description",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2892,
        "contract": "contracts/DAO/Proposals/ToggleWhitelistProposalProposal.sol:ToggleWhitelistProposalProposal",
        "label": "DAO",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(LimboDAOLike)7669"
      },
      {
        "astId": 3318,
        "contract": "contracts/DAO/Proposals/ToggleWhitelistProposalProposal.sol:ToggleWhitelistProposalProposal",
        "label": "params",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Parameters)3315_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(LimboDAOLike)7669": {
        "encoding": "inplace",
        "label": "contract LimboDAOLike",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Parameters)3315_storage": {
        "encoding": "inplace",
        "label": "struct ToggleWhitelistProposalProposal.Parameters",
        "members": [
          {
            "astId": 3312,
            "contract": "contracts/DAO/Proposals/ToggleWhitelistProposalProposal.sol:ToggleWhitelistProposalProposal",
            "label": "proposalFactory",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3314,
            "contract": "contracts/DAO/Proposals/ToggleWhitelistProposalProposal.sol:ToggleWhitelistProposalProposal",
            "label": "toggleContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}