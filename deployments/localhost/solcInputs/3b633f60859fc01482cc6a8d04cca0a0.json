{
  "language": "Solidity",
  "sources": {
    "contracts/DAO/FlashGovernanceArbiter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./Governable.sol\";\nimport \"hardhat/console.sol\";\nimport \"../facades/Burnable.sol\";\n\ncontract FlashGovernanceArbiter is Governable {\n    event flashDecision(\n        address actor,\n        address deposit_asset,\n        uint256 amount,\n        address target\n    );\n    mapping(address => bool) enforceLimitsActive;\n\n    constructor(address dao) Governable(dao) {}\n\n    struct FlashGovernanceConfig {\n        address asset;\n        uint256 amount;\n        uint256 unlockTime;\n        bool assetBurnable;\n    }\n    struct SecurityParameters {\n        uint8 maxGovernanceChangePerEpoch; //prevents flash governance from wrecking the incentives.\n        uint256 epochSize; //only one flash governance action can happen per epoch to prevent governance DOS\n        uint256 lastFlashGovernanceAct;\n        uint8 changeTolerance; //1-100 maximum percentage any numeric variable can be changed through flash gov\n    }\n\n    FlashGovernanceConfig public flashGovernanceConfig;\n    SecurityParameters public security;\n    mapping(address => mapping(address => FlashGovernanceConfig))\n        public pendingFlashDecision; //contract->user->config\n\n    function assertGovernanceApproved(address sender, address target, bool emergency) public {\n        if (\n            IERC20(flashGovernanceConfig.asset).transferFrom(\n                sender,\n                address(this),\n                flashGovernanceConfig.amount\n            ) &&\n            pendingFlashDecision[target][sender].unlockTime < block.timestamp\n        ) {\n            require(\n               emergency || ( block.timestamp - security.lastFlashGovernanceAct >\n                    security.epochSize),\n                \"Limbo: flash governance disabled for rest of epoch\"\n            );\n            pendingFlashDecision[target][sender] = flashGovernanceConfig;\n            pendingFlashDecision[target][sender].unlockTime += block.timestamp;\n\n            security.lastFlashGovernanceAct = block.timestamp;\n            emit flashDecision(\n                sender,\n                flashGovernanceConfig.asset,\n                flashGovernanceConfig.amount,\n                target\n            );\n        } else {\n            revert(\"LIMBO: governance decision rejected.\");\n        }\n    }\n\n    function configureFlashGovernance(\n        address asset,\n        uint256 amount,\n        uint256 unlockTime,\n        bool assetBurnable\n    ) public virtual onlySuccessfulProposal {\n        flashGovernanceConfig.asset = asset;\n        flashGovernanceConfig.amount = amount;\n        flashGovernanceConfig.unlockTime = unlockTime;\n        flashGovernanceConfig.assetBurnable = assetBurnable;\n    }\n\n    function configureSecurityParameters(\n        uint8 maxGovernanceChangePerEpoch,\n        uint256 epochSize,\n        uint8 changeTolerance\n    ) public virtual onlySuccessfulProposal {\n        security.maxGovernanceChangePerEpoch = maxGovernanceChangePerEpoch;\n        security.epochSize = epochSize;\n        require(security.changeTolerance < 100, \"Limbo: % between 0 and 100\");\n        security.changeTolerance = changeTolerance;\n    }\n\n    function burnFlashGovernanceAsset(\n        address targetContract,\n        address user,\n        address asset,\n        uint256 amount\n    ) public virtual onlySuccessfulProposal {\n        if (pendingFlashDecision[targetContract][user].assetBurnable) {\n            Burnable(asset).burn(amount);\n        }\n\n        pendingFlashDecision[targetContract][user] = flashGovernanceConfig;\n    }\n\n    function withdrawGovernanceAsset(address targetContract, address asset)\n        public\n        virtual\n    {\n        require(\n            pendingFlashDecision[targetContract][msg.sender].asset == asset &&\n                pendingFlashDecision[targetContract][msg.sender].amount > 0 &&\n                pendingFlashDecision[targetContract][msg.sender].unlockTime <\n                block.timestamp,\n            \"Limbo: Flashgovernance decision pending.\"\n        );\n        IERC20(pendingFlashDecision[targetContract][msg.sender].asset).transfer(\n                msg.sender,\n                pendingFlashDecision[targetContract][msg.sender].amount\n            );\n        delete pendingFlashDecision[targetContract][msg.sender];\n    }\n\n    function setEnforcement(bool enforce) public {\n        enforceLimitsActive[msg.sender] = enforce;\n    }\n\n    function enforceToleranceInt(int256 v1, int256 v2) public view {\n        if (!configured) return;\n        uint256 uv1 = uint256(v1 > 0 ? v1 : -1 * v1);\n        uint256 uv2 = uint256(v2 > 0 ? v2 : -1 * v2);\n        enforceTolerance(uv1, uv2);\n    }\n\n    //bonus points for readability\n    function enforceTolerance(uint256 v1, uint256 v2) public view {\n        if (!configured || !enforceLimitsActive[msg.sender]) return;\n        if (v1 > v2) {\n            if (v2 == 0) require(v1 <= 1, \"FE1\");\n            else\n                require(\n                    ((v1 - v2) * 100) < security.changeTolerance * v1,\n                    \"FE1\"\n                );\n        } else {\n            if (v1 == 0) require(v2 <= 1, \"FE1\");\n            else\n                require(\n                    ((v2 - v1) * 100) < security.changeTolerance * v1,\n                    \"FE1\"\n                );\n        }\n    }\n}\n"
    },
    "contracts/DAO/Governable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../facades/LimboDAOLike.sol\";\nimport \"../facades/FlashGovernanceArbiterLike.sol\";\nimport \"../facades/ProposalFactoryLike.sol\";\n\nabstract contract Governable {\n    FlashGovernanceArbiterLike internal flashGoverner;\n    bool public configured;\n    address public DAO;\n\n    function endConfiguration() public {\n        configured = true;\n    }\n\n    modifier onlySuccessfulProposal() {\n        assertSuccessfulProposal(msg.sender);\n        _;\n    }\n\n    modifier onlySoulUpdateProposal(){\n        assertSoulUpdateProposal(msg.sender);\n        _;\n    }\n\n    function assertSoulUpdateProposal(address sender) internal view {\n        (,,address proposalFactory) = LimboDAOLike(DAO).proposalConfig();\n        require(!configured || sender == ProposalFactoryLike(proposalFactory).soulUpdateProposal(),\"EJ\");\n        assertSuccessfulProposal(sender);\n    }\n\n    function _governanceApproved(bool emergency) internal {\n        bool successfulProposal = LimboDAOLike(DAO).successfulProposal(\n            msg.sender\n        );\n        if (successfulProposal) {\n            flashGoverner.setEnforcement(false);\n        } else if (configured)\n            flashGoverner.assertGovernanceApproved(\n                msg.sender,\n                address(this),\n                emergency\n            );\n    }\n\n    modifier governanceApproved(bool emergency) {\n        _governanceApproved(emergency);\n        _;\n        flashGoverner.setEnforcement(true);\n    }\n\n    function assertSuccessfulProposal(address sender) internal view {\n        require(\n            !configured || LimboDAOLike(DAO).successfulProposal(sender),\n            \"EJ\"\n        );\n    }\n\n    constructor(address dao) {\n        setDAO(dao);\n    }\n\n    function setDAO(address dao) public {\n        require(\n            DAO == address(0) || msg.sender == DAO || !configured,\n            \"EK\"\n        );\n        DAO = dao;\n        flashGoverner = FlashGovernanceArbiterLike(\n            LimboDAOLike(dao).getFlashGoverner()\n        );\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/facades/Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n\nabstract contract Burnable {\n    function burn (uint amount) public virtual;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/facades/LimboDAOLike.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract LimboDAOLike {\n    function approveFlanMintingPower(address minter, bool enabled)\n        public\n        virtual;\n\n    function makeProposal(address proposal, address proposer) public virtual;\n\n    function currentProposalState() public view virtual returns (uint,uint,address,uint,address);\n\n    function setProposalConfig(\n        uint256 votingDuration,\n        uint256 requiredFateStake,\n        address proposalFactory\n    ) public virtual;\n\n    function setApprovedAsset(address asset, bool approved) public virtual;\n\n    function successfulProposal(address proposal)\n        public\n        view\n        virtual\n        returns (bool);\n\n    function domainConfig()\n        public\n        virtual\n        returns (\n            address,\n            address,\n            address,\n            address,\n            bool,\n            address,\n            address\n        );\n\n    function getFlashGoverner() external view virtual returns (address);\n\n    function proposalConfig() public virtual view returns (uint,uint,address);\n}\n"
    },
    "contracts/facades/FlashGovernanceArbiterLike.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract FlashGovernanceArbiterLike {\n    function assertGovernanceApproved(address sender, address target, bool emergency)\n        public\n        virtual;\n\n    function enforceToleranceInt(int256 v1, int256 v2) public view virtual;\n\n    function enforceTolerance(uint256 v1, uint256 v2) public view virtual;\n\n    function burnFlashGovernanceAsset(\n        address targetContract,\n        address user,\n        address asset,\n        uint256 amount\n    ) public virtual;\n\n     function setEnforcement(bool enforce) public virtual;\n}\n"
    },
    "contracts/facades/ProposalFactoryLike.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract ProposalFactoryLike {\n     function toggleWhitelistProposal(address proposal) public virtual;\n     function soulUpdateProposal () public  virtual view returns (address); \n}"
    },
    "contracts/Limbo.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n// import \"hardhat/console.sol\";\nimport \"./facades/LimboDAOLike.sol\";\nimport \"./facades/Burnable.sol\";\nimport \"./facades/BehodlerLike.sol\";\nimport \"./facades/FlanLike.sol\";\nimport \"./facades/UniPairLike.sol\";\nimport \"./facades/MigratorLike.sol\";\nimport \"./facades/AMMHelper.sol\";\nimport \"./facades/AngbandLike.sol\";\nimport \"./facades/LimboAddTokenToBehodlerPowerLike.sol\";\nimport \"./DAO/Governable.sol\";\n\n/*\nLIMBO is the main staking contract. It corresponds conceptually to Sushi's Masterchef and takes design inspiration from Masterchef.\nTo give a high level overview, each token listed on Limbo is hoping to be listed on Behodler. In order to be listed, it must meet a minimum threshold of liquidity.\nThis creates a sharp distinction between the lifecycle of a listed token on Limbo vs Onsen which is why we don't just fork and run Masterchef. In particular:\n1. By definition, tokens listed on Limbo are temporary visitors to the dapp, as the name Limbo implies. An array of tokens is therefore not sustainable\n2. The migrator does not swap like for like. Instead, when the listing period is over, stakers must be made whole with more flan\n\nNomenclature:\nSince words like token are incredibly generic, we need to provide context through naming.\nSticking to the overall metaphor, to paraphrase makerdao documentation, reduces code smells.\n1. A token listed on Limbo is a Soul\n2. When a token lists on Behodler, we say the soul is crossing over. The event is a crossing.\n\nSecurity note: the designers of the crossing event and the payment of locked stakers \nshould be cognizant of potential flash loan vectors\n\nLate stakers considerations:\nSuppose you're the last person to stake. That is, your stake takes the soul over the crossing threshold and the soul is locked.\nIn this instance, you would have earned no Flan, creating a declining incentive for stakers to arrive and in the extreme leading\nto a situation of never crossing the threshold for any soul. This is a tragedy of the commons situation that leads to an overly \ninflated and essentially worthless Flan. We need a strategy to ameliorate this. The strategy needs to:\n1. provide sufficient incentive for later arrivals.\n2. Not punish early stakers and ideally reward them for being early.\n3. Not disproportionately inflate the supply of flan.\n\nIncentives:\nWhen a soul is staking, the crossover bonus begins growing: Flan per soul.\nGovernance sets the rate of bonus growth and the target. \n\nPhases:\n1. calibration\nNo staking/unstaking.\n2. Staking\nStaking/unstaking. If type is threshold, take threshold into account\n3. WaitingToCross\nCan claim rewards. Can't unstake.\n4. CrossedOver\nInjected into Behodler\n\nFlash governance:\nSince there might be many souls staking, we don't want to have to go through long to confirm proposals.\nInstead, we want to have the opportunity to flash a governance action quickly. What we can do is require\na stake of EYE. Then the staker can trigger some governance unilaterally but their EYE remains locked for a few days.\nThe community can then decide if their governance action was in accord with the wellbeing of Limbo.\nIf it isn't, they can slash the deposit by betwen 1 and 100%. Flash gov can only move a variable some percentage per day.\nEg. suppose we vote on snapshot to raise the mimimum soul for Sushi to 1200 Sushi from 1180, 1.69%.\nWe have s maximum of 4% per day. So some flash staker comes along and moves it 3%. They are now \nelligible to be slashed. If they try to move it 5%, the operations reverts.\n*/\nenum SoulState {\n    calibration,\n    staking,\n    waitingToCross,\n    crossedOver\n}\nenum SoulType {\n    uninitialized,\n    threshold, //the default soul type is staked and when reaching a threshold, migrates to Behodler\n    perpetual //the type of staking pool most people are familiar with.\n}\n\n/*\nError string legend:\n token not recognized as valid soul.\t        E1\n invalid state\t                                E2\n unstaking locked\t                            E3\n balance exceeded\t                            E4\n bonus already claimed.\t                        E5\n crossing bonus arithmetic invariant.\t        E6\n token accounted for.\t                        E7\n burning excess SCX failed.\t                    E8\n Invocation reward failed.\t                    E9\n only threshold souls can be migrated           EB\n not enough time between crossing and migration EC\n bonus must be positive                         ED\n Unauthorized call                              EE\n Protocol disabled                              EF\n Reserve divergence tolerance exceeded          EG\n not enough time between reserve stamps         EH\n Minimum APY only applicable to threshold souls EI\n Governance action failed.                      EJ\n Access Denied                                  EK\n*/\ncontract Limbo is Governable {\n    using SafeERC20 for IERC20;\n\n    event SoulUpdated(address soul, uint256 fps);\n    event Staked(address staker, address soul, uint256 amount);\n    event Unstaked(address staker, address soul, uint256 amount);\n    event TokenListed(address token, uint256 amount, uint256 scxfln_LP_minted);\n\n    event ClaimedReward(\n        address staker,\n        address soul,\n        uint256 index,\n        uint256 amount\n    );\n\n    event BonusPaid(\n        address token,\n        uint256 index,\n        address recipient,\n        uint256 bonus\n    );\n\n    struct Soul {\n        uint256 lastRewardTimestamp; //I know masterchef counts by block but this is less reliable than timestamp.\n        uint256 accumulatedFlanPerShare;\n        uint256 crossingThreshold; //the value at which this soul is elligible to cross over to Behodler\n        SoulType soulType;\n        SoulState state;\n        uint256 flanPerSecond; // fps: we use a helper function to convert min APY into fps\n    }\n\n    struct CrossingParameters {\n        uint256 stakingBeginsTimestamp; //to calculate bonus\n        uint256 stakingEndTimestamp;\n        int256 crossingBonusDelta; //change in teraFlanPerToken per second\n        uint256 initialCrossingBonus; //measured in teraflanPerToken\n        bool burnable;\n    }\n\n    struct CrossingConfig {\n        address behodler;\n        uint256 SCX_fee;\n        uint256 migrationInvocationReward; //calling migrate is expensive. The caller should be rewarded in flan.\n        uint256 crossingMigrationDelay; // this ensures that if Flan is successfully attacked, governance will have time to lock Limbo and prevent bogus migrations\n        address morgothPower;\n        address angband;\n        address ammHelper;\n        uint16 rectangleOfFairnessInflationFactor; //0-100: if the community finds the requirement to be too strict, they can inflate how much SCX to hold back\n    }\n\n    struct User {\n        uint256 stakedAmount;\n        uint256 rewardDebt;\n        bool bonusPaid;\n    }\n\n    uint256 constant TERA = 1E12;\n    uint256 constant SCX_calc = TERA * 10000 * (1 ether); //112 bits added, still leaves plenty room to spare\n    uint256 constant RectangleOfFairness = 30 ether; //MP = 1/t. Rect = tMP = t(1/t) = 1. 28 is the result of scaling factors on Behodler.\n    bool protocolEnabled = true;\n    CrossingConfig public crossingConfig;\n    mapping(address => mapping(uint256 => Soul)) public souls;\n    mapping(address => uint256) public latestIndex;\n    mapping(address => mapping(address => mapping(uint256 => User)))\n        public userInfo; //tokenAddress->userAddress->soulIndex->Userinfo\n    mapping(address => mapping(uint256 => CrossingParameters))\n        public tokenCrossingParameters; //token->index->data\n\n    FlanLike Flan;\n\n    modifier enabled() {\n        require(protocolEnabled, \"EF\");\n        _;\n    }\n\n    function attemptToTargetAPY(\n        address token,\n        uint256 desiredAPY,\n        uint256 daiThreshold\n    ) public governanceApproved(false) {\n        Soul storage soul = currentSoul(token);\n        require(soul.soulType == SoulType.threshold, \"EI\");\n        uint256 fps = AMMHelper(crossingConfig.ammHelper).minAPY_to_FPS(\n            desiredAPY,\n            daiThreshold\n        );\n        flashGoverner.enforceTolerance(soul.flanPerSecond, fps);\n        soul.flanPerSecond = fps;\n    }\n\n    function updateSoul(address token) public {\n        Soul storage s = currentSoul(token);\n        updateSoul(token, s);\n    }\n\n    function updateSoul(address token, Soul storage soul) internal {\n        require(soul.soulType != SoulType.uninitialized, \"E1\");\n        require(soul.state != SoulState.calibration, \"E2\");\n        uint256 finalTimeStamp = block.timestamp;\n        if (soul.state != SoulState.staking) {\n            finalTimeStamp = tokenCrossingParameters[token][latestIndex[token]]\n                .stakingEndTimestamp;\n        }\n        uint256 balance = IERC20(token).balanceOf(address(this));\n    \n        if (balance > 0) {\n            uint256 flanReward = (finalTimeStamp - soul.lastRewardTimestamp) *\n                soul.flanPerSecond;\n   \n\n            soul.accumulatedFlanPerShare =\n                soul.accumulatedFlanPerShare +\n                ((flanReward * TERA) / balance);\n        }\n        soul.lastRewardTimestamp = finalTimeStamp;\n    }\n\n    constructor(address flan, address limboDAO) Governable(limboDAO) {\n        Flan = FlanLike(flan);\n    }\n\n    function configureCrossingConfig(\n        address behodler,\n        address angband,\n        address ammHelper,\n        address morgothPower,\n        uint256 migrationInvocationReward,\n        uint256 crossingMigrationDelay,\n        uint16 rectInflationFactor //0 to 100\n    ) public onlySuccessfulProposal {\n        crossingConfig.migrationInvocationReward =\n            migrationInvocationReward *\n            (1 ether);\n        crossingConfig.behodler = behodler;\n        crossingConfig.crossingMigrationDelay = crossingMigrationDelay;\n        crossingConfig.angband = angband;\n        crossingConfig.ammHelper = ammHelper;\n        crossingConfig.morgothPower = morgothPower;\n        require(rectInflationFactor <= 10000, \"E6\");\n        crossingConfig.rectangleOfFairnessInflationFactor = rectInflationFactor;\n    }\n\n    function disableProtocol() public governanceApproved(true) {\n        protocolEnabled = false;\n    }\n\n    function enableProtocol() public onlySuccessfulProposal {\n        protocolEnabled = true;\n    }\n\n    function adjustSoul(\n        address token,\n        uint256 initialCrossingBonus,\n        int256 crossingBonusDelta,\n        uint256 fps\n    ) public governanceApproved(false) {\n        Soul storage soul = currentSoul(token);\n        flashGoverner.enforceTolerance(soul.flanPerSecond, fps);\n        soul.flanPerSecond = fps;\n\n        CrossingParameters storage params = tokenCrossingParameters[token][\n            latestIndex[token]\n        ];\n\n        flashGoverner.enforceTolerance(\n            params.initialCrossingBonus,\n            initialCrossingBonus\n        );\n        flashGoverner.enforceTolerance(\n            uint256(\n                params.crossingBonusDelta < 0\n                    ? params.crossingBonusDelta * -1\n                    : params.crossingBonusDelta\n            ),\n            uint256(\n                crossingBonusDelta < 0\n                    ? crossingBonusDelta * -1\n                    : crossingBonusDelta\n            )\n        );\n\n        params.initialCrossingBonus = initialCrossingBonus;\n        params.crossingBonusDelta = crossingBonusDelta;\n    }\n\n    /*\n    Unguarded total access only available to true proposals.\n    Tread carefully.\n     */\n    function configureSoul(\n        address token,\n        uint256 crossingThreshold,\n        uint256 soulType,\n        uint256 state,\n        uint256 index,\n        uint256 fps\n    ) public onlySoulUpdateProposal {\n        {\n            Soul storage soul = currentSoul(token);\n            latestIndex[token] = index > latestIndex[token]\n                ? latestIndex[token] + 1\n                : latestIndex[token];\n\n            soul = currentSoul(token);\n            soul.crossingThreshold = crossingThreshold;\n            soul.flanPerSecond = fps;\n            soul.state = SoulState(state);\n\n            if (SoulState(state) == SoulState.staking) {\n                tokenCrossingParameters[token][latestIndex[token]]\n                    .stakingBeginsTimestamp = block.timestamp;\n            }\n            soul.soulType = SoulType(soulType);\n        }\n        emit SoulUpdated(token, fps);\n    }\n\n    function configureCrossingParameters(\n        address token,\n        uint256 initialCrossingBonus,\n        int256 crossingBonusDelta,\n        bool burnable,\n        uint256 crossingThreshold\n    ) public governanceApproved(false) {\n        CrossingParameters storage params = tokenCrossingParameters[token][\n            latestIndex[token]\n        ];\n        flashGoverner.enforceTolerance(\n            initialCrossingBonus,\n            params.initialCrossingBonus\n        );\n        flashGoverner.enforceToleranceInt(\n            crossingBonusDelta,\n            params.crossingBonusDelta\n        );\n\n        tokenCrossingParameters[token][latestIndex[token]]\n            .initialCrossingBonus = initialCrossingBonus;\n        tokenCrossingParameters[token][latestIndex[token]]\n            .crossingBonusDelta = crossingBonusDelta;\n        tokenCrossingParameters[token][latestIndex[token]].burnable = burnable;\n\n        Soul storage soul = currentSoul(token);\n        flashGoverner.enforceTolerance(\n            crossingThreshold,\n            soul.crossingThreshold\n        );\n        currentSoul(token).crossingThreshold = crossingThreshold;\n    }\n\n    function stake(address token, uint256 amount) public enabled {\n        Soul storage soul = currentSoul(token);\n        updateSoul(token, soul);\n        require(soul.state == SoulState.staking, \"E2\");\n        uint256 currentIndex = latestIndex[token];\n        User storage user = userInfo[token][msg.sender][currentIndex];\n\n        if (amount > 0) {\n            //dish out accumulated rewards.\n            uint256 pending = getPending(user, soul);\n            if (pending > 0) {\n                Flan.mint(msg.sender, pending);\n            }\n\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n            user.stakedAmount = user.stakedAmount + amount;\n            uint256 newBalance = IERC20(token).balanceOf(address(this));\n\n            if (\n                soul.soulType == SoulType.threshold &&\n                newBalance > soul.crossingThreshold\n            ) {\n                soul.state = SoulState.waitingToCross;\n                tokenCrossingParameters[token][latestIndex[token]]\n                    .stakingEndTimestamp = block.timestamp;\n            }\n        }\n\n        user.rewardDebt =\n            (user.stakedAmount * soul.accumulatedFlanPerShare) /\n            TERA;\n        emit Staked(msg.sender, token, amount);\n    }\n\n    function unstake(address token, uint256 amount) public enabled {\n        Soul storage soul = currentSoul(token);\n        updateSoul(token, soul);\n        require(soul.state == SoulState.staking, \"E2\");\n        User storage user = userInfo[token][msg.sender][latestIndex[token]];\n        require(user.stakedAmount >= amount, \"E4\");\n\n        uint256 pending = getPending(user, soul);\n\n        if (pending > 0) {\n            rewardAdjustDebt(\n                msg.sender,\n                pending,\n                soul.accumulatedFlanPerShare,\n                user\n            );\n\n            if (amount > 0) {\n                user.stakedAmount = user.stakedAmount - amount;\n                IERC20(token).safeTransfer(address(msg.sender), amount);\n            }\n            emit Unstaked(msg.sender, token, amount);\n        }\n    }\n\n    function claimReward(address token, uint256 index) public enabled {\n        Soul storage soul = souls[token][index];\n        updateSoul(token, soul);\n        User storage user = userInfo[token][msg.sender][index];\n\n        uint256 pending = getPending(user, soul);\n\n        if (pending > 0) {\n            rewardAdjustDebt(\n                msg.sender,\n                pending,\n                soul.accumulatedFlanPerShare,\n                user\n            );\n            emit ClaimedReward(msg.sender, token, index, pending);\n        }\n    }\n\n    function rewardAdjustDebt(\n        address recipient,\n        uint256 pending,\n        uint256 accumulatedFlanPerShare,\n        User storage user\n    ) internal {\n        Flan.mint(recipient, pending);\n        user.rewardDebt = (user.stakedAmount * accumulatedFlanPerShare) / TERA;\n    }\n\n    function claimBonus(address token, uint256 index) public enabled {\n        Soul storage soul = souls[token][index];\n        CrossingParameters storage crossing = tokenCrossingParameters[token][\n            index\n        ];\n        require(\n            soul.state == SoulState.crossedOver ||\n                soul.state == SoulState.waitingToCross,\n            \"E2\"\n        );\n\n        User storage user = userInfo[token][msg.sender][index];\n        require(!user.bonusPaid, \"E5\");\n        user.bonusPaid = true;\n        int256 accumulatedFlanPerTeraToken = crossing.crossingBonusDelta *\n            int256(\n                crossing.stakingEndTimestamp - crossing.stakingBeginsTimestamp\n            );\n\n        //assert signs are the same\n        require(\n            accumulatedFlanPerTeraToken * crossing.crossingBonusDelta >= 0,\n            \"E6\"\n        );\n\n        int256 finalFlanPerTeraToken = int256(crossing.initialCrossingBonus) +\n            accumulatedFlanPerTeraToken;\n\n        uint256 flanBonus = 0;\n        require(finalFlanPerTeraToken > 0, \"ED\");\n\n        flanBonus =\n            uint256((int256(user.stakedAmount) * finalFlanPerTeraToken)) /\n            TERA;\n        Flan.mint(msg.sender, flanBonus);\n\n        emit BonusPaid(token, index, msg.sender, flanBonus);\n    }\n\n    //reward user for calling with percentage. require no active or waiting souls for withdrawal\n    // We don't want airdrops, rebased growth or pooltogether winnings to be stuck in Limbo\n    function claimSecondaryRewards(address token) public {\n        SoulState state = currentSoul(token).state;\n        require(\n            state == SoulState.calibration || state == SoulState.crossedOver,\n            \"E7\"\n        );\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        IERC20(token).transfer(crossingConfig.ammHelper, balance);\n        AMMHelper(crossingConfig.ammHelper).buyFlanAndBurn(\n            token,\n            balance,\n            msg.sender\n        );\n    }\n\n    function currentSoul(address token) internal view returns (Soul storage) {\n        return souls[token][latestIndex[token]];\n    }\n\n    //anyone can call migrate for a soul ready to be migrated\n    //callers will be rewarded with flan to compensate gas\n    function migrate(address token) public enabled {\n        Soul storage soul = currentSoul(token);\n        require(soul.soulType == SoulType.threshold, \"EB\");\n        require(soul.state == SoulState.waitingToCross, \"E2\");\n        require(\n            block.timestamp -\n                tokenCrossingParameters[token][latestIndex[token]]\n                    .stakingEndTimestamp >\n                crossingConfig.crossingMigrationDelay,\n            \"EC\"\n        );\n\n        LimboAddTokenToBehodlerPowerLike(crossingConfig.morgothPower)\n            .parameterize(\n                token,\n                tokenCrossingParameters[token][latestIndex[token]].burnable\n            );\n\n        //invoke Angband execute on power that migrates token type to Behodler\n        uint256 tokenBalance = IERC20(token).balanceOf(address(this));\n        IERC20(token).transfer(\n            address(crossingConfig.morgothPower),\n            tokenBalance\n        );\n        AngbandLike(crossingConfig.angband).executePower(\n            address(crossingConfig.morgothPower)\n        );\n\n        uint256 scxMinted = IERC20(address(crossingConfig.behodler)).balanceOf(\n            address(this)\n        );\n\n        uint256 adjustedRectangle = ((\n            crossingConfig.rectangleOfFairnessInflationFactor\n        ) * RectangleOfFairness) / 100;\n\n        //for top up or exotic high value migrations.\n        if (scxMinted <= adjustedRectangle) {\n            adjustedRectangle = scxMinted / 2;\n        }\n\n        //burn SCX - rectangle\n        uint256 excessSCX = scxMinted - adjustedRectangle;\n        require(BehodlerLike(crossingConfig.behodler).burn(excessSCX), \"E8\");\n\n        //use remaining scx to buy flan and pool it on an external AMM\n        IERC20(crossingConfig.behodler).transfer(\n            crossingConfig.ammHelper,\n            adjustedRectangle\n        );\n        uint256 lpMinted = AMMHelper(crossingConfig.ammHelper).stabilizeFlan(\n            adjustedRectangle\n        );\n\n        emit TokenListed(token, tokenBalance, lpMinted);\n\n        //reward caller and update soul state\n        require(\n            Flan.mint(msg.sender, crossingConfig.migrationInvocationReward),\n            \"E9\"\n        );\n        currentSoul(token).state = SoulState.crossedOver;\n    }\n\n    function getPending(User memory user, Soul memory soul)\n        internal\n        pure\n        returns (uint256)\n    {\n        return\n            ((user.stakedAmount * soul.accumulatedFlanPerShare) / TERA) -\n            user.rewardDebt;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/facades/BehodlerLike.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract BehodlerLike {\n    function withdrawLiquidityFindSCX(\n        address outputToken,\n        uint256 tokensToRelease,\n        uint256 scx,\n        uint256 passes\n    ) external view virtual returns (uint256);\n\n    function burn(uint256 value) public virtual returns (bool);\n\n    function config()\n        public\n        virtual\n        view\n        returns (\n            uint256,\n            uint256,\n            address\n        );\n\n    function transfer(address dest, uint256 amount)\n        external\n        virtual\n        returns (bool);\n\n    function totalSupply () external virtual returns (uint);\n}\n"
    },
    "contracts/facades/FlanLike.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nabstract contract FlanLike is IERC20 {\n    function mint(address recipient, uint256 amount)\n        public\n        virtual\n        returns (bool);\n\n    function setBurnOnTransferFee(uint8 fee) public virtual;\n\n    function burn(uint256 amount) public virtual returns (bool); \n}\n"
    },
    "contracts/facades/UniPairLike.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract UniPairLike {\n    function factory() public view virtual returns (address);\n\n    function getReserves()\n        public\n        view\n        virtual\n        returns (\n            uint112 _reserve0,\n            uint112 _reserve1,\n            uint32 _blockTimestampLast\n        );\n\n    function mint(address to) external virtual returns (uint256 liquidity);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external virtual;\n\n    function totalSupply() external virtual returns (uint256);\n}\n"
    },
    "contracts/facades/MigratorLike.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract MigratorLike {\n    function execute(\n        address token,\n        bool burnable,\n        uint256 flanQuoteDivergenceTolerance,\n        uint256 minQuoteWaitDuration\n    ) public virtual;\n}"
    },
    "contracts/facades/AMMHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract AMMHelper {\n    function stabilizeFlan(uint256 rectangleOfFairness)\n        public\n        virtual\n        returns (uint256 lpMinted);\n\n    function generateFLNQuote() public virtual;\n\n    function minAPY_to_FPS(uint256 minAPY, uint256 daiThreshold)\n        public\n        view\n        virtual\n        returns (uint256 fps);\n\n    function buyFlanAndBurn(\n        address inputToken,\n        uint256 amount,\n        address recipient\n    ) public virtual;\n}\n"
    },
    "contracts/facades/AngbandLike.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract AngbandLike {\n      function executePower(address powerInvoker)   public virtual;\n}"
    },
    "contracts/facades/LimboAddTokenToBehodlerPowerLike.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract LimboAddTokenToBehodlerPowerLike {\n    function parameterize(address soul, bool burnable) public virtual;\n}\n\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/UniswapHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./facades/UniPairLike.sol\";\nimport \"./facades/BehodlerLike.sol\";\nimport \"./DAO/Governable.sol\";\nimport \"hardhat/console.sol\";\nimport \"./ERC677/ERC20Burnable.sol\";\nimport \"./facades/FlanLike.sol\";\nimport \"./testing/realUniswap/interfaces/IUniswapV2Factory.sol\";\n\ncontract BlackHole {}\n\ncontract UniswapHelper is Governable {\n    address limbo;\n\n    struct UniVARS {\n        UniPairLike Flan_SCX_tokenPair;\n        address behodler;\n        address blackHole;\n        address flan;\n        uint256 divergenceTolerance;\n        uint256 minQuoteWaitDuration;\n        address DAI;\n        uint8 precision; // behodler uses a binary search. The higher this number, the more precise\n        IUniswapV2Factory factory;\n        uint8 priceBoostOvershoot; //percentage (0-100) for which the price must be overcorrected when strengthened to account for other AMMs\n    }\n\n    struct FlanQuote {\n        uint256 DaiScxSpotPrice;\n        uint256 DaiBalanceOnBehodler;\n        uint256 blockProduced;\n    }\n    FlanQuote[2] public latestFlanQuotes; //0 is latest\n\n    UniVARS VARS;\n    uint256 constant EXA = 1e18;\n    uint256 constant year = (1 days * 365);\n\n    /*\n    instead of relying on oracles, we simply require snapshots of important \n    prices to be taken at intervals far enough apart.\n    If an attacker wishes to overstate or understate a price through market manipulation,\n    they'd have to keep it out of equilibrium over the span of the two snapshots or they'd\n    have to time the manipulation to happen as the snapshots occur. As a miner,\n    they could do this through transaction ordering but they'd have to win two blocks at precise moments\n    which is statistically highly unlikely. \n    The snapshot enforcement can be hindered by false negatives. Natural price variation, for instance, but the cost\n    of this is just having to snapshot again when the market is calmer. Since migration is not not time sensitive,\n    this is a cost worth bearing.\n    */\n\n    modifier ensurePriceStability() {\n        _ensurePriceStability();\n        _;\n    }\n\n    modifier onlyLimbo() {\n        require(msg.sender == limbo);\n        _;\n    }\n\n    constructor(address _limbo, address limboDAO) Governable(limboDAO) {\n        limbo = _limbo;\n        VARS.blackHole = address(new BlackHole());\n        VARS.factory = IUniswapV2Factory(\n            address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f)\n        );\n        VARS.DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    }\n\n    function blackHole() public view returns (address) {\n        return VARS.blackHole;\n    }\n\n    function setFactory(address factory) public {\n        require(block.chainid != 1, \"Uniswap factory hardcoded on mainnet\");\n        VARS.factory = IUniswapV2Factory(factory);\n    }\n\n    function setDAI(address dai) public {\n        require(block.chainid != 1, \"DAI hardcoded on mainnet\");\n        VARS.DAI = dai;\n    }\n\n    function configure(\n        address _limbo,\n        address FlanSCXPair,\n        address behodler,\n        address flan,\n        uint256 divergenceTolerance,\n        uint256 minQuoteWaitDuration,\n        uint8 precision,\n        uint8 priceBoostOvershoot\n    ) public onlySuccessfulProposal {\n        limbo = _limbo;\n        VARS.Flan_SCX_tokenPair = UniPairLike(FlanSCXPair);\n        VARS.behodler = behodler;\n        VARS.flan = flan;\n        require(divergenceTolerance >= 100, \"Divergence of 100 is parity\");\n        VARS.divergenceTolerance = divergenceTolerance;\n        VARS.minQuoteWaitDuration = minQuoteWaitDuration;\n        VARS.DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n        VARS.precision = precision == 0 ? precision : precision;\n        require(\n            priceBoostOvershoot < 100,\n            \"Set overshoot to number between 1 and 100.\"\n        );\n        VARS.priceBoostOvershoot = priceBoostOvershoot;\n    }\n\n    //First punch this and then wait a c\n    function generateFLNQuote() public {\n        latestFlanQuotes[1] = latestFlanQuotes[0];\n        (\n            // block delay\n            latestFlanQuotes[0].DaiScxSpotPrice,\n            latestFlanQuotes[0].DaiBalanceOnBehodler\n        ) = getLatestFLNQuote();\n        latestFlanQuotes[0].blockProduced = block.number;\n    }\n\n    function getLatestFLNQuote()\n        internal\n        view\n        returns (uint256 dai_scx, uint256 daiBalanceOnBehodler)\n    {\n        uint256 daiToRelease = BehodlerLike(VARS.behodler)\n            .withdrawLiquidityFindSCX(VARS.DAI, 10000, 1 ether, VARS.precision);\n        dai_scx = (daiToRelease * EXA) / (1 ether);\n\n        daiBalanceOnBehodler = IERC20(VARS.DAI).balanceOf(VARS.behodler);\n    }\n\n    function stabilizeFlan(uint256 rectangleOfFairness)\n        public\n        onlyLimbo\n        ensurePriceStability\n        returns (uint256 lpMinted)\n    {\n        //get dai per scx\n        uint256 existingSCXBalanceOnLP = IERC20(VARS.behodler).balanceOf(\n            address(VARS.Flan_SCX_tokenPair)\n        );\n        uint256 finalSCXBalanceOnLP = existingSCXBalanceOnLP +\n            rectangleOfFairness;\n\n        //the DAI value of SCX is the final quantity of Flan because we want Flan to hit parity with Dai.\n        uint256 DesiredFinalFlanOnLP = ((finalSCXBalanceOnLP *\n            latestFlanQuotes[0].DaiScxSpotPrice) / EXA);\n        address pair = address(VARS.Flan_SCX_tokenPair);\n        uint256 existingFlanOnLP = IERC20(VARS.flan).balanceOf(pair);\n\n        if (existingFlanOnLP < DesiredFinalFlanOnLP) {\n            uint256 flanToMint = ((DesiredFinalFlanOnLP - existingFlanOnLP) *\n                (100 - VARS.priceBoostOvershoot)) / 100;\n\n            flanToMint = flanToMint == 0\n                ? DesiredFinalFlanOnLP - existingFlanOnLP\n                : flanToMint;\n            FlanLike(VARS.flan).mint(pair, flanToMint);\n            IERC20(VARS.behodler).transfer(pair, rectangleOfFairness);\n            {\n                lpMinted = VARS.Flan_SCX_tokenPair.mint(VARS.blackHole);\n            }\n        } else {\n            uint256 minFlan = existingFlanOnLP /\n                VARS.Flan_SCX_tokenPair.totalSupply();\n\n            FlanLike(VARS.flan).mint(pair, minFlan + 2);\n            IERC20(VARS.behodler).transfer(pair, rectangleOfFairness);\n            lpMinted = VARS.Flan_SCX_tokenPair.mint(VARS.blackHole);\n        }\n        _zeroOutQuotes();\n    }\n\n    /* \n  Take APY of threshold and divide it down into seconds\n    */\n    function minAPY_to_FPS(\n        uint256 minAPY, //divide by 10000 to get percentage\n        uint256 daiThreshold\n    ) public view ensurePriceStability returns (uint256 fps) {\n        daiThreshold = daiThreshold == 0\n            ? latestFlanQuotes[0].DaiBalanceOnBehodler\n            : daiThreshold;\n        console.log(\"dai threshold %s\", daiThreshold);\n        uint256 returnOnThreshold = (minAPY * daiThreshold) / 1e4;\n        fps = returnOnThreshold / (year);\n    }\n\n    function buyFlanAndBurn(\n        address inputToken,\n        uint256 amount,\n        address recipient\n    ) public {\n        address pair = VARS.factory.getPair(inputToken, VARS.flan);\n\n        uint256 flanBalance = IERC20(VARS.flan).balanceOf(pair);\n        uint256 inputBalance = IERC20(inputToken).balanceOf(pair);\n\n        uint256 amountOut = getAmountOut(amount, inputBalance, flanBalance);\n        uint256 amount0Out = inputToken < VARS.flan ? 0 : amountOut;\n        uint256 amount1Out = inputToken < VARS.flan ? amountOut : 0;\n        IERC20(inputToken).transfer(pair, amount);\n        UniPairLike(pair).swap(amount0Out, amount1Out, address(this), \"\");\n        uint256 reward = (amountOut / 100);\n        ERC20Burnable(VARS.flan).transfer(recipient, reward);\n        ERC20Burnable(VARS.flan).burn(amountOut - reward);\n    }\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        uint256 amountInWithFee = amountIn * 997;\n        uint256 numerator = amountInWithFee * reserveOut;\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountIn) {\n        uint256 numerator = reserveIn * amountOut * 1000;\n        uint256 denominator = (reserveOut - amountOut) * 997;\n        amountIn = (numerator / denominator) + 1;\n    }\n\n    function _zeroOutQuotes() internal {\n        delete latestFlanQuotes[0];\n        delete latestFlanQuotes[1];\n    }\n\n    //the purpose of the divergence code is to bring the robustness of a good oracle without requiring an oracle\n    function _ensurePriceStability() internal view {\n        FlanQuote[2] memory localFlanQuotes; //save gas\n        localFlanQuotes[0] = latestFlanQuotes[0];\n        localFlanQuotes[1] = latestFlanQuotes[1];\n\n        uint256 daiSCXSpotPriceDivergence = localFlanQuotes[0].DaiScxSpotPrice >\n            localFlanQuotes[1].DaiScxSpotPrice\n            ? (localFlanQuotes[0].DaiScxSpotPrice * 100) /\n                localFlanQuotes[1].DaiScxSpotPrice\n            : (localFlanQuotes[1].DaiScxSpotPrice * 100) /\n                localFlanQuotes[0].DaiScxSpotPrice;\n\n        uint256 daiBalanceDivergence = localFlanQuotes[0].DaiBalanceOnBehodler >\n            localFlanQuotes[1].DaiBalanceOnBehodler\n            ? (localFlanQuotes[0].DaiBalanceOnBehodler * 100) /\n                localFlanQuotes[1].DaiBalanceOnBehodler\n            : (localFlanQuotes[1].DaiBalanceOnBehodler * 100) /\n                localFlanQuotes[0].DaiBalanceOnBehodler;\n\n        console.log(\"dai balance divergence %s\", daiBalanceDivergence);\n        require(\n            daiSCXSpotPriceDivergence < VARS.divergenceTolerance &&\n                daiBalanceDivergence < VARS.divergenceTolerance,\n            \"EG\"\n        );\n\n        require(\n            localFlanQuotes[0].blockProduced -\n                localFlanQuotes[1].blockProduced >\n                VARS.minQuoteWaitDuration &&\n                localFlanQuotes[1].blockProduced > 0,\n            \"EH\"\n        );\n    }\n}\n"
    },
    "contracts/ERC677/ERC20Burnable.sol": {
      "content": "// Sources flattened with hardhat v2.4.1 https://hardhat.org\n\n// File temp/@openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\n\n// File temp/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n// File temp/@openzeppelin/contracts/utils/Context.sol\n\n// File temp/@openzeppelin/contracts/token/ERC20/ERC20.sol\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) internal _balances;\n\n    mapping(address => mapping(address => uint256)) internal _allowances;\n\n    uint256 internal _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(\n            currentAllowance >= amount,\n            \"ERC20: transfer amount exceeds allowance\"\n        );\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender] + addedValue\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(\n            currentAllowance >= subtractedValue,\n            \"ERC20: decreased allowance below zero\"\n        );\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(\n            senderBalance >= amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\n// File temp/@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual returns (bool) {\n       _burn(_msgSender(), amount);\n       return true;\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(\n            currentAllowance >= amount,\n            \"ERC20: burn amount exceeds allowance\"\n        );\n        _approve(account, _msgSender(), currentAllowance - amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/testing/realUniswap/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/testing/realUniswap/RealUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IUniswapV2Pair.sol\";\nimport \"./UniswapV2ERC20.sol\";\nimport \"./libraries/Math.sol\";\nimport \"./libraries/UQ112x112.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IUniswapV2Factory.sol\";\nimport \"./interfaces/IUniswapV2Callee.sol\";\nimport \"hardhat/console.sol\";\n\ncontract RealUniswapV2Pair is UniswapV2ERC20 {\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    using SafeMath for uint256;\n    using UQ112x112 for uint224;\n\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\n    bytes4 private constant SELECTOR =\n        bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n\n    address public factory;\n    address public token0;\n    address public token1;\n\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\n\n    uint256 public price0CumulativeLast;\n    uint256 public price1CumulativeLast;\n    uint256 public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n\n    uint256 private unlocked = 1;\n    modifier lock() {\n        require(unlocked == 1, \"UniswapV2: LOCKED\");\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n\n    function getReserves()\n        public\n        view\n        returns (\n            uint112 _reserve0,\n            uint112 _reserve1,\n            uint32 _blockTimestampLast\n        )\n    {\n        _reserve0 = reserve0;\n        _reserve1 = reserve1;\n        _blockTimestampLast = blockTimestampLast;\n    }\n\n    function _safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) private {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(SELECTOR, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"UniswapV2: TRANSFER_FAILED\"\n        );\n    }\n\n    constructor() {\n        factory = msg.sender;\n    }\n\n    // called once by the factory at time of deployment\n    function initialize(address _token0, address _token1) external {\n        require(msg.sender == factory, \"UniswapV2: FORBIDDEN\"); // sufficient check\n        token0 = _token0;\n        token1 = _token1;\n    }\n\n    // update reserves and, on the first call per block, price accumulators\n    function _update(\n        uint256 balance0,\n        uint256 balance1,\n        uint112 _reserve0,\n        uint112 _reserve1\n    ) private {\n        require(\n            balance0 <= type(uint112).max && balance1 <= type(uint112).max,\n            \"UniswapV2: OVERFLOW\"\n        );\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n            // * never overflows, and + overflow is desired\n            price0CumulativeLast +=\n                uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) *\n                timeElapsed;\n            price1CumulativeLast +=\n                uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) *\n                timeElapsed;\n        }\n        reserve0 = uint112(balance0);\n        reserve1 = uint112(balance1);\n        blockTimestampLast = blockTimestamp;\n        emit Sync(reserve0, reserve1);\n    }\n\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\n    function _mintFee(uint112 _reserve0, uint112 _reserve1)\n        private\n        returns (bool feeOn)\n    {\n        address feeTo = IUniswapV2Factory(factory).feeTo();\n        feeOn = feeTo != address(0);\n        uint256 _kLast = kLast; // gas savings\n        if (feeOn) {\n            if (_kLast != 0) {\n                uint256 rootK = Math.sqrt(uint256(_reserve0).mul(_reserve1));\n                uint256 rootKLast = Math.sqrt(_kLast);\n                if (rootK > rootKLast) {\n                    uint256 numerator = totalSupply.mul(rootK.sub(rootKLast));\n                    uint256 denominator = rootK.mul(5).add(rootKLast);\n                    uint256 liquidity = numerator / denominator;\n                    if (liquidity > 0) _mint(feeTo, liquidity);\n                }\n            }\n        } else if (_kLast != 0) {\n            kLast = 0;\n        }\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function mint(address to) external lock returns (uint256 liquidity) {\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\n        uint256 amount0 = balance0.sub(_reserve0);\n        uint256 amount1 = balance1.sub(_reserve1);\n\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        if (_totalSupply == 0) {\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n        } else {\n            console.log(\n                \"totalSupply %s, reserve0 %s, reserve1 %s\",\n                _totalSupply,\n                _reserve0,\n                _reserve1\n            );\n            console.log(\"amount0 %s, amount1 %s\", amount0, amount1);\n            liquidity = Math.min(\n                amount0.mul(_totalSupply) / _reserve0,\n                amount1.mul(_totalSupply) / _reserve1\n            );\n        }\n        require(liquidity > 0, \"UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED\");\n        _mint(to, liquidity);\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Mint(msg.sender, amount0, amount1);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function burn(address to)\n        external\n        lock\n        returns (uint256 amount0, uint256 amount1)\n    {\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n        address _token0 = token0; // gas savings\n        address _token1 = token1; // gas savings\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\n        uint256 liquidity = balanceOf[address(this)];\n\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n        require(\n            amount0 > 0 && amount1 > 0,\n            \"UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED\"\n        );\n        _burn(address(this), liquidity);\n        _safeTransfer(_token0, to, amount0);\n        _safeTransfer(_token1, to, amount1);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Burn(msg.sender, amount0, amount1, to);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external lock {\n        require(\n            amount0Out > 0 || amount1Out > 0,\n            \"UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n        require(\n            amount0Out < _reserve0 && amount1Out < _reserve1,\n            \"UniswapV2: INSUFFICIENT_LIQUIDITY\"\n        );\n\n        uint256 balance0;\n        uint256 balance1;\n        {\n            // scope for _token{0,1}, avoids stack too deep errors\n            address _token0 = token0;\n            address _token1 = token1;\n            require(to != _token0 && to != _token1, \"UniswapV2: INVALID_TO\");\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n            if (data.length > 0)\n                IUniswapV2Callee(to).uniswapV2Call(\n                    msg.sender,\n                    amount0Out,\n                    amount1Out,\n                    data\n                );\n            balance0 = IERC20(_token0).balanceOf(address(this));\n            balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n        uint256 amount0In = balance0 > _reserve0 - amount0Out\n            ? balance0 - (_reserve0 - amount0Out)\n            : 0;\n        uint256 amount1In = balance1 > _reserve1 - amount1Out\n            ? balance1 - (_reserve1 - amount1Out)\n            : 0;\n        require(\n            amount0In > 0 || amount1In > 0,\n            \"UniswapV2: INSUFFICIENT_INPUT_AMOUNT\"\n        );\n        {\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n            uint256 balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\n            uint256 balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\n            require(\n                balance0Adjusted.mul(balance1Adjusted) >=\n                    uint256(_reserve0).mul(_reserve1).mul(1000**2),\n                \"UniswapV2: K\"\n            );\n        }\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    // force balances to match reserves\n    function skim(address to) external lock {\n        address _token0 = token0; // gas savings\n        address _token1 = token1; // gas savings\n        _safeTransfer(\n            _token0,\n            to,\n            IERC20(_token0).balanceOf(address(this)).sub(reserve0)\n        );\n        _safeTransfer(\n            _token1,\n            to,\n            IERC20(_token1).balanceOf(address(this)).sub(reserve1)\n        );\n    }\n\n    // force reserves to match balances\n    function sync() external lock {\n        _update(\n            IERC20(token0).balanceOf(address(this)),\n            IERC20(token1).balanceOf(address(this)),\n            reserve0,\n            reserve1\n        );\n    }\n}\n"
    },
    "contracts/testing/realUniswap/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/testing/realUniswap/UniswapV2ERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\nimport './interfaces/IUniswapV2ERC20.sol';\nimport './libraries/SafeMath.sol';\n\ncontract UniswapV2ERC20 is IUniswapV2ERC20 {\n    using SafeMath for uint;\n\n    string public override constant name = 'Uniswap V2';\n    string public override constant symbol = 'UNI-V2';\n    uint8 public override constant decimals = 18;\n    uint  public override totalSupply;\n    mapping(address => uint) public override balanceOf;\n    mapping(address => mapping(address => uint)) public override allowance;\n\n    bytes32 public override DOMAIN_SEPARATOR;\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public override constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n    mapping(address => uint) public override nonces;\n\n    constructor() {\n        uint chainId;\n        assembly {\n            chainId := chainid()\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n                keccak256(bytes(name)),\n                keccak256(bytes('1')),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    function _mint(address to, uint value) internal {\n        totalSupply = totalSupply.add(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(address(0), to, value);\n    }\n\n    function _burn(address from, uint value) internal {\n        balanceOf[from] = balanceOf[from].sub(value);\n        totalSupply = totalSupply.sub(value);\n        emit Transfer(from, address(0), value);\n    }\n\n    function _approve(address owner, address spender, uint value) private {\n        allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _transfer(address from, address to, uint value) private {\n        balanceOf[from] = balanceOf[from].sub(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function approve(address spender, uint value) external override returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint value) external override returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) external override returns (bool) {\n        if (allowance[from][msg.sender] != type(uint).max) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external override {\n        require(deadline >= block.timestamp, 'UniswapV2: EXPIRED');\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                '\\x19\\x01',\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n            )\n        );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'UniswapV2: INVALID_SIGNATURE');\n        _approve(owner, spender, value);\n    }\n}\n"
    },
    "contracts/testing/realUniswap/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\n// a library for performing various math operations\n\nlibrary Math {\n    function min(uint x, uint y) internal pure returns (uint z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "contracts/testing/realUniswap/libraries/UQ112x112.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n\n// range: [0, 2**112 - 1]\n// resolution: 1 / 2**112\n\nlibrary UQ112x112 {\n    uint224 constant Q112 = 2**112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 y) internal pure returns (uint224 z) {\n        z = uint224(y) * Q112; // never overflows\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n        z = x / uint224(y);\n    }\n}\n"
    },
    "contracts/testing/realUniswap/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"
    },
    "contracts/testing/realUniswap/interfaces/IUniswapV2Callee.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Callee {\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\n}\n"
    },
    "contracts/testing/realUniswap/interfaces/IUniswapV2ERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\ninterface IUniswapV2ERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n}\n"
    },
    "contracts/testing/realUniswap/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n"
    },
    "contracts/testing/realBehodler/BehodlerLite.sol": {
      "content": "// File: contracts/openzeppelin/Ownable.sol\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"hardhat/console.sol\";\nimport \"./CommonIERC20.sol\";\n\nabstract contract Burnable {\n    function burn(uint256 amount) public virtual;\n\n    function symbol() public pure virtual returns (string memory);\n\n    function burn(address holder, uint256 amount) public virtual;\n}\n\ncontract ScarcityLite is CommonIERC20 {\n    event Mint(address sender, address recipient, uint256 value);\n    event Burn(uint256 value);\n\n    mapping(address => uint256) internal balances;\n    mapping(address => mapping(address => uint256)) internal _allowances;\n    uint256 internal _totalSupply;\n\n    struct BurnConfig {\n        uint256 transferFee; // percentage expressed as number betewen 1 and 1000\n        uint256 burnFee; // percentage expressed as number betewen 1 and 1000\n        address feeDestination;\n    }\n\n    BurnConfig public config;\n\n    function configureScarcity(\n        uint256 transferFee,\n        uint256 burnFee,\n        address feeDestination\n    ) public {\n        require(config.transferFee + config.burnFee < 1000);\n        config.transferFee = transferFee;\n        config.burnFee = burnFee;\n        config.feeDestination = feeDestination;\n    }\n\n    function getConfiguration()\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            address\n        )\n    {\n        return (config.transferFee, config.burnFee, config.feeDestination);\n    }\n\n    function name() public pure returns (string memory) {\n        return \"Scarcity\";\n    }\n\n    function symbol() public pure returns (string memory) {\n        return \"SCX\";\n    }\n\n    function decimals() public pure override returns (uint8) {\n        return 18;\n    }\n\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount)\n        external\n        override\n        returns (bool)\n    {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount)\n        external\n        override\n        returns (bool)\n    {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            msg.sender,\n            _allowances[sender][msg.sender] - (amount)\n        );\n        return true;\n    }\n\n    function burn(uint256 value) external returns (bool) {\n        burn(msg.sender, value);\n        return true;\n    }\n\n    function burn(address holder, uint256 value) internal {\n        balances[holder] = balances[holder] - value;\n        _totalSupply = _totalSupply - value;\n        emit Burn(value);\n    }\n\n    function mint(address recipient, uint256 value) internal {\n        balances[recipient] = balances[recipient] + (value);\n        _totalSupply = _totalSupply + (value);\n        emit Mint(msg.sender, recipient, value);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    //outside of Behodler, Scarcity transfer incurs a fee.\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(\n            sender != address(0),\n            \"Scarcity: transfer from the zero address\"\n        );\n        require(\n            recipient != address(0),\n            \"Scarcity: transfer to the zero address\"\n        );\n\n        uint256 feeComponent = (config.transferFee * amount) / (1000);\n        uint256 burnComponent = (config.burnFee * amount) / (1000);\n        _totalSupply = _totalSupply - burnComponent;\n        emit Burn(burnComponent);\n\n        balances[config.feeDestination] =\n            balances[config.feeDestination] +\n            (feeComponent);\n\n        balances[sender] = balances[sender] - (amount);\n\n        balances[recipient] =\n            balances[recipient] +\n            (amount - (feeComponent + burnComponent));\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function applyBurnFee(\n        address token,\n        uint256 amount,\n        bool proxyBurn\n    ) internal returns (uint256) {\n        uint256 burnAmount = (config.burnFee * amount) / (1000);\n        Burnable bToken = Burnable(token);\n        if (proxyBurn) {\n            bToken.burn(address(this), burnAmount);\n        } else {\n            bToken.burn(burnAmount);\n        }\n\n        return burnAmount;\n    }\n}\n\nlibrary AddressBalanceCheck {\n    function tokenBalance(address token) public view returns (uint256) {\n        return CommonIERC20(token).balanceOf(address(this));\n    }\n\n    function shiftedBalance(address token, uint256 factor)\n        public\n        view\n        returns (uint256)\n    {\n        return CommonIERC20(token).balanceOf(address(this)) / factor;\n    }\n\n    function transferIn(\n        address token,\n        address sender,\n        uint256 value\n    ) public {\n        CommonIERC20(token).transferFrom(sender, address(this), value);\n    }\n\n    function transferOut(\n        address token,\n        address recipient,\n        uint256 value\n    ) public {\n        CommonIERC20(token).transfer(recipient, value);\n    }\n}\n\nlibrary ABDK {\n    /*\n     * Minimum value signed 64.64-bit fixed point number may have.\n     */\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\n\n    /*\n     * Maximum value signed 64.64-bit fixed point number may have.\n     */\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    /**\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\n     * number.  Revert on overflow.\n     *\n     * @param x unsigned 256-bit integer number\n     * @return signed 64.64-bit fixed point number\n     */\n    function fromUInt(uint256 x) internal pure returns (int128) {\n        require(x <= 0x7FFFFFFFFFFFFFFF);\n        return int128(uint128(x << 64));\n    }\n\n    /**\n     * Calculate x + y.  Revert on overflow.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @param y signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function add(int128 x, int128 y) internal pure returns (int128) {\n        int256 result = int256(x) + y;\n        require(result >= MIN_64x64 && result <= MAX_64x64);\n        return int128(result);\n    }\n\n    /**\n     * Calculate binary logarithm of x.  Revert if x <= 0.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function log_2(uint256 x) internal pure returns (uint256) {\n        require(x > 0);\n\n        uint256 msb = 0;\n        uint256 xc = x;\n        if (xc >= 0x10000000000000000) {\n            xc >>= 64;\n            msb += 64;\n        }\n        if (xc >= 0x100000000) {\n            xc >>= 32;\n            msb += 32;\n        }\n        if (xc >= 0x10000) {\n            xc >>= 16;\n            msb += 16;\n        }\n        if (xc >= 0x100) {\n            xc >>= 8;\n            msb += 8;\n        }\n        if (xc >= 0x10) {\n            xc >>= 4;\n            msb += 4;\n        }\n        if (xc >= 0x4) {\n            xc >>= 2;\n            msb += 2;\n        }\n        if (xc >= 0x2) msb += 1; // No need to shift xc anymore\n\n        uint256 result = (msb - 64) << 64;\n        uint256 ux = uint256(x) << uint256(127 - msb);\n        for (uint256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\n            ux *= ux;\n            uint256 b = ux >> 255;\n            ux >>= 127 + b;\n            result += bit * b;\n        }\n\n        return result;\n    }\n}\n\ncontract StubLiquidityReceiver {}\n\ncontract BehodlerLite is ScarcityLite {\n    using ABDK for int128;\n    using ABDK for uint256;\n    using AddressBalanceCheck for address;\n\n    struct PrecisionFactors {\n        uint8 swapPrecisionFactor;\n        uint8 maxLiquidityExit; //percentage as number between 1 and 100\n    }\n    address receiver;\n    PrecisionFactors safetyParameters;\n\n    constructor() {\n        receiver = address(new StubLiquidityReceiver());\n        safetyParameters.swapPrecisionFactor = 30; //approximately a billion\n        safetyParameters.maxLiquidityExit = 90;\n    }\n\n    function setSafetParameters(\n        uint8 swapPrecisionFactor,\n        uint8 maxLiquidityExit\n    ) external {\n        safetyParameters.swapPrecisionFactor = swapPrecisionFactor;\n        safetyParameters.maxLiquidityExit = maxLiquidityExit;\n    }\n\n    //Logarithmic growth can get quite flat beyond the first chunk. We divide input amounts by\n    uint256 public constant MIN_LIQUIDITY = 1e12;\n\n    mapping(address => bool) public tokenBurnable;\n\n    function setTokenBurnable(address token, bool burnable) public {\n        tokenBurnable[token] = burnable;\n    }\n\n    mapping(address => bool) public whiteListUsers; // can trade on tokens that are disabled\n\n    function swap(\n        address inputToken,\n        address outputToken,\n        uint256 inputAmount,\n        uint256 outputAmount\n    ) external payable returns (bool success) {\n        uint256 initialInputBalance = inputToken.tokenBalance();\n\n        inputToken.transferIn(msg.sender, inputAmount);\n\n        uint256 netInputAmount = inputAmount -\n            burnToken(inputToken, inputAmount);\n        uint256 initialOutputBalance = outputToken.tokenBalance();\n        require(\n            (outputAmount * 100) / initialOutputBalance <=\n                safetyParameters.maxLiquidityExit,\n            \"BEHODLER: liquidity withdrawal too large.\"\n        );\n        uint256 finalInputBalance = initialInputBalance + (netInputAmount);\n        uint256 finalOutputBalance = initialOutputBalance - (outputAmount);\n\n        //new scope to avoid stack too deep errors.\n        {\n            //if the input balance after adding input liquidity is 1073741824 bigger than the initial balance, we revert.\n            uint256 inputRatio = (initialInputBalance <<\n                safetyParameters.swapPrecisionFactor) / finalInputBalance;\n            uint256 outputRatio = (finalOutputBalance <<\n                safetyParameters.swapPrecisionFactor) / initialOutputBalance;\n\n            require(\n                inputRatio != 0 && inputRatio == outputRatio,\n                \"BEHODLER: swap invariant.\"\n            );\n        }\n\n        require(\n            finalOutputBalance >= MIN_LIQUIDITY,\n            \"BEHODLER: min liquidity.\"\n        );\n        outputToken.transferOut(msg.sender, outputAmount);\n        success = true;\n    }\n\n    function addLiquidity(address inputToken, uint256 amount)\n        external\n        payable\n        returns (uint256 deltaSCX)\n    {\n        uint256 initialBalance = uint256(\n            int256(inputToken.shiftedBalance(MIN_LIQUIDITY).fromUInt())\n        );\n\n        inputToken.transferIn(msg.sender, amount);\n\n        uint256 netInputAmount = uint256(\n            int256(\n                ((amount - burnToken(inputToken, amount)) / MIN_LIQUIDITY)\n                .fromUInt()\n            )\n        );\n\n        uint256 finalBalance = uint256(initialBalance + netInputAmount);\n        require(\n            uint256(finalBalance) >= MIN_LIQUIDITY,\n            \"BEHODLER: min liquidity.\"\n        );\n        deltaSCX = uint256(\n            finalBalance.log_2() -\n                (initialBalance > 1 ? initialBalance.log_2() : 0)\n        );\n        mint(msg.sender, deltaSCX);\n    }\n\n    /*\n        ΔSCX =  log(InitialBalance) - log(FinalBalance)\n        tokensToRelease = InitialBalance -FinalBalance\n        =>FinalBalance =  InitialBalance - tokensToRelease\n        Then apply logs and deduct SCX from msg.sender\n\n        The choice of base for the log isn't relevant from a mathematical point of view\n        but from a computational point of view, base 2 is the cheapest for obvious reasons.\n        \"From my point of view, the Jedi are evil\" - Darth Vader\n     */\n    function withdrawLiquidity(address outputToken, uint256 tokensToRelease)\n        external\n        payable\n        returns (uint256 deltaSCX)\n    {\n        uint256 initialBalance = outputToken.tokenBalance();\n        uint256 finalBalance = initialBalance - tokensToRelease;\n        require(finalBalance > MIN_LIQUIDITY, \"BEHODLER: min liquidity\");\n        require(\n            (tokensToRelease * 100) / initialBalance <=\n                safetyParameters.maxLiquidityExit,\n            \"BEHODLER: liquidity withdrawal too large.\"\n        );\n\n        uint256 logInitial = initialBalance.log_2();\n        uint256 logFinal = finalBalance.log_2();\n\n        deltaSCX = logInitial - (finalBalance > 1 ? logFinal : 0);\n        uint256 scxBalance = balances[msg.sender];\n\n        if (deltaSCX > scxBalance) {\n            //rounding errors in scx creation and destruction. Err on the side of holders\n            uint256 difference = deltaSCX - scxBalance;\n            if ((difference * 10000) / deltaSCX == 0) deltaSCX = scxBalance;\n        }\n        burn(msg.sender, deltaSCX);\n        outputToken.transferOut(msg.sender, tokensToRelease);\n    }\n\n    /*\n        ΔSCX =  log(InitialBalance) - log(FinalBalance)\n        tokensToRelease = InitialBalance -FinalBalance\n        =>FinalBalance =  InitialBalance - tokensToRelease\n        Then apply logs and deduct SCX from msg.sender\n\n        The choice of base for the log isn't relevant from a mathematical point of view\n        but from a computational point of view, base 2 is the cheapest for obvious reasons.\n        \"From my point of view, the Jedi are evil\" - Darth Vader\n     */\n    function withdrawLiquidityFindSCX(\n        address outputToken,\n        uint256 tokensToRelease,\n        uint256 scx,\n        uint256 passes\n    ) external view returns (uint256) {\n        uint256 upperBoundary = outputToken.tokenBalance();\n        uint256 lowerBoundary = 0;\n\n        for (uint256 i = 0; i < passes; i++) {\n            uint256 initialBalance = outputToken.tokenBalance();\n            uint256 finalBalance = initialBalance - tokensToRelease;\n\n            uint256 logInitial = initialBalance.log_2();\n            uint256 logFinal = finalBalance.log_2();\n\n            int256 deltaSCX = int256(\n                logInitial - (finalBalance > 1 ? logFinal : 0)\n            );\n            int256 difference = int256(scx) - deltaSCX;\n            // if (difference**2 < 1000000) return tokensToRelease;\n            if (difference == 0) return tokensToRelease;\n            if (difference < 0) {\n                // too many tokens requested\n                upperBoundary = tokensToRelease - 1;\n            } else {\n                //too few tokens requested\n                lowerBoundary = tokensToRelease + 1;\n            }\n            tokensToRelease =\n                ((upperBoundary - lowerBoundary) / 2) +\n                lowerBoundary; //bitshift\n            tokensToRelease = tokensToRelease > initialBalance\n                ? initialBalance\n                : tokensToRelease;\n        }\n        return tokensToRelease;\n    }\n\n    function burnToken(address token, uint256 amount)\n        private\n        returns (uint256 burnt)\n    {\n        if (tokenBurnable[token]) {\n            burnt = applyBurnFee(token, amount, false);\n        } else {\n            burnt = (config.burnFee * amount) / (1000);\n            token.transferOut(receiver, burnt);\n        }\n    }\n}\n"
    },
    "contracts/testing/realBehodler/CommonIERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface CommonIERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function decimals() external returns (uint8);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}"
    },
    "contracts/testing/realBehodler/AddTokenPowerLite.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./CommonIERC20.sol\";\n\nabstract contract AngbandLike {\n\n    function executePower(address powerInvoker)\n        public virtual;\n}\n\ncontract AngbandLite is AngbandLike {\n\n    function executePower(address powerInvoker)\n        public override{\n            IdempotentPowerInvoker(powerInvoker).invoke();\n        }\n}\n\n\nabstract contract IdempotentPowerInvoker {\n    AngbandLike public angband;\n\n    constructor(address _angband) {\n        angband = AngbandLike(_angband);\n    \n    }\n\n    function orchestrate() internal virtual returns (bool);\n\n    function invoke() public {\n        require(msg.sender == address(angband), \"MORGOTH: angband only\");\n        require(orchestrate(), \"MORGOTH: Power invocation\");\n    }\n}\n\nabstract contract BehodlerLiteLike {\n    function addLiquidity(address inputToken, uint256 amount)\n        external\n        virtual\n        payable\n        returns (uint256 deltaSCX);\n\n    function setTokenBurnable(address token, bool burnable) public virtual; \n}\n\ncontract LimboAddTokenToBehodler is IdempotentPowerInvoker {\n    struct Parameters {\n        address soul;\n        bool burnable;\n        address limbo;\n    }\n\n    Parameters public params;\n    address behodler;\n\n    constructor(\n        address _angband,\n        address limbo,\n        address behodlerLite\n    )IdempotentPowerInvoker(_angband) {\n        params.limbo = limbo;\n        behodler = behodlerLite;\n    }\n\n    function parameterize(address soul, bool burnable) public {\n        require(\n            msg.sender == params.limbo,\n            \"MORGOTH: Only Limbo can migrate tokens from Limbo.\"\n        );\n        params.soul = soul;\n        params.burnable = burnable;\n    }\n\n    function orchestrate() internal override returns (bool) {\n        require(\n            params.soul != address(0),\n            \"MORGOTH: PowerInvoker not parameterized.\"\n        );\n\n        uint256 balanceOfToken = CommonIERC20(params.soul).balanceOf(address(this));\n        require(balanceOfToken > 0, \"MORGOTH: remember to seed contract\");\n        CommonIERC20(params.soul).approve(behodler, type(uint256).max);\n        BehodlerLiteLike(behodler).setTokenBurnable(params.soul, params.burnable);\n        BehodlerLiteLike(behodler).addLiquidity(params.soul, balanceOfToken);\n        uint256 scxBal = CommonIERC20(behodler).balanceOf(address(this));\n        CommonIERC20(behodler).transfer(params.limbo, scxBal);\n        params.soul = address(0); // prevent non limbo from executing.\n        return true;\n    }\n}\n"
    },
    "contracts/DAO/Proposals/UpdateSoulConfigProposal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../ProposalFactory.sol\";\nimport \"../../facades/LimboLike.sol\";\nimport \"../../facades/MorgothTokenApproverLike.sol\";\nimport \"hardhat/console.sol\";\n\ncontract UpdateSoulConfigProposal is Proposal {\n    struct Parameters {\n        address token;\n        uint256 crossingThreshold;\n        uint256 soulType;\n        uint256 state;\n        uint256 index;\n        uint256 fps;\n    }\n    Parameters params;\n    LimboLike limbo;\n    MorgothTokenApproverLike morgothApprover;\n\n    constructor(\n        address dao,\n        string memory _description,\n        address _limbo,\n        address morgothTokenApprover\n    ) Proposal(dao, _description) {\n        limbo = LimboLike(_limbo);\n        morgothApprover = MorgothTokenApproverLike(morgothTokenApprover);\n    }\n\n    function parameterize(\n        address token,\n        uint256 crossingThreshold,\n        uint256 soulType,\n        uint256 state,\n        uint256 index,\n        uint256 fps\n    ) public notCurrent {\n        require(\n            morgothApprover.approved(token),\n            \"MORGOTH: token not approved for listing on Behodler\"\n        );\n        params.token = token;\n        params.crossingThreshold = crossingThreshold;\n        params.soulType = soulType;\n        params.state = state;\n        params.index = index;\n        params.fps = fps;\n    }\n\n    function execute() internal override returns (bool) {\n        console.log(\"token: %s, index: %s\",params.token,params.index);\n        limbo.configureSoul(\n            params.token,\n            params.crossingThreshold,\n            params.soulType,\n            params.state,\n            params.index,\n            params.fps\n        );\n\n        return true;\n    }\n}\n"
    },
    "contracts/DAO/ProposalFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../facades/LimboDAOLike.sol\";\nimport \"./Governable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nabstract contract Proposal {\n    string public description;\n    LimboDAOLike DAO;\n\n    constructor(address dao, string memory _description) {\n        DAO = LimboDAOLike(dao);\n        description = _description;\n    }\n\n    modifier onlyDAO() {\n        address dao = address(DAO);\n        require(dao != address(0), \"PROPOSAL: DAO not set\");\n        require(msg.sender == dao, \"PROPOSAL: only DAO can invoke\");\n        _;\n    }\n\n    modifier notCurrent() {\n        (, , , , address proposal) = DAO.currentProposalState();\n        require(proposal != address(this), \"LimboDAO: proposal locked\");\n        _;\n    }\n\n    function orchestrateExecute() public onlyDAO {\n        require(execute(), \"LimboDAO: execution of proposal failed\");\n    }\n\n    function execute() internal virtual returns (bool);\n}\n\ncontract ProposalFactory is Governable, Ownable {\n    mapping(address => bool) public whitelistedProposalContracts;\n    address public soulUpdateProposal;\n\n    constructor(\n        address _dao,\n        address whitelistingProposal,\n        address _soulUpdateProposal\n    ) Governable(_dao) {\n        whitelistedProposalContracts[whitelistingProposal] = true;\n        whitelistedProposalContracts[_soulUpdateProposal] = true;\n        soulUpdateProposal = _soulUpdateProposal;\n    }\n\n    //MorgothDAO is the ultimate rule maker\n    function changeSoulUpdateProposal(address newProposal) public onlyOwner {\n        soulUpdateProposal = newProposal;\n    }\n\n    function toggleWhitelistProposal(address proposal)\n        public\n        onlySuccessfulProposal\n    {\n        whitelistedProposalContracts[proposal] = !whitelistedProposalContracts[\n            proposal\n        ];\n    }\n\n    function lodgeProposal(address proposal) public {\n        require(\n            whitelistedProposalContracts[proposal],\n            \"LimboDAO: invalid proposal\"\n        );\n        LimboDAOLike(DAO).makeProposal(proposal, msg.sender);\n    }\n}\n"
    },
    "contracts/facades/LimboLike.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract LimboLike {\n    function latestIndex(address) public view virtual returns (uint256);\n\n    function souls(address, uint256)\n        public\n        view\n        virtual\n        returns (\n            uint256, //lastRewardTimeStamp\n            uint256,//accumulatedFlanPerShare\n            uint256,//crossingThreshold\n            uint256,//soulType\n            uint256,//state\n            uint256//flanPerSecond\n        );\n\n    function tokenCrossingParameters(address, uint256)\n        public\n        view\n        virtual\n        returns (\n            uint256,\n            uint256,\n            int256,\n            uint256,\n            bool\n        );\n\n    function configureSoul(\n        address token,\n        uint256 crossingThreshold,\n        uint256 soulType,\n        uint256 state,\n        uint256 index,\n        uint256 fps\n    ) public virtual;\n\n    function withdrawERC20(address token, address destination) public virtual;\n\n    function userTokenBalance(address token) public virtual returns (uint);\n}\n"
    },
    "contracts/facades/MorgothTokenApproverLike.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract MorgothTokenApproverLike{\n    function approved(address token) public virtual view returns (bool);\n}"
    },
    "contracts/testing/MockMorgothTokenApprover.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../facades/MorgothTokenApproverLike.sol\";\n\ncontract MockMorgothTokenApprover is MorgothTokenApproverLike {\n    mapping(address => bool) public approvedTokens;\n\n    function addToken(address token) public {\n        approvedTokens[token] = true;\n    }\n\n    function removeToken(address token) public {\n        approvedTokens[token] = false;\n    }\n\n    function approved(address token) public override view returns (bool) {\n        return approvedTokens[token];\n    }\n}\n"
    },
    "contracts/DAO/Proposals/UpdateMultipleSoulConfigProposal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../ProposalFactory.sol\";\nimport \"../../facades/LimboLike.sol\";\nimport \"../../facades/AMMHelper.sol\";\nimport \"../../facades/MorgothTokenApproverLike.sol\";\n\ncontract UpdateMultipleSoulConfigProposal is Proposal {\n    struct Parameters {\n        address token;\n        uint256 crossingThreshold;\n        uint256 soulType;\n        uint256 state;\n        uint256 index;\n        uint256 targetAPY;\n        uint256 daiThreshold;\n    }\n\n    Parameters[] params;\n    LimboLike limbo;\n    AMMHelper ammHelper;\n    MorgothTokenApproverLike morgothApprover;\n\n    constructor(\n        address dao,\n        string memory _description,\n        address _limbo,\n        address _ammHelper,\n        address morgothTokenApprover\n    ) Proposal(dao, _description) {\n        limbo = LimboLike(_limbo);\n        ammHelper = AMMHelper(_ammHelper);\n         morgothApprover = MorgothTokenApproverLike(morgothTokenApprover);\n    }\n\n    function parameterize(\n        address token,\n        uint256 crossingThreshold,\n        uint256 soulType,\n        uint256 state,\n        uint256 index,\n        uint256 targetAPY,\n        uint256 daiThreshold\n    ) public notCurrent {\n         require(\n            morgothApprover.approved(token),\n            \"MORGOTH: token not approved for listing on Behodler\"\n        );\n        params.push(\n            Parameters({\n                token: token,\n                crossingThreshold: crossingThreshold,\n                soulType: soulType,\n                state: state,\n                index: index,\n                targetAPY: targetAPY,\n                daiThreshold: daiThreshold\n            })\n        );\n    }\n\n    function execute() internal override returns (bool) {\n        for (uint256 i = 0; i < params.length; i++) {\n            uint256 fps = ammHelper.minAPY_to_FPS(\n                params[i].targetAPY,\n                params[i].daiThreshold\n            );\n            limbo.configureSoul(\n                params[i].token,\n                params[i].crossingThreshold,\n                params[i].soulType,\n                params[i].state,\n                params[i].index,\n                fps\n            );\n        }\n\n        return true;\n    }\n}\n"
    },
    "contracts/periphery/SoulReader.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../DAO/Governable.sol\";\nimport \"../facades/LimboLike.sol\";\nimport \"../facades/LimboDAOLike.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract SoulReader is Governable {\n    LimboLike limbo;\n\n    constructor(address dao) Governable(dao) {\n        (address _limbo, , , , , , ) = LimboDAOLike(dao).domainConfig();\n        limbo = LimboLike(_limbo);\n    }\n\n    function SoulStats(address token)\n        public\n        view\n        returns (\n            uint256, //state\n            uint256, //staked balance\n            uint256 //fps\n        )\n    {\n        uint256 latestIndex = limbo.latestIndex(token);\n        (, , , ,uint256 state, uint256 fps) = limbo.souls(\n            token,\n            latestIndex\n        );\n        uint256 stakeBalance = IERC20(token).balanceOf(address(limbo));\n        return (state, stakeBalance, fps);\n    }\n\n    function CrossingParameters(address token)\n        public\n        view\n        returns (\n            uint256, //initialCrossingbonus\n            int256, //bonusDelta,\n            uint256 //fps\n        )\n    {\n        uint256 latestIndex = limbo.latestIndex(token);\n        (, , , , , uint256 flanPerSecond) = limbo.souls(\n            token,\n            latestIndex\n        );\n\n        (, , int256 crossingBonusDelta, uint256 initialCrossingBonus, ) = limbo\n            .tokenCrossingParameters(token, latestIndex);\n        return (\n            initialCrossingBonus,\n            crossingBonusDelta,\n            flanPerSecond\n        );\n    }\n}\n"
    },
    "contracts/DAO/Proposals/AdjustFlanFeeOnTransferProposal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../ProposalFactory.sol\";\nimport \"../../facades/FlanLike.sol\";\n\ncontract AdjustFlanFeeOnTransferProposal is Proposal {\n    struct Parameters {\n        address flan;\n        uint8 fee;\n    }\n    Parameters public params;\n\n    constructor(address dao, string memory _description)\n        Proposal(dao, description)\n    {}\n\n    function parameterize(\n       address flan,\n        uint8 fee\n    ) public notCurrent {\n        params.flan = flan;\n        params.fee = fee;\n    }\n\n    function execute() internal override returns (bool) {\n        FlanLike(params.flan).setBurnOnTransferFee(\n          params.fee\n        );\n        return true;\n    }\n}\n"
    },
    "contracts/DAO/Proposals/WithdrawERC20Proposal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../ProposalFactory.sol\";\nimport \"../../facades/LimboLike.sol\";\nimport \"../../facades/LimboDAOLike.sol\";\n\ncontract WithdrawERC20Proposal is Proposal {\n    struct Parameters {\n        address token;\n        address destination;\n    }\n    Parameters params;\n    LimboLike limbo;\n\n    constructor(address _dao) Proposal(_dao, \"Withdraw errant tokens\") {\n        (address _limbo, , , , , , ) = LimboDAOLike(_dao).domainConfig();\n        limbo = LimboLike(_limbo);\n    }\n\n    function parameterize(address token, address destination)\n        public\n        notCurrent\n    {\n        params.token = token;\n        params.destination = destination;\n    }\n\n    function execute() internal override returns (bool) {\n        limbo.withdrawERC20(params.token, params.destination);\n        return true;\n    }\n}\n"
    },
    "contracts/DAO/Proposals/UpdateProposalConfigProposal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../ProposalFactory.sol\";\n\ncontract UpdateProposalConfigProposal is Proposal {\n    struct Parameters {\n        uint256 votingDuration;\n        uint256 requiredFateStake;\n        address proposalFactory;\n    }\n\n    Parameters public params;\n\n    constructor(address dao, string memory _description)\n        Proposal(dao, _description)\n    {}\n\n    function parameterize(\n        uint256 votingDuration,\n        uint256 requiredFateStake,\n        address proposalFactory\n    ) public notCurrent {\n        params.proposalFactory = proposalFactory;\n        params.requiredFateStake = requiredFateStake;\n        params.votingDuration = votingDuration;\n    }\n\n    function execute() internal override returns (bool) {\n        DAO.setProposalConfig(\n            params.votingDuration,\n            params.requiredFateStake,\n            params.proposalFactory\n        );\n        return true;\n    }\n}\n"
    },
    "contracts/DAO/Proposals/ToggleWhitelistProposalProposal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../ProposalFactory.sol\";\nimport \"../../facades/ProposalFactoryLike.sol\";\n\ncontract ToggleWhitelistProposalProposal is Proposal {\n    struct Parameters {\n        address proposalFactory;\n        address toggleContract;\n    }\n\n    Parameters params;\n\n    constructor(address dao, string memory _description)\n        Proposal(dao, description){\n    }\n\n    function parameterize(address proposalFactory, address toggleContract)\n        public\n        notCurrent\n    {\n        params.proposalFactory = proposalFactory;\n        params.toggleContract = toggleContract;\n    }\n\n    function execute() internal override returns (bool) {\n        ProposalFactoryLike(params.proposalFactory).toggleWhitelistProposal(\n            params.toggleContract\n        );\n        return true;\n    }\n}\n"
    },
    "contracts/DAO/Proposals/SetAssetApprovalProposal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../ProposalFactory.sol\";\n\ncontract SetAssetApprovalProposal is Proposal {\n    struct Parameters {\n        address asset;\n        bool approved;\n    }\n\n    Parameters public params;\n\n    constructor(address dao, string memory _description)\n        Proposal(dao, description)\n    {}\n\n    function parameterize(address asset, bool approved) public notCurrent {\n        params.asset = asset;\n        params.approved = approved;\n    }\n\n    function execute() internal override returns (bool) {\n        DAO.setApprovedAsset(params.asset, params.approved);\n        return true;\n    }\n}\n"
    },
    "contracts/DAO/Proposals/BurnFlashStakeDeposit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../ProposalFactory.sol\";\nimport \"../../facades/FlashGovernanceArbiterLike.sol\";\n\ncontract BurnFlashStakeDeposit is Proposal {\n    struct Parameters {\n        address user;\n        address asset;\n        uint256 amount;\n        address flashGoverner;\n        address targetContract;\n    }\n\n    Parameters public params;\n\n    constructor(address dao, string memory _description)\n        Proposal(dao, description)\n    {}\n\n    function parameterize(\n        address user,\n        address asset,\n        uint256 amount,\n        address flashGoverner,\n        address targetContract\n    ) public notCurrent {\n        params.user = user;\n        params.asset = asset;\n        params.amount = amount;\n        params.flashGoverner = flashGoverner;\n        params.targetContract = targetContract;\n    }\n\n    function execute() internal override returns (bool) {\n        FlashGovernanceArbiterLike(params.flashGoverner)\n            .burnFlashGovernanceAsset(\n            params.targetContract,\n            params.user,\n            params.asset,\n            params.amount\n        );\n        return true;\n    }\n}\n"
    },
    "contracts/testing/MockMigrationUniPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../ERC677/ERC20Burnable.sol\";\n\ncontract MockMigrationUniPair is ERC20Burnable {\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {}\n\n    function factory() public view returns (address) {\n        return address(this);\n    }\n\n    uint112 reserve0;\n    uint112 reserve1;\n\n    function setReserves(uint112 r0, uint112 r1) public {\n        reserve0 = r0;\n        reserve1 = r1;\n    }\n\n    function getReserves()\n        public\n        view\n        returns (\n            uint112 _reserve0,\n            uint112 _reserve1,\n            uint32 _blockTimestampLast\n        )\n    {\n        return (reserve0, reserve1, uint32(block.timestamp));\n    }\n\n    function mint(address to) external returns (uint256 liquidity) {\n        uint256 val = (reserve0 * reserve1) / (reserve0 + reserve1);\n        _mint(to, val);\n        return val;\n    }\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external {}\n}\n"
    },
    "contracts/ERC677/ERC677.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./ERC20Burnable.sol\";\nimport \"./IERC677Receiver.sol\";\n\n/*\nAll tokens in Limbo comply with the ERC677 standard. In addition they are ownable, alow burning\nand can whitelist addresses with finite or infinite minting power\n*/\n\ncontract ERC677 is ERC20Burnable, Ownable {\n   \n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n\n    }\n\n    /**\n     * @dev transfer token to a contract address with additional data if the recipient is a contact.\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     * @param _data The extra data to be passed to the receiving contract.\n     */\n    function transferAndCall(\n        address _to,\n        uint256 _value,\n        bytes memory _data\n    ) public returns (bool success) {\n        super.transfer(_to, _value);\n        _transfer(msg.sender, _to, _value);\n        if (isContract(_to)) {\n            contractFallback(_to, _value, _data);\n        }\n        return true;\n    }\n\n    function contractFallback(\n        address _to,\n        uint256 _value,\n        bytes memory _data\n    ) private {\n        IERC677Receiver receiver = IERC677Receiver(_to);\n        receiver.onTokenTransfer(msg.sender, _value, _data);\n    }\n\n    function isContract(address _addr) private view returns (bool hasCode) {\n        uint256 length;\n        assembly {\n            length := extcodesize(_addr)\n        }\n        return length > 0;\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {}\n}\n"
    },
    "contracts/ERC677/IERC677Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC677Receiver {\n  function onTokenTransfer(address _sender, uint _value, bytes memory  _data) external;\n}"
    },
    "contracts/testing/UniswapPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../ERC677/ERC677.sol\";\n\ncontract UniswapPair is ERC677 {\n    address public factory;\n\n    constructor(\n        address _factory,\n        string memory name,\n        string memory symbol\n    ) ERC677(name, symbol) {\n        factory = _factory;\n        _mint(_msgSender(), 10 ether);\n    }\n}\n"
    },
    "contracts/testing/MockToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../ERC677/ERC677.sol\";\n\ncontract MockToken is ERC677 {\n    constructor(\n        string memory name,\n        string memory symbol,\n        address[] memory LPs,\n        uint256[] memory mintVal\n    ) ERC677(name, symbol) {\n        _mint(msg.sender, 100 ether);\n        uint256 deceth = (1 ether) / 10;\n        require(LPs.length == mintVal.length, \"CONSTRUCTION MISMATCH\");\n        for (uint256 i = 0; i < LPs.length; i++) {\n            _mint(LPs[i], mintVal[i] * deceth);\n        }\n    }\n\n    function mint(uint amount) public {\n        _mint(msg.sender,amount);\n    }\n}\n"
    },
    "contracts/testing/MockBehodler.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../ERC677/ERC677.sol\";\nimport \"../facades/BehodlerLike.sol\";\n\ncontract MockBehodler is ERC677 {\n    address addTokenPower;\n    uint256 priceMultiplier = 200;\n\n    function setPriceMultiplier(uint256 _priceMultiplier) public {\n        priceMultiplier = _priceMultiplier;\n    }\n\n    function withdrawLiquidityFindSCX(\n        address outputToken,\n        uint256 tokensToRelease,\n        uint256 scx,\n        uint256 passes\n    ) external view returns (uint256) {\n        return priceMultiplier * scx;\n    }\n\n    function mintTo(address recipient, uint256 amount) public {\n        _mint(recipient, amount);\n    }\n\n    function mint(uint256 amount) public {\n        require(\n            msg.sender == addTokenPower,\n            \"Only Mock Power can mint on Mock Behodler.\"\n        );\n        _mint(msg.sender, amount);\n    }\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        address _addTokenPower\n    ) ERC677(name, symbol) {\n        _mint(msg.sender, 100 ether);\n        addTokenPower = _addTokenPower;\n    }\n\n    address MickyMouseToken = 0xAa645185F79506175917Ae2Fdd3128E4711D4065;\n\n    function config()\n        public\n        view\n        returns (\n            uint256 transferFee,\n            uint256 burnFee,\n            address feeDestination\n        )\n    {\n        transferFee = 15;\n        burnFee = 5;\n        feeDestination = MickyMouseToken;\n    }\n}\n"
    },
    "contracts/testing/MockAddTokenPower.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./MockBehodler.sol\";\nimport \"../facades/LimboAddTokenToBehodlerPowerLike.sol\";\n\ncontract MockAddTokenPower is LimboAddTokenToBehodlerPowerLike {\n    address behodler;\n    address limbo;\n    uint256 scxToMint = 10000;\n\n    function setScarcityToMint(uint256 _scarcity) public {\n        scxToMint = _scarcity;\n    }\n\n    function seed(address _behodler, address _limbo) public {\n        limbo = _limbo;\n        behodler = _behodler;\n    }\n\n    function parameterize(address token, bool burnable) public override {}\n\n    function invoke() public {\n        MockBehodler(behodler).mint(scxToMint);\n        MockBehodler(behodler).transfer(limbo, scxToMint);\n    }\n}\n"
    },
    "contracts/testing/MockAngband.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./MockAddTokenPower.sol\";\n\ncontract MockAngband {\n\n    function executePower(address invoker) public {\n        MockAddTokenPower(invoker).invoke();\n    }\n}"
    },
    "contracts/Flan.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./ERC677/ERC677.sol\";\nimport \"../contracts/DAO/Governable.sol\";\n\ncontract Flan is ERC677(\"Flan\", \"FLN\"), Governable {\n    event burnOnTransferFeeAdjusted(uint8 oldFee, uint8 newFee);\n    mapping(address => uint256) public mintAllowance; //type(uint).max == whitelist\n\n    uint8 public burnOnTransferFee = 0; //% between 1 and 100, recipient pays\n\n    constructor(address dao) Governable(dao) {}\n\n    function setBurnOnTransferFee(uint8 fee) public onlySuccessfulProposal {\n        _setBurnOnTransferFee(fee);\n    }\n\n    function incrementBurnOnTransferFee(int8 change) public governanceApproved(false) {\n        uint8 newFee = uint8(int8(burnOnTransferFee) + change);\n        flashGoverner.enforceTolerance(newFee, burnOnTransferFee);\n        _setBurnOnTransferFee(newFee);\n    }\n\n    function _setBurnOnTransferFee(uint8 fee) internal {\n        uint8 priorFee = burnOnTransferFee;\n        burnOnTransferFee = fee > 100 ? 100 : fee;\n        emit burnOnTransferFeeAdjusted(priorFee, burnOnTransferFee);\n    }\n\n    function whiteListMinting(address minter, bool enabled)\n        public\n        onlySuccessfulProposal\n    {\n        mintAllowance[minter] = enabled ? type(uint256).max : 0;\n    }\n\n    function increaseMintAllowance(address minter, uint256 _allowance)\n        public\n        onlySuccessfulProposal\n    {\n        mintAllowance[minter] = mintAllowance[minter] + _allowance;\n    }\n\n    function mint(address recipient, uint256 amount) public returns (bool) {\n        uint256 allowance = mintAllowance[_msgSender()];\n        require(\n            _msgSender() == owner() || allowance >= amount,\n            \"Flan: Mint allowance exceeded\"\n        );\n        approvedMint(recipient, amount, _msgSender(), allowance);\n        return true;\n    }\n\n    function approvedMint(\n        address recipient,\n        uint256 amount,\n        address minter,\n        uint256 allowance\n    ) internal {\n        _mint(recipient, amount);\n        if (allowance < type(uint256).max) {\n            mintAllowance[minter] = mintAllowance[minter] - amount;\n        }\n    }\n\n    function safeTransfer(address _to, uint256 _amount) external {\n        uint256 flanBal = balanceOf(address(this));\n        uint256 flanToTransfer = _amount > flanBal ? flanBal : _amount;\n        _transfer(_msgSender(), _to, flanToTransfer);\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal override {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 fee = (burnOnTransferFee * amount) / 100;\n\n        _totalSupply = _totalSupply - fee;\n        uint256 senderBalance = _balances[sender];\n        require(\n            senderBalance >= amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount - fee;\n\n        emit Transfer(sender, recipient, amount);\n    }\n}\n"
    },
    "contracts/DAO/LimboDAO.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../ERC677/ERC677.sol\";\nimport \"../Flan.sol\";\nimport \"./ProposalFactory.sol\";\nimport \"../facades/SwapFactoryLike.sol\";\nimport \"../facades/UniPairLike.sol\";\nimport \"./Governable.sol\";\nimport \"hardhat/console.sol\";\n\n/*\nThis is the first MicroDAO associated with MorgothDAO. A MicroDAO manages parameterization of running dapps without having \ncontrol over existential functionality. This is not to say that some of the decisions taken are not critical but that the domain\nof influence is confined to the local Dapp - Limbo in this case.\n*/\n\nlibrary TransferHelper {\n    function ERC20NetTransfer(\n        address token,\n        address from,\n        address to,\n        int256 amount\n    ) public {\n        if (amount > 0) {\n            require(\n                IERC20(token).transferFrom(from, to, uint256(amount)),\n                \"LimboDAO: ERC20 transfer from failed.\"\n            );\n        } else {\n            require(\n                IERC20(token).transfer(from, uint256(amount * (-1))),\n                \"LimboDAO: ERC20 transfer failed.\"\n            );\n        }\n    }\n}\n\nenum FateGrowthStrategy {\n    straight,\n    directRoot,\n    indirectTwoRootEye\n}\n\nenum ProposalDecision {\n    voting,\n    approved,\n    rejected\n}\n\ncontract LimboDAO is Ownable {\n    event daoKilled(address newOwner);\n    event proposalLodged(address proposal, address proposer);\n    event voteCast(address voter, address proposal, int256 fateCast);\n    event assetApproval(address asset, bool appoved);\n    event proposalExecuted(address proposal, bool approved);\n    event assetBurnt(address burner, address asset, uint256 fateCreated);\n\n    using TransferHelper for address;\n    uint256 constant ONE = 1 ether;\n    uint256 precision = 1e9;\n\n    struct DomainConfig {\n        address limbo;\n        address flan;\n        address eye;\n        address fate;\n        bool live;\n        address flashGoverner;\n        address sushiFactory;\n        address uniFactory;\n    }\n\n    struct ProposalConfig {\n        uint256 votingDuration;\n        uint256 requiredFateStake;\n        address proposalFactory; //check this for creating proposals\n    }\n\n    struct ProposalState {\n        int256 fate;\n        ProposalDecision decision;\n        address proposer;\n        uint256 start;\n        Proposal proposal;\n    }\n\n    //rateCrate\n    struct FateState {\n        uint256 fatePerDay;\n        uint256 fateBalance;\n        uint256 lastDamnAdjustment;\n    }\n\n    struct AssetClout {\n        uint256 fateWeight;\n        uint256 balance;\n    }\n\n    DomainConfig public domainConfig;\n    ProposalConfig public proposalConfig;\n    mapping(address => FateGrowthStrategy) public fateGrowthStrategy;\n    mapping(address => bool) public assetApproved;\n    mapping(address => FateState) public fateState; //lateDate\n    mapping(address => mapping(address => AssetClout))\n        public stakedUserAssetWeight; //user->asset->weight\n    ProposalState public currentProposalState;\n    ProposalState public previousProposalState;\n\n    modifier isLive() {\n        require(domainConfig.live, \"LimboDAO: DAO is not live.\");\n        _;\n    }\n\n    function nextProposal() internal {\n        previousProposalState = currentProposalState;\n        currentProposalState.proposal = Proposal(address(0));\n        currentProposalState.fate = 0;\n        currentProposalState.decision = ProposalDecision.voting;\n        currentProposalState.proposer = address(0);\n        currentProposalState.start = 0;\n    }\n\n    modifier onlySuccessfulProposal() {\n        // console.log('onlySuccessfulProposal');\n        require(successfulProposal(msg.sender), \"LimboDAO: approve proposal\");\n        _;\n        //nextProposal();\n    }\n\n    function successfulProposal(address proposal) public view returns (bool) {\n        return\n            currentProposalState.decision == ProposalDecision.approved &&\n            proposal == address(currentProposalState.proposal);\n    }\n\n    modifier updateCurrentProposal() {\n        incrementFateFor(_msgSender());\n        if (address(currentProposalState.proposal) != address(0)) {\n            uint256 durationSinceStart = block.timestamp -\n                currentProposalState.start;\n            if (\n                durationSinceStart >= proposalConfig.votingDuration &&\n                currentProposalState.decision == ProposalDecision.voting\n            ) {\n                if (currentProposalState.fate > 0) {\n                    currentProposalState.decision = ProposalDecision.approved;\n                    currentProposalState.proposal.orchestrateExecute();\n                    fateState[currentProposalState.proposer]\n                        .fateBalance += proposalConfig.requiredFateStake;\n                } else {\n                    currentProposalState.decision = ProposalDecision.rejected;\n                }\n                emit proposalExecuted(\n                    address(currentProposalState.proposal),\n                    currentProposalState.decision == ProposalDecision.approved\n                );\n                nextProposal();\n            }\n        }\n        _;\n    }\n\n    modifier incrementFate() {\n        incrementFateFor(_msgSender());\n        _;\n    }\n\n    function incrementFateFor(address user) public {\n        FateState storage state = fateState[user];\n        state.fateBalance +=\n            (state.fatePerDay * (block.timestamp - state.lastDamnAdjustment)) /\n            (1 days);\n        state.lastDamnAdjustment = block.timestamp;\n    }\n\n    function seed(\n        address limbo,\n        address flan,\n        address eye,\n        address proposalFactory,\n        address sushiFactory,\n        address uniFactory,\n        address flashGoverner,\n        uint256 precisionOrderOfMagnitude,\n        address[] memory sushiLPs,\n        address[] memory uniLPs\n    ) public onlyOwner {\n        _seed(limbo, flan, eye, sushiFactory, uniFactory, flashGoverner);\n        proposalConfig.votingDuration = 2 days;\n        proposalConfig.requiredFateStake = 223 * ONE; //50000 EYE for 24 hours\n        proposalConfig.proposalFactory = proposalFactory;\n        precision = 10**precisionOrderOfMagnitude;\n        for (uint256 i = 0; i < sushiLPs.length; i++) {\n            require(\n                UniPairLike(sushiLPs[i]).factory() == sushiFactory,\n                \"LimboDAO: invalid Sushi LP\"\n            );\n            if (IERC20(eye).balanceOf(sushiLPs[i]) > 1000)\n                assetApproved[sushiLPs[i]] = true;\n            fateGrowthStrategy[sushiLPs[i]] = FateGrowthStrategy\n                .indirectTwoRootEye;\n        }\n        for (uint256 i = 0; i < uniLPs.length; i++) {\n            require(\n                UniPairLike(uniLPs[i]).factory() == uniFactory,\n                \"LimboDAO: invalid Sushi LP\"\n            );\n            if (IERC20(eye).balanceOf(uniLPs[i]) > 1000)\n                assetApproved[uniLPs[i]] = true;\n            fateGrowthStrategy[uniLPs[i]] = FateGrowthStrategy\n                .indirectTwoRootEye;\n        }\n    }\n\n    function killDAO(address newOwner) public onlyOwner isLive {\n        domainConfig.live = false;\n        Governable(domainConfig.flan).setDAO(newOwner);\n        Governable(domainConfig.limbo).setDAO(newOwner);\n        emit daoKilled(newOwner);\n    }\n\n    function makeProposal(address proposal, address proposer)\n        public\n        updateCurrentProposal\n    {\n        address sender = _msgSender();\n        require(\n            sender == proposalConfig.proposalFactory,\n            \"LimboDAO: only Proposal Factory\"\n        );\n        require(\n            address(currentProposalState.proposal) == address(0),\n            \"LimboDAO: active proposal.\"\n        );\n\n        fateState[proposer].fateBalance =\n            fateState[proposer].fateBalance -\n            proposalConfig.requiredFateStake *\n            2;\n        currentProposalState.proposal = Proposal(proposal);\n        currentProposalState.decision = ProposalDecision.voting;\n        currentProposalState.fate = 0;\n        currentProposalState.proposer = proposer;\n        currentProposalState.start = block.timestamp;\n        emit proposalLodged(proposal, proposer);\n    }\n\n    function vote(address proposal, int256 fate) public incrementFate isLive {\n        require(\n            proposal == address(currentProposalState.proposal), //this is just to protect users with out of sync UIs\n            \"LimboDAO: stated proposal does not match current proposal\"\n        );\n        require(\n            currentProposalState.decision == ProposalDecision.voting,\n            \"LimboDAO: voting on proposal closed\"\n        );\n        if (\n            block.timestamp - currentProposalState.start >\n            proposalConfig.votingDuration - 1 hours\n        ) {\n            int256 currentFate = currentProposalState.fate;\n            //check if voting has ended\n            if (\n                block.timestamp - currentProposalState.start >\n                proposalConfig.votingDuration\n            ) {\n                revert(\"LimboDAO: voting for current proposal has ended.\");\n            } else if (\n                //The following if statement checks if the vote is flipped by fate\n                fate * currentFate < 0 && //sign different\n                (fate + currentFate) * fate > 0 //fate flipped current fate onto the same side of zero as fate\n            ) {\n                currentProposalState.start =\n                    currentProposalState.start +\n                    2 hours;\n            }\n        }\n        uint256 cost = fate > 0 ? uint256(fate) : uint256(-fate);\n        fateState[_msgSender()].fateBalance =\n            fateState[_msgSender()].fateBalance -\n            cost;\n\n        currentProposalState.fate += fate;\n        emit voteCast(_msgSender(), proposal, fate);\n    }\n\n    function executeCurrentProposal() public updateCurrentProposal {}\n\n    function setProposalConfig(\n        uint256 votingDuration,\n        uint256 requiredFateStake,\n        address proposalFactory\n    ) public onlySuccessfulProposal {\n        proposalConfig.votingDuration = votingDuration;\n        proposalConfig.requiredFateStake = requiredFateStake;\n        proposalConfig.proposalFactory = proposalFactory;\n    }\n\n    function setApprovedAsset(address asset, bool approved)\n        public\n        onlySuccessfulProposal\n    {\n        assetApproved[asset] = approved;\n        fateGrowthStrategy[asset] = FateGrowthStrategy.indirectTwoRootEye;\n        emit assetApproval(asset, approved);\n    }\n\n    function setEYEBasedAssetStake(\n        uint256 finalAssetBalance,\n        uint256 finalEYEBalance,\n        uint256 rootEYE,\n        address asset\n    ) public isLive incrementFate\n     {\n        require(assetApproved[asset], \"LimboDAO: illegal asset\");\n         address sender = _msgSender();\n        FateGrowthStrategy strategy = fateGrowthStrategy[asset];\n        uint256 rootEYESquared = rootEYE * rootEYE;\n        uint256 rootEYEPlusOneSquared = (rootEYE + 1) * (rootEYE + 1);\n        require(\n            rootEYESquared <= finalEYEBalance &&\n                rootEYEPlusOneSquared > finalEYEBalance,\n            \"LimboDAO: Stake EYE invariant.\"\n        );\n        AssetClout storage clout = stakedUserAssetWeight[sender][asset];\n        fateState[sender].fatePerDay -= clout.fateWeight;\n        uint256 initialBalance = clout.balance;\n        //EYE\n        if (strategy == FateGrowthStrategy.directRoot) {\n            require(\n                finalAssetBalance == finalEYEBalance,\n                \"LimboDAO: staking eye invariant.\"\n            );\n            require(asset == domainConfig.eye);\n\n            clout.fateWeight = rootEYE;\n            clout.balance = finalAssetBalance;\n            fateState[sender].fatePerDay += rootEYE;\n        } else if (strategy == FateGrowthStrategy.indirectTwoRootEye) {\n            //LP\n            clout.fateWeight = 2 * rootEYE;\n            fateState[sender].fatePerDay += clout.fateWeight;\n\n            uint256 actualEyeBalance = IERC20(domainConfig.eye).balanceOf(\n                asset\n            );\n            require(actualEyeBalance > 0, \"LimboDAO: No EYE\");\n            uint256 totalSupply = IERC20(asset).totalSupply();\n            uint256 eyePerUnit = (actualEyeBalance * ONE) / totalSupply;\n            uint256 impliedEye = (eyePerUnit * finalAssetBalance) /\n                (ONE * precision);\n            finalEYEBalance /= precision;\n            require(\n                finalEYEBalance == impliedEye, //precision cap\n                \"LimboDAO: stake invariant check 2.\"\n            );\n            clout.balance = finalAssetBalance;\n        } else {\n            revert(\"LimboDAO: asset growth strategy not accounted for\");\n        }\n        int256 netBalance = int256(finalAssetBalance) - int256(initialBalance);\n        asset.ERC20NetTransfer(sender, address(this), netBalance);\n    }\n\n    function burnAsset(address asset, uint256 amount)\n        public\n        isLive\n        incrementFate\n    {\n        require(assetApproved[asset], \"LimboDAO: illegal asset\");\n        address sender = _msgSender();\n        require(\n            ERC677(asset).transferFrom(sender, address(this), amount),\n            \"LimboDAO: transferFailed\"\n        );\n        uint256 fateCreated = fateState[_msgSender()].fateBalance;\n        if (asset == domainConfig.eye) {\n            fateCreated = amount * 10;\n            ERC677(domainConfig.eye).burn(amount);\n        } else {\n            uint256 actualEyeBalance = IERC20(domainConfig.eye).balanceOf(\n                asset\n            );\n            require(actualEyeBalance > 0, \"LimboDAO: No EYE\");\n            uint256 totalSupply = IERC20(asset).totalSupply();\n            uint256 eyePerUnit = (actualEyeBalance * ONE) / totalSupply;\n            uint256 impliedEye = (eyePerUnit * amount) / ONE;\n            fateCreated = impliedEye * 20;\n        }\n        fateState[_msgSender()].fateBalance += fateCreated;\n        emit assetBurnt(_msgSender(), asset, fateCreated);\n    }\n\n    function approveFlanMintingPower(address minter, bool enabled)\n        public\n        onlySuccessfulProposal\n        isLive\n    {\n        Flan(domainConfig.flan).increaseMintAllowance(\n            minter,\n            enabled ? type(uint256).max : 0\n        );\n    }\n\n    function makeLive() public onlyOwner {\n        require(\n            Governable(domainConfig.limbo).DAO() == address(this) &&\n                Governable(domainConfig.flan).DAO() == address(this),\n            \"LimboDAO: transfer ownership of limbo and flan.\"\n        );\n        domainConfig.live = true;\n    }\n\n    //if the DAO is being dismantled.\n    function transferOwnershipOfThing(address thing, address destination)\n        public\n        onlySuccessfulProposal\n    {\n        Ownable(thing).transferOwnership(destination);\n    }\n\n    function timeRemainingOnProposal() public view returns (uint256) {\n        require(\n            currentProposalState.decision == ProposalDecision.voting,\n            \"LimboDAO: proposal finished.\"\n        );\n        uint256 elapsed = block.timestamp - currentProposalState.start;\n        if (elapsed > proposalConfig.votingDuration) return 0;\n        return proposalConfig.votingDuration - elapsed;\n    }\n\n    function _seed(\n        address limbo,\n        address flan,\n        address eye,\n        address sushiFactory,\n        address uniFactory,\n        address flashGoverner\n    ) internal {\n        domainConfig.limbo = limbo;\n        domainConfig.flan = flan;\n        domainConfig.eye = eye;\n        domainConfig.uniFactory = uniFactory;\n        domainConfig.sushiFactory = sushiFactory;\n        domainConfig.flashGoverner = flashGoverner;\n        assetApproved[eye] = true;\n        fateGrowthStrategy[eye] = FateGrowthStrategy.directRoot;\n    }\n\n    function getFlashGoverner() external view returns (address) {\n        return domainConfig.flashGoverner;\n    }\n}\n"
    },
    "contracts/facades/SwapFactoryLike.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract SwapFactoryLike {\n    mapping(address => mapping(address => address)) public getPair;\n}\n"
    },
    "contracts/testing/realUniswap/test/ERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\nimport '../UniswapV2ERC20.sol';\n\ncontract ERC20 is UniswapV2ERC20 {\n    constructor(uint _totalSupply) public {\n        _mint(msg.sender, _totalSupply);\n    }\n}\n"
    },
    "contracts/testing/realUniswap/RealUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\nimport './interfaces/IUniswapV2Factory.sol';\nimport './RealUniswapV2Pair.sol';\n\ncontract RealUniswapV2Factory is IUniswapV2Factory {\n    address public override feeTo;\n    address public override feeToSetter;\n\n    mapping(address => mapping(address => address)) public override getPair;\n    address[] public override allPairs;\n\n    constructor(address _feeToSetter) {\n        feeToSetter = _feeToSetter;\n    }\n\n    function allPairsLength() external override view returns (uint) {\n        return allPairs.length;\n    }\n\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\n        require(tokenA != tokenB, 'UniswapV2: IDENTICAL_ADDRESSES');\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2: ZERO_ADDRESS');\n        require(getPair[token0][token1] == address(0), 'UniswapV2: PAIR_EXISTS'); // single check is sufficient\n        bytes memory bytecode = type(RealUniswapV2Pair).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n        assembly {\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        IUniswapV2Pair(pair).initialize(token0, token1);\n        getPair[token0][token1] = pair;\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\n        allPairs.push(pair);\n        emit PairCreated(token0, token1, pair, allPairs.length);\n    }\n\n    function setFeeTo(address _feeTo) external override {\n        require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');\n        feeTo = _feeTo;\n    }\n\n    function setFeeToSetter(address _feeToSetter) external override {\n        require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');\n        feeToSetter = _feeToSetter;\n    }\n}\n"
    },
    "contracts/testing/GovernableStub.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../DAO/Governable.sol\";\n\ncontract GovernableStub is Governable {\n    constructor(address dao) Governable(dao) {}\n\n    function userTokenBalance(address token) public view returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/testing/Multicall.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\npragma experimental ABIEncoderV2;\n\n/// @title Multicall - Aggregate results from multiple read-only function calls\n/// @author Michael Elliot <mike@makerdao.com>\n/// @author Joshua Levine <joshua@makerdao.com>\n/// @author Nick Johnson <arachnid@notdot.net>\n\ncontract Multicall {\n    struct Call {\n        address target;\n        bytes callData;\n    }\n    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\n        blockNumber = block.number;\n        returnData = new bytes[](calls.length);\n        for(uint256 i = 0; i < calls.length; i++) {\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\n            require(success);\n            returnData[i] = ret;\n        }\n    }\n    // Helper functions\n    function getEthBalance(address addr) public view returns (uint256 balance) {\n        balance = addr.balance;\n    }\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\n        blockHash = blockhash(blockNumber);\n    }\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\n        blockHash = blockhash(block.number - 1);\n    }\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\n        timestamp = block.timestamp;\n    }\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\n        difficulty = block.difficulty;\n    }\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\n        gaslimit = block.gaslimit;\n    }\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\n        coinbase = block.coinbase;\n    }\n}"
    },
    "contracts/testing/UniswapFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract UniswapFactory {\n    \n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}