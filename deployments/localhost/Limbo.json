{
  "address": "0x4Cfde611c84E2318C01092Ade351479b71164203",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "flan",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "limboDAO",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bonus",
          "type": "uint256"
        }
      ],
      "name": "BonusPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "soul",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimedReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "soul",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fps",
          "type": "uint256"
        }
      ],
      "name": "SoulUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "soul",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scxfln_LP_minted",
          "type": "uint256"
        }
      ],
      "name": "TokenListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "soul",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialCrossingBonus",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "crossingBonusDelta",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "fps",
          "type": "uint256"
        }
      ],
      "name": "adjustSoul",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "desiredAPY",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daiThreshold",
          "type": "uint256"
        }
      ],
      "name": "attemptToTargetAPY",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "claimBonus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "claimSecondaryRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "behodler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "angband",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ammHelper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "morgothPower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "migrationInvocationReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "crossingMigrationDelay",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "rectInflationFactor",
          "type": "uint16"
        }
      ],
      "name": "configureCrossingConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialCrossingBonus",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "crossingBonusDelta",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "burnable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "crossingThreshold",
          "type": "uint256"
        }
      ],
      "name": "configureCrossingParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "crossingThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "soulType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "state",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fps",
          "type": "uint256"
        }
      ],
      "name": "configureSoul",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "configured",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crossingConfig",
      "outputs": [
        {
          "internalType": "address",
          "name": "behodler",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "SCX_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "migrationInvocationReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "crossingMigrationDelay",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "morgothPower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "angband",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ammHelper",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "rectangleOfFairnessInflationFactor",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endConfiguration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "latestIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dao",
          "type": "address"
        }
      ],
      "name": "setDAO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "souls",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accumulatedFlanPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "crossingThreshold",
          "type": "uint256"
        },
        {
          "internalType": "enum SoulType",
          "name": "soulType",
          "type": "uint8"
        },
        {
          "internalType": "enum SoulState",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "flanPerSecond",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenCrossingParameters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakingBeginsTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingEndTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "crossingBonusDelta",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "initialCrossingBonus",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "burnable",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "updateSoul",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "bonusPaid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf4a3570abf62a9ce7bf24b75e4722f68e23ba81b0dff9a11e010d699cbe91570",
  "receipt": {
    "to": null,
    "from": "0xD8d8632Bb8C8b199e43faDf7205749dd34C4B8c9",
    "contractAddress": "0x4Cfde611c84E2318C01092Ade351479b71164203",
    "transactionIndex": 0,
    "gasUsed": "5339812",
    "logsBloom": "0x
    "blockHash": "0x211a8ef5b6472e2f19d53fbdd27e2af870d2ac57405ba82ab6030036d65fc118",
    "transactionHash": "0xf4a3570abf62a9ce7bf24b75e4722f68e23ba81b0dff9a11e010d699cbe91570",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "5339812",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x156E7b05073A8AD3C867b1362bb917696dCCA3f2",
    "0x8c9bd714e2598860E56a4D9E675E717665204442"
  ],
  "solcInputHash": "3b633f60859fc01482cc6a8d04cca0a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"flan\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limboDAO\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"BonusPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"soul\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"soul\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fps\",\"type\":\"uint256\"}],\"name\":\"SoulUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"soul\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scxfln_LP_minted\",\"type\":\"uint256\"}],\"name\":\"TokenListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"soul\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialCrossingBonus\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"crossingBonusDelta\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"fps\",\"type\":\"uint256\"}],\"name\":\"adjustSoul\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"desiredAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daiThreshold\",\"type\":\"uint256\"}],\"name\":\"attemptToTargetAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"claimBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimSecondaryRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"behodler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"angband\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ammHelper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"morgothPower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"migrationInvocationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crossingMigrationDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"rectInflationFactor\",\"type\":\"uint16\"}],\"name\":\"configureCrossingConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialCrossingBonus\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"crossingBonusDelta\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"burnable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"crossingThreshold\",\"type\":\"uint256\"}],\"name\":\"configureCrossingParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"crossingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soulType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fps\",\"type\":\"uint256\"}],\"name\":\"configureSoul\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configured\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossingConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"behodler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"SCX_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"migrationInvocationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crossingMigrationDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"morgothPower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"angband\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ammHelper\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"rectangleOfFairnessInflationFactor\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"}],\"name\":\"setDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"souls\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedFlanPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crossingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"enum SoulType\",\"name\":\"soulType\",\"type\":\"uint8\"},{\"internalType\":\"enum SoulState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"flanPerSecond\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenCrossingParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingBeginsTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"crossingBonusDelta\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"initialCrossingBonus\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burnable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateSoul\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bonusPaid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Limbo.sol\":\"Limbo\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/DAO/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../facades/LimboDAOLike.sol\\\";\\nimport \\\"../facades/FlashGovernanceArbiterLike.sol\\\";\\nimport \\\"../facades/ProposalFactoryLike.sol\\\";\\n\\nabstract contract Governable {\\n    FlashGovernanceArbiterLike internal flashGoverner;\\n    bool public configured;\\n    address public DAO;\\n\\n    function endConfiguration() public {\\n        configured = true;\\n    }\\n\\n    modifier onlySuccessfulProposal() {\\n        assertSuccessfulProposal(msg.sender);\\n        _;\\n    }\\n\\n    modifier onlySoulUpdateProposal(){\\n        assertSoulUpdateProposal(msg.sender);\\n        _;\\n    }\\n\\n    function assertSoulUpdateProposal(address sender) internal view {\\n        (,,address proposalFactory) = LimboDAOLike(DAO).proposalConfig();\\n        require(!configured || sender == ProposalFactoryLike(proposalFactory).soulUpdateProposal(),\\\"EJ\\\");\\n        assertSuccessfulProposal(sender);\\n    }\\n\\n    function _governanceApproved(bool emergency) internal {\\n        bool successfulProposal = LimboDAOLike(DAO).successfulProposal(\\n            msg.sender\\n        );\\n        if (successfulProposal) {\\n            flashGoverner.setEnforcement(false);\\n        } else if (configured)\\n            flashGoverner.assertGovernanceApproved(\\n                msg.sender,\\n                address(this),\\n                emergency\\n            );\\n    }\\n\\n    modifier governanceApproved(bool emergency) {\\n        _governanceApproved(emergency);\\n        _;\\n        flashGoverner.setEnforcement(true);\\n    }\\n\\n    function assertSuccessfulProposal(address sender) internal view {\\n        require(\\n            !configured || LimboDAOLike(DAO).successfulProposal(sender),\\n            \\\"EJ\\\"\\n        );\\n    }\\n\\n    constructor(address dao) {\\n        setDAO(dao);\\n    }\\n\\n    function setDAO(address dao) public {\\n        require(\\n            DAO == address(0) || msg.sender == DAO || !configured,\\n            \\\"EK\\\"\\n        );\\n        DAO = dao;\\n        flashGoverner = FlashGovernanceArbiterLike(\\n            LimboDAOLike(dao).getFlashGoverner()\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xefe9bfcfdb344f577be29b45db74381e271e88b90f1449e65775bccffb278af9\",\"license\":\"MIT\"},\"contracts/Limbo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"./facades/LimboDAOLike.sol\\\";\\nimport \\\"./facades/Burnable.sol\\\";\\nimport \\\"./facades/BehodlerLike.sol\\\";\\nimport \\\"./facades/FlanLike.sol\\\";\\nimport \\\"./facades/UniPairLike.sol\\\";\\nimport \\\"./facades/MigratorLike.sol\\\";\\nimport \\\"./facades/AMMHelper.sol\\\";\\nimport \\\"./facades/AngbandLike.sol\\\";\\nimport \\\"./facades/LimboAddTokenToBehodlerPowerLike.sol\\\";\\nimport \\\"./DAO/Governable.sol\\\";\\n\\n/*\\nLIMBO is the main staking contract. It corresponds conceptually to Sushi's Masterchef and takes design inspiration from Masterchef.\\nTo give a high level overview, each token listed on Limbo is hoping to be listed on Behodler. In order to be listed, it must meet a minimum threshold of liquidity.\\nThis creates a sharp distinction between the lifecycle of a listed token on Limbo vs Onsen which is why we don't just fork and run Masterchef. In particular:\\n1. By definition, tokens listed on Limbo are temporary visitors to the dapp, as the name Limbo implies. An array of tokens is therefore not sustainable\\n2. The migrator does not swap like for like. Instead, when the listing period is over, stakers must be made whole with more flan\\n\\nNomenclature:\\nSince words like token are incredibly generic, we need to provide context through naming.\\nSticking to the overall metaphor, to paraphrase makerdao documentation, reduces code smells.\\n1. A token listed on Limbo is a Soul\\n2. When a token lists on Behodler, we say the soul is crossing over. The event is a crossing.\\n\\nSecurity note: the designers of the crossing event and the payment of locked stakers \\nshould be cognizant of potential flash loan vectors\\n\\nLate stakers considerations:\\nSuppose you're the last person to stake. That is, your stake takes the soul over the crossing threshold and the soul is locked.\\nIn this instance, you would have earned no Flan, creating a declining incentive for stakers to arrive and in the extreme leading\\nto a situation of never crossing the threshold for any soul. This is a tragedy of the commons situation that leads to an overly \\ninflated and essentially worthless Flan. We need a strategy to ameliorate this. The strategy needs to:\\n1. provide sufficient incentive for later arrivals.\\n2. Not punish early stakers and ideally reward them for being early.\\n3. Not disproportionately inflate the supply of flan.\\n\\nIncentives:\\nWhen a soul is staking, the crossover bonus begins growing: Flan per soul.\\nGovernance sets the rate of bonus growth and the target. \\n\\nPhases:\\n1. calibration\\nNo staking/unstaking.\\n2. Staking\\nStaking/unstaking. If type is threshold, take threshold into account\\n3. WaitingToCross\\nCan claim rewards. Can't unstake.\\n4. CrossedOver\\nInjected into Behodler\\n\\nFlash governance:\\nSince there might be many souls staking, we don't want to have to go through long to confirm proposals.\\nInstead, we want to have the opportunity to flash a governance action quickly. What we can do is require\\na stake of EYE. Then the staker can trigger some governance unilaterally but their EYE remains locked for a few days.\\nThe community can then decide if their governance action was in accord with the wellbeing of Limbo.\\nIf it isn't, they can slash the deposit by betwen 1 and 100%. Flash gov can only move a variable some percentage per day.\\nEg. suppose we vote on snapshot to raise the mimimum soul for Sushi to 1200 Sushi from 1180, 1.69%.\\nWe have s maximum of 4% per day. So some flash staker comes along and moves it 3%. They are now \\nelligible to be slashed. If they try to move it 5%, the operations reverts.\\n*/\\nenum SoulState {\\n    calibration,\\n    staking,\\n    waitingToCross,\\n    crossedOver\\n}\\nenum SoulType {\\n    uninitialized,\\n    threshold, //the default soul type is staked and when reaching a threshold, migrates to Behodler\\n    perpetual //the type of staking pool most people are familiar with.\\n}\\n\\n/*\\nError string legend:\\n token not recognized as valid soul.\\t        E1\\n invalid state\\t                                E2\\n unstaking locked\\t                            E3\\n balance exceeded\\t                            E4\\n bonus already claimed.\\t                        E5\\n crossing bonus arithmetic invariant.\\t        E6\\n token accounted for.\\t                        E7\\n burning excess SCX failed.\\t                    E8\\n Invocation reward failed.\\t                    E9\\n only threshold souls can be migrated           EB\\n not enough time between crossing and migration EC\\n bonus must be positive                         ED\\n Unauthorized call                              EE\\n Protocol disabled                              EF\\n Reserve divergence tolerance exceeded          EG\\n not enough time between reserve stamps         EH\\n Minimum APY only applicable to threshold souls EI\\n Governance action failed.                      EJ\\n Access Denied                                  EK\\n*/\\ncontract Limbo is Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event SoulUpdated(address soul, uint256 fps);\\n    event Staked(address staker, address soul, uint256 amount);\\n    event Unstaked(address staker, address soul, uint256 amount);\\n    event TokenListed(address token, uint256 amount, uint256 scxfln_LP_minted);\\n\\n    event ClaimedReward(\\n        address staker,\\n        address soul,\\n        uint256 index,\\n        uint256 amount\\n    );\\n\\n    event BonusPaid(\\n        address token,\\n        uint256 index,\\n        address recipient,\\n        uint256 bonus\\n    );\\n\\n    struct Soul {\\n        uint256 lastRewardTimestamp; //I know masterchef counts by block but this is less reliable than timestamp.\\n        uint256 accumulatedFlanPerShare;\\n        uint256 crossingThreshold; //the value at which this soul is elligible to cross over to Behodler\\n        SoulType soulType;\\n        SoulState state;\\n        uint256 flanPerSecond; // fps: we use a helper function to convert min APY into fps\\n    }\\n\\n    struct CrossingParameters {\\n        uint256 stakingBeginsTimestamp; //to calculate bonus\\n        uint256 stakingEndTimestamp;\\n        int256 crossingBonusDelta; //change in teraFlanPerToken per second\\n        uint256 initialCrossingBonus; //measured in teraflanPerToken\\n        bool burnable;\\n    }\\n\\n    struct CrossingConfig {\\n        address behodler;\\n        uint256 SCX_fee;\\n        uint256 migrationInvocationReward; //calling migrate is expensive. The caller should be rewarded in flan.\\n        uint256 crossingMigrationDelay; // this ensures that if Flan is successfully attacked, governance will have time to lock Limbo and prevent bogus migrations\\n        address morgothPower;\\n        address angband;\\n        address ammHelper;\\n        uint16 rectangleOfFairnessInflationFactor; //0-100: if the community finds the requirement to be too strict, they can inflate how much SCX to hold back\\n    }\\n\\n    struct User {\\n        uint256 stakedAmount;\\n        uint256 rewardDebt;\\n        bool bonusPaid;\\n    }\\n\\n    uint256 constant TERA = 1E12;\\n    uint256 constant SCX_calc = TERA * 10000 * (1 ether); //112 bits added, still leaves plenty room to spare\\n    uint256 constant RectangleOfFairness = 30 ether; //MP = 1/t. Rect = tMP = t(1/t) = 1. 28 is the result of scaling factors on Behodler.\\n    bool protocolEnabled = true;\\n    CrossingConfig public crossingConfig;\\n    mapping(address => mapping(uint256 => Soul)) public souls;\\n    mapping(address => uint256) public latestIndex;\\n    mapping(address => mapping(address => mapping(uint256 => User)))\\n        public userInfo; //tokenAddress->userAddress->soulIndex->Userinfo\\n    mapping(address => mapping(uint256 => CrossingParameters))\\n        public tokenCrossingParameters; //token->index->data\\n\\n    FlanLike Flan;\\n\\n    modifier enabled() {\\n        require(protocolEnabled, \\\"EF\\\");\\n        _;\\n    }\\n\\n    function attemptToTargetAPY(\\n        address token,\\n        uint256 desiredAPY,\\n        uint256 daiThreshold\\n    ) public governanceApproved(false) {\\n        Soul storage soul = currentSoul(token);\\n        require(soul.soulType == SoulType.threshold, \\\"EI\\\");\\n        uint256 fps = AMMHelper(crossingConfig.ammHelper).minAPY_to_FPS(\\n            desiredAPY,\\n            daiThreshold\\n        );\\n        flashGoverner.enforceTolerance(soul.flanPerSecond, fps);\\n        soul.flanPerSecond = fps;\\n    }\\n\\n    function updateSoul(address token) public {\\n        Soul storage s = currentSoul(token);\\n        updateSoul(token, s);\\n    }\\n\\n    function updateSoul(address token, Soul storage soul) internal {\\n        require(soul.soulType != SoulType.uninitialized, \\\"E1\\\");\\n        require(soul.state != SoulState.calibration, \\\"E2\\\");\\n        uint256 finalTimeStamp = block.timestamp;\\n        if (soul.state != SoulState.staking) {\\n            finalTimeStamp = tokenCrossingParameters[token][latestIndex[token]]\\n                .stakingEndTimestamp;\\n        }\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n    \\n        if (balance > 0) {\\n            uint256 flanReward = (finalTimeStamp - soul.lastRewardTimestamp) *\\n                soul.flanPerSecond;\\n   \\n\\n            soul.accumulatedFlanPerShare =\\n                soul.accumulatedFlanPerShare +\\n                ((flanReward * TERA) / balance);\\n        }\\n        soul.lastRewardTimestamp = finalTimeStamp;\\n    }\\n\\n    constructor(address flan, address limboDAO) Governable(limboDAO) {\\n        Flan = FlanLike(flan);\\n    }\\n\\n    function configureCrossingConfig(\\n        address behodler,\\n        address angband,\\n        address ammHelper,\\n        address morgothPower,\\n        uint256 migrationInvocationReward,\\n        uint256 crossingMigrationDelay,\\n        uint16 rectInflationFactor //0 to 100\\n    ) public onlySuccessfulProposal {\\n        crossingConfig.migrationInvocationReward =\\n            migrationInvocationReward *\\n            (1 ether);\\n        crossingConfig.behodler = behodler;\\n        crossingConfig.crossingMigrationDelay = crossingMigrationDelay;\\n        crossingConfig.angband = angband;\\n        crossingConfig.ammHelper = ammHelper;\\n        crossingConfig.morgothPower = morgothPower;\\n        require(rectInflationFactor <= 10000, \\\"E6\\\");\\n        crossingConfig.rectangleOfFairnessInflationFactor = rectInflationFactor;\\n    }\\n\\n    function disableProtocol() public governanceApproved(true) {\\n        protocolEnabled = false;\\n    }\\n\\n    function enableProtocol() public onlySuccessfulProposal {\\n        protocolEnabled = true;\\n    }\\n\\n    function adjustSoul(\\n        address token,\\n        uint256 initialCrossingBonus,\\n        int256 crossingBonusDelta,\\n        uint256 fps\\n    ) public governanceApproved(false) {\\n        Soul storage soul = currentSoul(token);\\n        flashGoverner.enforceTolerance(soul.flanPerSecond, fps);\\n        soul.flanPerSecond = fps;\\n\\n        CrossingParameters storage params = tokenCrossingParameters[token][\\n            latestIndex[token]\\n        ];\\n\\n        flashGoverner.enforceTolerance(\\n            params.initialCrossingBonus,\\n            initialCrossingBonus\\n        );\\n        flashGoverner.enforceTolerance(\\n            uint256(\\n                params.crossingBonusDelta < 0\\n                    ? params.crossingBonusDelta * -1\\n                    : params.crossingBonusDelta\\n            ),\\n            uint256(\\n                crossingBonusDelta < 0\\n                    ? crossingBonusDelta * -1\\n                    : crossingBonusDelta\\n            )\\n        );\\n\\n        params.initialCrossingBonus = initialCrossingBonus;\\n        params.crossingBonusDelta = crossingBonusDelta;\\n    }\\n\\n    /*\\n    Unguarded total access only available to true proposals.\\n    Tread carefully.\\n     */\\n    function configureSoul(\\n        address token,\\n        uint256 crossingThreshold,\\n        uint256 soulType,\\n        uint256 state,\\n        uint256 index,\\n        uint256 fps\\n    ) public onlySoulUpdateProposal {\\n        {\\n            Soul storage soul = currentSoul(token);\\n            latestIndex[token] = index > latestIndex[token]\\n                ? latestIndex[token] + 1\\n                : latestIndex[token];\\n\\n            soul = currentSoul(token);\\n            soul.crossingThreshold = crossingThreshold;\\n            soul.flanPerSecond = fps;\\n            soul.state = SoulState(state);\\n\\n            if (SoulState(state) == SoulState.staking) {\\n                tokenCrossingParameters[token][latestIndex[token]]\\n                    .stakingBeginsTimestamp = block.timestamp;\\n            }\\n            soul.soulType = SoulType(soulType);\\n        }\\n        emit SoulUpdated(token, fps);\\n    }\\n\\n    function configureCrossingParameters(\\n        address token,\\n        uint256 initialCrossingBonus,\\n        int256 crossingBonusDelta,\\n        bool burnable,\\n        uint256 crossingThreshold\\n    ) public governanceApproved(false) {\\n        CrossingParameters storage params = tokenCrossingParameters[token][\\n            latestIndex[token]\\n        ];\\n        flashGoverner.enforceTolerance(\\n            initialCrossingBonus,\\n            params.initialCrossingBonus\\n        );\\n        flashGoverner.enforceToleranceInt(\\n            crossingBonusDelta,\\n            params.crossingBonusDelta\\n        );\\n\\n        tokenCrossingParameters[token][latestIndex[token]]\\n            .initialCrossingBonus = initialCrossingBonus;\\n        tokenCrossingParameters[token][latestIndex[token]]\\n            .crossingBonusDelta = crossingBonusDelta;\\n        tokenCrossingParameters[token][latestIndex[token]].burnable = burnable;\\n\\n        Soul storage soul = currentSoul(token);\\n        flashGoverner.enforceTolerance(\\n            crossingThreshold,\\n            soul.crossingThreshold\\n        );\\n        currentSoul(token).crossingThreshold = crossingThreshold;\\n    }\\n\\n    function stake(address token, uint256 amount) public enabled {\\n        Soul storage soul = currentSoul(token);\\n        updateSoul(token, soul);\\n        require(soul.state == SoulState.staking, \\\"E2\\\");\\n        uint256 currentIndex = latestIndex[token];\\n        User storage user = userInfo[token][msg.sender][currentIndex];\\n\\n        if (amount > 0) {\\n            //dish out accumulated rewards.\\n            uint256 pending = getPending(user, soul);\\n            if (pending > 0) {\\n                Flan.mint(msg.sender, pending);\\n            }\\n\\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n            user.stakedAmount = user.stakedAmount + amount;\\n            uint256 newBalance = IERC20(token).balanceOf(address(this));\\n\\n            if (\\n                soul.soulType == SoulType.threshold &&\\n                newBalance > soul.crossingThreshold\\n            ) {\\n                soul.state = SoulState.waitingToCross;\\n                tokenCrossingParameters[token][latestIndex[token]]\\n                    .stakingEndTimestamp = block.timestamp;\\n            }\\n        }\\n\\n        user.rewardDebt =\\n            (user.stakedAmount * soul.accumulatedFlanPerShare) /\\n            TERA;\\n        emit Staked(msg.sender, token, amount);\\n    }\\n\\n    function unstake(address token, uint256 amount) public enabled {\\n        Soul storage soul = currentSoul(token);\\n        updateSoul(token, soul);\\n        require(soul.state == SoulState.staking, \\\"E2\\\");\\n        User storage user = userInfo[token][msg.sender][latestIndex[token]];\\n        require(user.stakedAmount >= amount, \\\"E4\\\");\\n\\n        uint256 pending = getPending(user, soul);\\n\\n        if (pending > 0) {\\n            rewardAdjustDebt(\\n                msg.sender,\\n                pending,\\n                soul.accumulatedFlanPerShare,\\n                user\\n            );\\n\\n            if (amount > 0) {\\n                user.stakedAmount = user.stakedAmount - amount;\\n                IERC20(token).safeTransfer(address(msg.sender), amount);\\n            }\\n            emit Unstaked(msg.sender, token, amount);\\n        }\\n    }\\n\\n    function claimReward(address token, uint256 index) public enabled {\\n        Soul storage soul = souls[token][index];\\n        updateSoul(token, soul);\\n        User storage user = userInfo[token][msg.sender][index];\\n\\n        uint256 pending = getPending(user, soul);\\n\\n        if (pending > 0) {\\n            rewardAdjustDebt(\\n                msg.sender,\\n                pending,\\n                soul.accumulatedFlanPerShare,\\n                user\\n            );\\n            emit ClaimedReward(msg.sender, token, index, pending);\\n        }\\n    }\\n\\n    function rewardAdjustDebt(\\n        address recipient,\\n        uint256 pending,\\n        uint256 accumulatedFlanPerShare,\\n        User storage user\\n    ) internal {\\n        Flan.mint(recipient, pending);\\n        user.rewardDebt = (user.stakedAmount * accumulatedFlanPerShare) / TERA;\\n    }\\n\\n    function claimBonus(address token, uint256 index) public enabled {\\n        Soul storage soul = souls[token][index];\\n        CrossingParameters storage crossing = tokenCrossingParameters[token][\\n            index\\n        ];\\n        require(\\n            soul.state == SoulState.crossedOver ||\\n                soul.state == SoulState.waitingToCross,\\n            \\\"E2\\\"\\n        );\\n\\n        User storage user = userInfo[token][msg.sender][index];\\n        require(!user.bonusPaid, \\\"E5\\\");\\n        user.bonusPaid = true;\\n        int256 accumulatedFlanPerTeraToken = crossing.crossingBonusDelta *\\n            int256(\\n                crossing.stakingEndTimestamp - crossing.stakingBeginsTimestamp\\n            );\\n\\n        //assert signs are the same\\n        require(\\n            accumulatedFlanPerTeraToken * crossing.crossingBonusDelta >= 0,\\n            \\\"E6\\\"\\n        );\\n\\n        int256 finalFlanPerTeraToken = int256(crossing.initialCrossingBonus) +\\n            accumulatedFlanPerTeraToken;\\n\\n        uint256 flanBonus = 0;\\n        require(finalFlanPerTeraToken > 0, \\\"ED\\\");\\n\\n        flanBonus =\\n            uint256((int256(user.stakedAmount) * finalFlanPerTeraToken)) /\\n            TERA;\\n        Flan.mint(msg.sender, flanBonus);\\n\\n        emit BonusPaid(token, index, msg.sender, flanBonus);\\n    }\\n\\n    //reward user for calling with percentage. require no active or waiting souls for withdrawal\\n    // We don't want airdrops, rebased growth or pooltogether winnings to be stuck in Limbo\\n    function claimSecondaryRewards(address token) public {\\n        SoulState state = currentSoul(token).state;\\n        require(\\n            state == SoulState.calibration || state == SoulState.crossedOver,\\n            \\\"E7\\\"\\n        );\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        IERC20(token).transfer(crossingConfig.ammHelper, balance);\\n        AMMHelper(crossingConfig.ammHelper).buyFlanAndBurn(\\n            token,\\n            balance,\\n            msg.sender\\n        );\\n    }\\n\\n    function currentSoul(address token) internal view returns (Soul storage) {\\n        return souls[token][latestIndex[token]];\\n    }\\n\\n    //anyone can call migrate for a soul ready to be migrated\\n    //callers will be rewarded with flan to compensate gas\\n    function migrate(address token) public enabled {\\n        Soul storage soul = currentSoul(token);\\n        require(soul.soulType == SoulType.threshold, \\\"EB\\\");\\n        require(soul.state == SoulState.waitingToCross, \\\"E2\\\");\\n        require(\\n            block.timestamp -\\n                tokenCrossingParameters[token][latestIndex[token]]\\n                    .stakingEndTimestamp >\\n                crossingConfig.crossingMigrationDelay,\\n            \\\"EC\\\"\\n        );\\n\\n        LimboAddTokenToBehodlerPowerLike(crossingConfig.morgothPower)\\n            .parameterize(\\n                token,\\n                tokenCrossingParameters[token][latestIndex[token]].burnable\\n            );\\n\\n        //invoke Angband execute on power that migrates token type to Behodler\\n        uint256 tokenBalance = IERC20(token).balanceOf(address(this));\\n        IERC20(token).transfer(\\n            address(crossingConfig.morgothPower),\\n            tokenBalance\\n        );\\n        AngbandLike(crossingConfig.angband).executePower(\\n            address(crossingConfig.morgothPower)\\n        );\\n\\n        uint256 scxMinted = IERC20(address(crossingConfig.behodler)).balanceOf(\\n            address(this)\\n        );\\n\\n        uint256 adjustedRectangle = ((\\n            crossingConfig.rectangleOfFairnessInflationFactor\\n        ) * RectangleOfFairness) / 100;\\n\\n        //for top up or exotic high value migrations.\\n        if (scxMinted <= adjustedRectangle) {\\n            adjustedRectangle = scxMinted / 2;\\n        }\\n\\n        //burn SCX - rectangle\\n        uint256 excessSCX = scxMinted - adjustedRectangle;\\n        require(BehodlerLike(crossingConfig.behodler).burn(excessSCX), \\\"E8\\\");\\n\\n        //use remaining scx to buy flan and pool it on an external AMM\\n        IERC20(crossingConfig.behodler).transfer(\\n            crossingConfig.ammHelper,\\n            adjustedRectangle\\n        );\\n        uint256 lpMinted = AMMHelper(crossingConfig.ammHelper).stabilizeFlan(\\n            adjustedRectangle\\n        );\\n\\n        emit TokenListed(token, tokenBalance, lpMinted);\\n\\n        //reward caller and update soul state\\n        require(\\n            Flan.mint(msg.sender, crossingConfig.migrationInvocationReward),\\n            \\\"E9\\\"\\n        );\\n        currentSoul(token).state = SoulState.crossedOver;\\n    }\\n\\n    function getPending(User memory user, Soul memory soul)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            ((user.stakedAmount * soul.accumulatedFlanPerShare) / TERA) -\\n            user.rewardDebt;\\n    }\\n}\\n\",\"keccak256\":\"0x8f010e42ab87c8969b0192acc450f8c149a8cd74b1e6a29fe7e0a792001d05c6\",\"license\":\"MIT\"},\"contracts/facades/AMMHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract AMMHelper {\\n    function stabilizeFlan(uint256 rectangleOfFairness)\\n        public\\n        virtual\\n        returns (uint256 lpMinted);\\n\\n    function generateFLNQuote() public virtual;\\n\\n    function minAPY_to_FPS(uint256 minAPY, uint256 daiThreshold)\\n        public\\n        view\\n        virtual\\n        returns (uint256 fps);\\n\\n    function buyFlanAndBurn(\\n        address inputToken,\\n        uint256 amount,\\n        address recipient\\n    ) public virtual;\\n}\\n\",\"keccak256\":\"0x472e2fca8db1731fed3948f6b631b9428e9fe31e3749115ef9edf25ec6e0026d\",\"license\":\"MIT\"},\"contracts/facades/AngbandLike.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract AngbandLike {\\n      function executePower(address powerInvoker)   public virtual;\\n}\",\"keccak256\":\"0x950addd5de6ec8c128a72086dfec61cbe404d5fd63a2d455063035f1b622c5ca\",\"license\":\"MIT\"},\"contracts/facades/BehodlerLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract BehodlerLike {\\n    function withdrawLiquidityFindSCX(\\n        address outputToken,\\n        uint256 tokensToRelease,\\n        uint256 scx,\\n        uint256 passes\\n    ) external view virtual returns (uint256);\\n\\n    function burn(uint256 value) public virtual returns (bool);\\n\\n    function config()\\n        public\\n        virtual\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            address\\n        );\\n\\n    function transfer(address dest, uint256 amount)\\n        external\\n        virtual\\n        returns (bool);\\n\\n    function totalSupply () external virtual returns (uint);\\n}\\n\",\"keccak256\":\"0xbe75d0165e5a390e3d934afdcffdc7a259586faf6c23ac3442381a87107af70f\",\"license\":\"MIT\"},\"contracts/facades/Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nabstract contract Burnable {\\n    function burn (uint amount) public virtual;\\n}\\n\",\"keccak256\":\"0x5019229a1db1a0cf9c9f82a8498524e044d57144f666bce99eaf827dda5c2848\",\"license\":\"MIT\"},\"contracts/facades/FlanLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract FlanLike is IERC20 {\\n    function mint(address recipient, uint256 amount)\\n        public\\n        virtual\\n        returns (bool);\\n\\n    function setBurnOnTransferFee(uint8 fee) public virtual;\\n\\n    function burn(uint256 amount) public virtual returns (bool); \\n}\\n\",\"keccak256\":\"0xf82fa7f960ebf176a80e07239d77dbfda93741ef7d14e48bebe8def49c5a0110\",\"license\":\"MIT\"},\"contracts/facades/FlashGovernanceArbiterLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract FlashGovernanceArbiterLike {\\n    function assertGovernanceApproved(address sender, address target, bool emergency)\\n        public\\n        virtual;\\n\\n    function enforceToleranceInt(int256 v1, int256 v2) public view virtual;\\n\\n    function enforceTolerance(uint256 v1, uint256 v2) public view virtual;\\n\\n    function burnFlashGovernanceAsset(\\n        address targetContract,\\n        address user,\\n        address asset,\\n        uint256 amount\\n    ) public virtual;\\n\\n     function setEnforcement(bool enforce) public virtual;\\n}\\n\",\"keccak256\":\"0x075201e18136944b3d1047edf9fc868acfbb63be95f8ede423e3253aa2d46712\",\"license\":\"MIT\"},\"contracts/facades/LimboAddTokenToBehodlerPowerLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract LimboAddTokenToBehodlerPowerLike {\\n    function parameterize(address soul, bool burnable) public virtual;\\n}\\n\\n\",\"keccak256\":\"0xf0671be25664595117b71d727bbc8a75e3b2ba9e29bc0b43882aaf95a4536256\",\"license\":\"MIT\"},\"contracts/facades/LimboDAOLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract LimboDAOLike {\\n    function approveFlanMintingPower(address minter, bool enabled)\\n        public\\n        virtual;\\n\\n    function makeProposal(address proposal, address proposer) public virtual;\\n\\n    function currentProposalState() public view virtual returns (uint,uint,address,uint,address);\\n\\n    function setProposalConfig(\\n        uint256 votingDuration,\\n        uint256 requiredFateStake,\\n        address proposalFactory\\n    ) public virtual;\\n\\n    function setApprovedAsset(address asset, bool approved) public virtual;\\n\\n    function successfulProposal(address proposal)\\n        public\\n        view\\n        virtual\\n        returns (bool);\\n\\n    function domainConfig()\\n        public\\n        virtual\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool,\\n            address,\\n            address\\n        );\\n\\n    function getFlashGoverner() external view virtual returns (address);\\n\\n    function proposalConfig() public virtual view returns (uint,uint,address);\\n}\\n\",\"keccak256\":\"0x8fb9ac064c3210e09b61cf5e28a8a7aaff41d406bad26458a7b37bc77d16cc77\",\"license\":\"MIT\"},\"contracts/facades/MigratorLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract MigratorLike {\\n    function execute(\\n        address token,\\n        bool burnable,\\n        uint256 flanQuoteDivergenceTolerance,\\n        uint256 minQuoteWaitDuration\\n    ) public virtual;\\n}\",\"keccak256\":\"0x18b37f84927a0fb7d091079f20a73b8daf612a17b28941964953c7bc95cf7d9f\",\"license\":\"MIT\"},\"contracts/facades/ProposalFactoryLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ProposalFactoryLike {\\n     function toggleWhitelistProposal(address proposal) public virtual;\\n     function soulUpdateProposal () public  virtual view returns (address); \\n}\",\"keccak256\":\"0xeba46d344881a1bcc49c0afbd592f66629fc63529ba5679a8a4d9051e3b2a62c\",\"license\":\"MIT\"},\"contracts/facades/UniPairLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract UniPairLike {\\n    function factory() public view virtual returns (address);\\n\\n    function getReserves()\\n        public\\n        view\\n        virtual\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        );\\n\\n    function mint(address to) external virtual returns (uint256 liquidity);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external virtual;\\n\\n    function totalSupply() external virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x487ff3049826d5ad048789a0604e3fb3c01f77186f9f1188e7c34bc764160e9d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c80638772a23a116100c3578063c12cbe861161007c578063c12cbe8614610359578063c2a672e01461038e578063ce5494bb146103aa578063d4a4bdee146103c6578063e73a914c146103e2578063ebaf1549146103fe5761014d565b80638772a23a146102ad5780638e4a0d19146102cb57806391084d6b146102e757806398fabd3a14610303578063995dd38614610321578063adc9772e1461033d5761014d565b806325c2c3891161011557806325c2c38914610208578063478fa6291461023c5780636314736c146102465780636d0e9971146102625780636dc84efd1461026c5780637358a764146102885761014d565b8063057e9b96146101525780630fa8beb31461018257806315a13a3f1461019e578063174e31c4146101d05780631db969dd146101ec575b600080fd5b61016c60048036038101906101679190614a25565b610408565b60405161017991906158a0565b60405180910390f35b61019c60048036038101906101979190614b64565b610420565b005b6101b860048036038101906101b39190614b15565b610951565b6040516101c7939291906158e4565b60405180910390f35b6101ea60048036038101906101e59190614b64565b6109a2565b005b61020660048036038101906102019190614a25565b610cc7565b005b610222600480360381019061021d9190614b64565b610feb565b60405161023395949392919061591b565b60405180910390f35b61024461103b565b005b610260600480360381019061025b9190614a25565b611058565b005b61026a611073565b005b61028660048036038101906102819190614a77565b611128565b005b6102906112d9565b6040516102a498979695949392919061557c565b60405180910390f35b6102b561139d565b6040516102c291906155fa565b60405180910390f35b6102e560048036038101906102e09190614c7a565b6113b0565b005b61030160048036038101906102fc9190614ba0565b61166c565b005b61030b611b43565b60405161031891906153a9565b60405180910390f35b61033b60048036038101906103369190614c17565b611b69565b005b61035760048036038101906103529190614b64565b611eed565b005b610373600480360381019061036e9190614b64565b6125ff565b6040516103859695949392919061596e565b60405180910390f35b6103a860048036038101906103a39190614b64565b612662565b005b6103c460048036038101906103bf9190614a25565b612ad5565b005b6103e060048036038101906103db9190614cc9565b6135e4565b005b6103fc60048036038101906103f79190614a25565b6139d1565b005b610406613bd3565b005b600a6020528060005260406000206000915090505481565b600160149054906101000a900460ff1661046f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046690615860565b60405180910390fd5b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002090506000600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000209050600380811115610550577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260030160019054906101000a900460ff16600381111561059a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14806106275750600260038111156105db577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260030160019054906101000a900460ff166003811115610625577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b145b610666576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065d906156a0565b60405180910390fd5b6000600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002090508060020160009054906101000a900460ff1615610749576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074090615680565b60405180910390fd5b60018160020160006101000a81548160ff02191690831515021790555060008260000154836001015461077c9190615c8d565b836002015461078b9190615b1c565b9050600083600201548261079f9190615b1c565b12156107e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d7906156e0565b60405180910390fd5b60008184600301546107f29190615a01565b90506000808213610838576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082f90615660565b60405180910390fd5b64e8d4a5100082856000015461084e9190615b1c565b6108589190615aeb565b9050600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b81526004016108b79291906154a0565b602060405180830381600087803b1580156108d157600080fd5b505af11580156108e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109099190614d52565b507f2e6a1e085447ae0bd3bb86ec4d6cdf0c9ebb5f8acb821852a2db9bf6bce1904e8888338460405161093f9493929190615500565b60405180910390a15050505050505050565b600b60205282600052604060002060205281600052604060002060205280600052604060002060009250925050508060000154908060010154908060020160009054906101000a900460ff16905083565b600160149054906101000a900460ff166109f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e890615860565b60405180910390fd5b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000209050610a4f8382613bf8565b6000600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002090506000610c678260405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff161515151581525050846040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff166002811115610b95577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811115610bcd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016003820160019054906101000a900460ff166003811115610c1c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811115610c54577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001600482015481525050613fa3565b90506000811115610cc057610c823382856001015485613fe0565b7fd3208fd5300db64b97bc442f47ade72b7ebcd9272aaecdcc04c777bb762861b933868684604051610cb79493929190615432565b60405180910390a15b5050505050565b6000610cd2826140be565b60030160019054906101000a900460ff16905060006003811115610d1f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816003811115610d58577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1480610dd35750600380811115610d98577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816003811115610dd1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b145b610e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0990615760565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e4d91906153a9565b60206040518083038186803b158015610e6557600080fd5b505afa158015610e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9d9190614d7b565b90508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600260060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610eff9291906154a0565b602060405180830381600087803b158015610f1957600080fd5b505af1158015610f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f519190614d52565b50600260060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b8de7158483336040518463ffffffff1660e01b8152600401610fb4939291906154c9565b600060405180830381600087803b158015610fce57600080fd5b505af1158015610fe2573d6000803e3d6000fd5b50505050505050565b600c602052816000526040600020602052806000526040600020600091509150508060000154908060010154908060020154908060030154908060040160009054906101000a900460ff16905085565b6001600060146101000a81548160ff021916908315150217905550565b6000611063826140be565b905061106f8282613bf8565b5050565b600161107e81614156565b6000600160146101000a81548160ff02191690831515021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad64d6cb60016040518263ffffffff1660e01b81526004016110f391906155fa565b600060405180830381600087803b15801561110d57600080fd5b505af1158015611121573d6000803e3d6000fd5b5050505050565b61113133614346565b670de0b6b3a7640000836111459190615c33565b600280018190555086600260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160026003018190555085600260050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600260060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506127108161ffff1611156112b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a7906156e0565b60405180910390fd5b80600260060160146101000a81548161ffff021916908361ffff16021790555050505050505050565b60028060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060160149054906101000a900461ffff16905088565b600060149054906101000a900460ff1681565b60006113bb81614156565b60006113c6856140be565b905060016002811115611402577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160030160009054906101000a900460ff16600281111561144c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1461148c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148390615840565b60405180910390fd5b6000600260060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663421e5b4886866040518363ffffffff1660e01b81526004016114ee9291906158bb565b60206040518083038186803b15801561150657600080fd5b505afa15801561151a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153e9190614d7b565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634739a2ba8360040154836040518363ffffffff1660e01b815260040161159f9291906158bb565b60006040518083038186803b1580156115b757600080fd5b505afa1580156115cb573d6000803e3d6000fd5b50505050808260040181905550505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad64d6cb60016040518263ffffffff1660e01b815260040161163491906155fa565b600060405180830381600087803b15801561164e57600080fd5b505af1158015611662573d6000803e3d6000fd5b5050505050505050565b600061167781614156565b6000600c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600a60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548152602001908152602001600020905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634739a2ba8783600301546040518363ffffffff1660e01b81526004016117699291906158bb565b60006040518083038186803b15801561178157600080fd5b505afa158015611795573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633850ed1e8683600201546040518363ffffffff1660e01b81526004016117f8929190615615565b60006040518083038186803b15801561181057600080fd5b505afa158015611824573d6000803e3d6000fd5b5050505085600c60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600a60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481526020019081526020016000206003018190555084600c60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600a60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481526020019081526020016000206002018190555083600c60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600a60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002060040160006101000a81548160ff0219169083151502179055506000611a0b886140be565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634739a2ba8583600201546040518363ffffffff1660e01b8152600401611a6c9291906158bb565b60006040518083038186803b158015611a8457600080fd5b505afa158015611a98573d6000803e3d6000fd5b5050505083611aa6896140be565b60020181905550505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad64d6cb60016040518263ffffffff1660e01b8152600401611b0991906155fa565b600060405180830381600087803b158015611b2357600080fd5b505af1158015611b37573d6000803e3d6000fd5b50505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611b7481614156565b6000611b7f866140be565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634739a2ba8260040154856040518363ffffffff1660e01b8152600401611be09291906158bb565b60006040518083038186803b158015611bf857600080fd5b505afa158015611c0c573d6000803e3d6000fd5b505050508281600401819055506000600c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600a60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548152602001908152602001600020905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634739a2ba8260030154886040518363ffffffff1660e01b8152600401611d0b9291906158bb565b60006040518083038186803b158015611d2357600080fd5b505afa158015611d37573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634739a2ba6000836002015412611d8d578260020154611dbe565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360020154611dbd9190615b1c565b5b60008812611dcc5787611df9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff88611df89190615b1c565b5b6040518363ffffffff1660e01b8152600401611e169291906158bb565b60006040518083038186803b158015611e2e57600080fd5b505afa158015611e42573d6000803e3d6000fd5b50505050858160030181905550848160020181905550505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad64d6cb60016040518263ffffffff1660e01b8152600401611eb491906155fa565b600060405180830381600087803b158015611ece57600080fd5b505af1158015611ee2573d6000803e3d6000fd5b505050505050505050565b600160149054906101000a900460ff16611f3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3390615860565b60405180910390fd5b6000611f47836140be565b9050611f538382613bf8565b60016003811115611f8d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160030160019054906101000a900460ff166003811115611fd7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14612017576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200e906156a0565b60405180910390fd5b6000600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000209050600084111561259157600061227c8260405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff161515151581525050856040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1660028111156121aa577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028111156121e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016003820160019054906101000a900460ff166003811115612231577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811115612269577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001600482015481525050613fa3565b9050600081111561233857600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b81526004016122e49291906154a0565b602060405180830381600087803b1580156122fe57600080fd5b505af1158015612312573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123369190614d52565b505b6123653330878973ffffffffffffffffffffffffffffffffffffffff1661444b909392919063ffffffff16565b8482600001546123759190615a95565b826000018190555060008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016123b891906153a9565b60206040518083038186803b1580156123d057600080fd5b505afa1580156123e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124089190614d7b565b905060016002811115612444577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8560030160009054906101000a900460ff16600281111561248e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14801561249e5750846002015481115b1561258e5760028560030160016101000a81548160ff021916908360038111156124f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555042600c60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600a60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548152602001908152602001600020600101819055505b50505b64e8d4a51000836001015482600001546125ab9190615c33565b6125b59190615aeb565b81600101819055507f5dac0c1b1112564a045ba943c9d50270893e8e826c49be8e7073adc713ab7bd73386866040516125f0939291906153fb565b60405180910390a15050505050565b6009602052816000526040600020602052806000526040600020600091509150508060000154908060010154908060020154908060030160009054906101000a900460ff16908060030160019054906101000a900460ff16908060040154905086565b600160149054906101000a900460ff166126b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126a890615860565b60405180910390fd5b60006126bc836140be565b90506126c88382613bf8565b60016003811115612702577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160030160019054906101000a900460ff16600381111561274c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1461278c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612783906156a0565b60405180910390fd5b6000600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548152602001908152602001600020905082816000015410156128a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161289a90615800565b60405180910390fd5b6000612a2a8260405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff161515151581525050846040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff166002811115612958577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811115612990577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016003820160019054906101000a900460ff1660038111156129df577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811115612a17577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001600482015481525050613fa3565b90506000811115612ace57612a453382856001015485613fe0565b6000841115612a9257838260000154612a5e9190615c8d565b8260000181905550612a9133858773ffffffffffffffffffffffffffffffffffffffff166144d49092919063ffffffff16565b5b7fd8654fcc8cf5b36d30b3f5e4688fc78118e6d68de60b9994e09902268b57c3e3338686604051612ac5939291906153fb565b60405180910390a15b5050505050565b600160149054906101000a900460ff16612b24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b1b90615860565b60405180910390fd5b6000612b2f826140be565b905060016002811115612b6b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160030160009054906101000a900460ff166002811115612bb5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14612bf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bec906157c0565b60405180910390fd5b60026003811115612c2f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160030160019054906101000a900460ff166003811115612c79577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14612cb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cb0906156a0565b60405180910390fd5b600260030154600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481526020019081526020016000206001015442612d5d9190615c8d565b11612d9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d9490615820565b60405180910390fd5b600260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166314c6fd2883600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002060040160009054906101000a900460ff166040518363ffffffff1660e01b8152600401612e9c929190615477565b600060405180830381600087803b158015612eb657600080fd5b505af1158015612eca573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612f0991906153a9565b60206040518083038186803b158015612f2157600080fd5b505afa158015612f35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f599190614d7b565b90508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401612fbb9291906154a0565b602060405180830381600087803b158015612fd557600080fd5b505af1158015612fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061300d9190614d52565b50600260050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ede0b3b5600260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b815260040161309191906153a9565b600060405180830381600087803b1580156130ab57600080fd5b505af11580156130bf573d6000803e3d6000fd5b505050506000600260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161312391906153a9565b60206040518083038186803b15801561313b57600080fd5b505afa15801561314f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131739190614d7b565b9050600060646801a055690d9db80000600260060160149054906101000a900461ffff1661ffff166131a59190615c33565b6131af9190615aeb565b90508082116131c8576002826131c59190615aeb565b90505b600081836131d69190615c8d565b9050600260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68826040518263ffffffff1660e01b815260040161323691906158a0565b602060405180830381600087803b15801561325057600080fd5b505af1158015613264573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132889190614d52565b6132c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132be90615740565b60405180910390fd5b600260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600260060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b815260040161334c9291906154a0565b602060405180830381600087803b15801561336657600080fd5b505af115801561337a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061339e9190614d52565b506000600260060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633626339f846040518263ffffffff1660e01b81526004016133ff91906158a0565b602060405180830381600087803b15801561341957600080fd5b505af115801561342d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134519190614d7b565b90507f5dc96537cbae524775a674b6a810d9a1ba04a9e279f172d156b352151394677a87868360405161348693929190615545565b60405180910390a1600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f193360028001546040518363ffffffff1660e01b81526004016134ef9291906154a0565b602060405180830381600087803b15801561350957600080fd5b505af115801561351d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135419190614d52565b613580576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613577906156c0565b60405180910390fd5b600361358b886140be565b60030160016101000a81548160ff021916908360038111156135d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555050505050505050565b6135ed3361455a565b60006135f8876140be565b9050600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831161368557600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546136d2565b6001600a60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546136d19190615a95565b5b600a60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061371e876140be565b905085816002018190555081816004018190555083600381111561376b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160030160016101000a81548160ff021916908360038111156137b7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550600160038111156137f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b84600381111561382f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811115613867577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156139055742600c60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600a60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548152602001908152602001600020600001819055505b84600281111561393e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160030160006101000a81548160ff0219169083600281111561398a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550507fd34a348d268737f5e75afa7c7fc24fc2f9f735a327855f1470134f75ead7d6c986826040516139c19291906154a0565b60405180910390a1505050505050565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480613a7b5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80613a935750600060149054906101000a900460ff16155b613ad2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ac990615720565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16632317beae6040518163ffffffff1660e01b815260040160206040518083038186803b158015613b5957600080fd5b505afa158015613b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b919190614a4e565b6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b613bdc33614346565b60018060146101000a81548160ff021916908315150217905550565b60006002811115613c32577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160030160009054906101000a900460ff166002811115613c7c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613cbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613cb490615780565b60405180910390fd5b60006003811115613cf7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160030160019054906101000a900460ff166003811115613d41577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613d82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d79906156a0565b60405180910390fd5b600042905060016003811115613dc1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260030160019054906101000a900460ff166003811115613e0b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14613ea657600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481526020019081526020016000206001015490505b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401613ee191906153a9565b60206040518083038186803b158015613ef957600080fd5b505afa158015613f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f319190614d7b565b90506000811115613f945760008360040154846000015484613f539190615c8d565b613f5d9190615c33565b90508164e8d4a5100082613f719190615c33565b613f7b9190615aeb565b8460010154613f8a9190615a95565b8460010181905550505b81836000018190555050505050565b6000826020015164e8d4a5100083602001518560000151613fc49190615c33565b613fce9190615aeb565b613fd89190615c8d565b905092915050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1985856040518363ffffffff1660e01b815260040161403d9291906154a0565b602060405180830381600087803b15801561405757600080fd5b505af115801561406b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061408f9190614d52565b5064e8d4a510008282600001546140a69190615c33565b6140b09190615aeb565b816001018190555050505050565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481526020019081526020016000209050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b7ebc23b336040518263ffffffff1660e01b81526004016141b391906153a9565b60206040518083038186803b1580156141cb57600080fd5b505afa1580156141df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142039190614d52565b9050801561429c5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad64d6cb60006040518263ffffffff1660e01b815260040161426591906155fa565b600060405180830381600087803b15801561427f57600080fd5b505af1158015614293573d6000803e3d6000fd5b50505050614342565b600060149054906101000a900460ff16156143415760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398f112413330856040518463ffffffff1660e01b815260040161430e939291906153c4565b600060405180830381600087803b15801561432857600080fd5b505af115801561433c573d6000803e3d6000fd5b505050505b5b5050565b600060149054906101000a900460ff1615806144095750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b7ebc23b826040518263ffffffff1660e01b81526004016143b891906153a9565b60206040518083038186803b1580156143d057600080fd5b505afa1580156143e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144089190614d52565b5b614448576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161443f906157a0565b60405180910390fd5b50565b6144ce846323b872dd60e01b85858560405160240161446c939291906153fb565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614710565b50505050565b6145558363a9059cbb60e01b84846040516024016144f39291906154a0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614710565b505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301e179dc6040518163ffffffff1660e01b815260040160606040518083038186803b1580156145c457600080fd5b505afa1580156145d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145fc9190614da4565b92505050600060149054906101000a900460ff1615806146c457508073ffffffffffffffffffffffffffffffffffffffff166331de34696040518163ffffffff1660e01b815260040160206040518083038186803b15801561465d57600080fd5b505afa158015614671573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146959190614a4e565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b614703576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016146fa906157a0565b60405180910390fd5b61470c82614346565b5050565b6000614772826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166147d79092919063ffffffff16565b90506000815111156147d257808060200190518101906147929190614d52565b6147d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016147c890615880565b60405180910390fd5b5b505050565b60606147e684846000856147ef565b90509392505050565b606082471015614834576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161482b90615700565b60405180910390fd5b61483d85614903565b61487c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614873906157e0565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516148a59190615392565b60006040518083038185875af1925050503d80600081146148e2576040519150601f19603f3d011682016040523d82523d6000602084013e6148e7565b606091505b50915091506148f7828286614916565b92505050949350505050565b600080823b905060008111915050919050565b6060831561492657829050614976565b6000835111156149395782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161496d919061563e565b60405180910390fd5b9392505050565b60008135905061498c81615e64565b92915050565b6000815190506149a181615e64565b92915050565b6000813590506149b681615e7b565b92915050565b6000815190506149cb81615e7b565b92915050565b6000813590506149e081615e92565b92915050565b6000813590506149f581615ea9565b92915050565b600081359050614a0a81615ec0565b92915050565b600081519050614a1f81615ec0565b92915050565b600060208284031215614a3757600080fd5b6000614a458482850161497d565b91505092915050565b600060208284031215614a6057600080fd5b6000614a6e84828501614992565b91505092915050565b600080600080600080600060e0888a031215614a9257600080fd5b6000614aa08a828b0161497d565b9750506020614ab18a828b0161497d565b9650506040614ac28a828b0161497d565b9550506060614ad38a828b0161497d565b9450506080614ae48a828b016149fb565b93505060a0614af58a828b016149fb565b92505060c0614b068a828b016149e6565b91505092959891949750929550565b600080600060608486031215614b2a57600080fd5b6000614b388682870161497d565b9350506020614b498682870161497d565b9250506040614b5a868287016149fb565b9150509250925092565b60008060408385031215614b7757600080fd5b6000614b858582860161497d565b9250506020614b96858286016149fb565b9150509250929050565b600080600080600060a08688031215614bb857600080fd5b6000614bc68882890161497d565b9550506020614bd7888289016149fb565b9450506040614be8888289016149d1565b9350506060614bf9888289016149a7565b9250506080614c0a888289016149fb565b9150509295509295909350565b60008060008060808587031215614c2d57600080fd5b6000614c3b8782880161497d565b9450506020614c4c878288016149fb565b9350506040614c5d878288016149d1565b9250506060614c6e878288016149fb565b91505092959194509250565b600080600060608486031215614c8f57600080fd5b6000614c9d8682870161497d565b9350506020614cae868287016149fb565b9250506040614cbf868287016149fb565b9150509250925092565b60008060008060008060c08789031215614ce257600080fd5b6000614cf089828a0161497d565b9650506020614d0189828a016149fb565b9550506040614d1289828a016149fb565b9450506060614d2389828a016149fb565b9350506080614d3489828a016149fb565b92505060a0614d4589828a016149fb565b9150509295509295509295565b600060208284031215614d6457600080fd5b6000614d72848285016149bc565b91505092915050565b600060208284031215614d8d57600080fd5b6000614d9b84828501614a10565b91505092915050565b600080600060608486031215614db957600080fd5b6000614dc786828701614a10565b9350506020614dd886828701614a10565b9250506040614de986828701614992565b9150509250925092565b614dfc81615cc1565b82525050565b614e0b81615cd3565b82525050565b6000614e1c826159cf565b614e2681856159e5565b9350614e36818560208601615d6b565b80840191505092915050565b614e4b81615d47565b82525050565b614e5a81615d59565b82525050565b614e6981615d05565b82525050565b6000614e7a826159da565b614e8481856159f0565b9350614e94818560208601615d6b565b614e9d81615e2b565b840191505092915050565b6000614eb56002836159f0565b91507f45440000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000614ef56002836159f0565b91507f45350000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000614f356002836159f0565b91507f45320000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000614f756002836159f0565b91507f45390000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000614fb56002836159f0565b91507f45360000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000614ff56026836159f0565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061505b6002836159f0565b91507f454b0000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061509b6002836159f0565b91507f45380000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006150db6002836159f0565b91507f45370000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061511b6002836159f0565b91507f45310000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061515b6002836159f0565b91507f454a0000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061519b6002836159f0565b91507f45420000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006151db601d836159f0565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b600061521b6002836159f0565b91507f45340000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061525b6002836159f0565b91507f45430000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061529b6002836159f0565b91507f45490000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006152db6002836159f0565b91507f45460000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061531b602a836159f0565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b61537d81615d0f565b82525050565b61538c81615d3d565b82525050565b600061539e8284614e11565b915081905092915050565b60006020820190506153be6000830184614df3565b92915050565b60006060820190506153d96000830186614df3565b6153e66020830185614df3565b6153f36040830184614e02565b949350505050565b60006060820190506154106000830186614df3565b61541d6020830185614df3565b61542a6040830184615383565b949350505050565b60006080820190506154476000830187614df3565b6154546020830186614df3565b6154616040830185615383565b61546e6060830184615383565b95945050505050565b600060408201905061548c6000830185614df3565b6154996020830184614e02565b9392505050565b60006040820190506154b56000830185614df3565b6154c26020830184615383565b9392505050565b60006060820190506154de6000830186614df3565b6154eb6020830185615383565b6154f86040830184614df3565b949350505050565b60006080820190506155156000830187614df3565b6155226020830186615383565b61552f6040830185614df3565b61553c6060830184615383565b95945050505050565b600060608201905061555a6000830186614df3565b6155676020830185615383565b6155746040830184615383565b949350505050565b600061010082019050615592600083018b614df3565b61559f602083018a615383565b6155ac6040830189615383565b6155b96060830188615383565b6155c66080830187614df3565b6155d360a0830186614df3565b6155e060c0830185614df3565b6155ed60e0830184615374565b9998505050505050505050565b600060208201905061560f6000830184614e02565b92915050565b600060408201905061562a6000830185614e60565b6156376020830184614e60565b9392505050565b600060208201905081810360008301526156588184614e6f565b905092915050565b6000602082019050818103600083015261567981614ea8565b9050919050565b6000602082019050818103600083015261569981614ee8565b9050919050565b600060208201905081810360008301526156b981614f28565b9050919050565b600060208201905081810360008301526156d981614f68565b9050919050565b600060208201905081810360008301526156f981614fa8565b9050919050565b6000602082019050818103600083015261571981614fe8565b9050919050565b600060208201905081810360008301526157398161504e565b9050919050565b600060208201905081810360008301526157598161508e565b9050919050565b60006020820190508181036000830152615779816150ce565b9050919050565b600060208201905081810360008301526157998161510e565b9050919050565b600060208201905081810360008301526157b98161514e565b9050919050565b600060208201905081810360008301526157d98161518e565b9050919050565b600060208201905081810360008301526157f9816151ce565b9050919050565b600060208201905081810360008301526158198161520e565b9050919050565b600060208201905081810360008301526158398161524e565b9050919050565b600060208201905081810360008301526158598161528e565b9050919050565b60006020820190508181036000830152615879816152ce565b9050919050565b600060208201905081810360008301526158998161530e565b9050919050565b60006020820190506158b56000830184615383565b92915050565b60006040820190506158d06000830185615383565b6158dd6020830184615383565b9392505050565b60006060820190506158f96000830186615383565b6159066020830185615383565b6159136040830184614e02565b949350505050565b600060a0820190506159306000830188615383565b61593d6020830187615383565b61594a6040830186614e60565b6159576060830185615383565b6159646080830184614e02565b9695505050505050565b600060c0820190506159836000830189615383565b6159906020830188615383565b61599d6040830187615383565b6159aa6060830186614e51565b6159b76080830185614e42565b6159c460a0830184615383565b979650505050505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000615a0c82615d05565b9150615a1783615d05565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615615a5257615a51615d9e565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615615a8a57615a89615d9e565b5b828201905092915050565b6000615aa082615d3d565b9150615aab83615d3d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115615ae057615adf615d9e565b5b828201905092915050565b6000615af682615d3d565b9150615b0183615d3d565b925082615b1157615b10615dcd565b5b828204905092915050565b6000615b2782615d05565b9150615b3283615d05565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615615b7157615b70615d9e565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615615bae57615bad615d9e565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615615beb57615bea615d9e565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615615c2857615c27615d9e565b5b828202905092915050565b6000615c3e82615d3d565b9150615c4983615d3d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615c8257615c81615d9e565b5b828202905092915050565b6000615c9882615d3d565b9150615ca383615d3d565b925082821015615cb657615cb5615d9e565b5b828203905092915050565b6000615ccc82615d1d565b9050919050565b60008115159050919050565b6000819050615ced82615e3c565b919050565b6000819050615d0082615e50565b919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000615d5282615cdf565b9050919050565b6000615d6482615cf2565b9050919050565b60005b83811015615d89578082015181840152602081019050615d6e565b83811115615d98576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000601f19601f8301169050919050565b60048110615e4d57615e4c615dfc565b5b50565b60038110615e6157615e60615dfc565b5b50565b615e6d81615cc1565b8114615e7857600080fd5b50565b615e8481615cd3565b8114615e8f57600080fd5b50565b615e9b81615d05565b8114615ea657600080fd5b50565b615eb281615d0f565b8114615ebd57600080fd5b50565b615ec981615d3d565b8114615ed457600080fd5b5056fea264697066735822122059f8d29e67675ab4e79bc81124b4253bfc8506bb7ed1ac93255b79af9b41278364736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1206,
        "contract": "contracts/Limbo.sol:Limbo",
        "label": "flashGoverner",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(FlashGovernanceArbiterLike)7575"
      },
      {
        "astId": 1208,
        "contract": "contracts/Limbo.sol:Limbo",
        "label": "configured",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1210,
        "contract": "contracts/Limbo.sol:Limbo",
        "label": "DAO",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5068,
        "contract": "contracts/Limbo.sol:Limbo",
        "label": "protocolEnabled",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 5071,
        "contract": "contracts/Limbo.sol:Limbo",
        "label": "crossingConfig",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(CrossingConfig)5044_storage"
      },
      {
        "astId": 5078,
        "contract": "contracts/Limbo.sol:Limbo",
        "label": "souls",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Soul)5016_storage))"
      },
      {
        "astId": 5082,
        "contract": "contracts/Limbo.sol:Limbo",
        "label": "latestIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5091,
        "contract": "contracts/Limbo.sol:Limbo",
        "label": "userInfo",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(User)5051_storage)))"
      },
      {
        "astId": 5098,
        "contract": "contracts/Limbo.sol:Limbo",
        "label": "tokenCrossingParameters",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(CrossingParameters)5027_storage))"
      },
      {
        "astId": 5101,
        "contract": "contracts/Limbo.sol:Limbo",
        "label": "Flan",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(FlanLike)7533"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(FlanLike)7533": {
        "encoding": "inplace",
        "label": "contract FlanLike",
        "numberOfBytes": "20"
      },
      "t_contract(FlashGovernanceArbiterLike)7575": {
        "encoding": "inplace",
        "label": "contract FlashGovernanceArbiterLike",
        "numberOfBytes": "20"
      },
      "t_enum(SoulState)4941": {
        "encoding": "inplace",
        "label": "enum SoulState",
        "numberOfBytes": "1"
      },
      "t_enum(SoulType)4945": {
        "encoding": "inplace",
        "label": "enum SoulType",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(User)5051_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint256 => struct Limbo.User)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_struct(User)5051_storage))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(CrossingParameters)5027_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Limbo.CrossingParameters))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(CrossingParameters)5027_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Soul)5016_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Limbo.Soul))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Soul)5016_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(User)5051_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Limbo.User))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(User)5051_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(CrossingParameters)5027_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Limbo.CrossingParameters)",
        "numberOfBytes": "32",
        "value": "t_struct(CrossingParameters)5027_storage"
      },
      "t_mapping(t_uint256,t_struct(Soul)5016_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Limbo.Soul)",
        "numberOfBytes": "32",
        "value": "t_struct(Soul)5016_storage"
      },
      "t_mapping(t_uint256,t_struct(User)5051_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Limbo.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)5051_storage"
      },
      "t_struct(CrossingConfig)5044_storage": {
        "encoding": "inplace",
        "label": "struct Limbo.CrossingConfig",
        "members": [
          {
            "astId": 5029,
            "contract": "contracts/Limbo.sol:Limbo",
            "label": "behodler",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5031,
            "contract": "contracts/Limbo.sol:Limbo",
            "label": "SCX_fee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5033,
            "contract": "contracts/Limbo.sol:Limbo",
            "label": "migrationInvocationReward",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5035,
            "contract": "contracts/Limbo.sol:Limbo",
            "label": "crossingMigrationDelay",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5037,
            "contract": "contracts/Limbo.sol:Limbo",
            "label": "morgothPower",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 5039,
            "contract": "contracts/Limbo.sol:Limbo",
            "label": "angband",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 5041,
            "contract": "contracts/Limbo.sol:Limbo",
            "label": "ammHelper",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 5043,
            "contract": "contracts/Limbo.sol:Limbo",
            "label": "rectangleOfFairnessInflationFactor",
            "offset": 20,
            "slot": "6",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(CrossingParameters)5027_storage": {
        "encoding": "inplace",
        "label": "struct Limbo.CrossingParameters",
        "members": [
          {
            "astId": 5018,
            "contract": "contracts/Limbo.sol:Limbo",
            "label": "stakingBeginsTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5020,
            "contract": "contracts/Limbo.sol:Limbo",
            "label": "stakingEndTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5022,
            "contract": "contracts/Limbo.sol:Limbo",
            "label": "crossingBonusDelta",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 5024,
            "contract": "contracts/Limbo.sol:Limbo",
            "label": "initialCrossingBonus",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5026,
            "contract": "contracts/Limbo.sol:Limbo",
            "label": "burnable",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Soul)5016_storage": {
        "encoding": "inplace",
        "label": "struct Limbo.Soul",
        "members": [
          {
            "astId": 5003,
            "contract": "contracts/Limbo.sol:Limbo",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5005,
            "contract": "contracts/Limbo.sol:Limbo",
            "label": "accumulatedFlanPerShare",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5007,
            "contract": "contracts/Limbo.sol:Limbo",
            "label": "crossingThreshold",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5010,
            "contract": "contracts/Limbo.sol:Limbo",
            "label": "soulType",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(SoulType)4945"
          },
          {
            "astId": 5013,
            "contract": "contracts/Limbo.sol:Limbo",
            "label": "state",
            "offset": 1,
            "slot": "3",
            "type": "t_enum(SoulState)4941"
          },
          {
            "astId": 5015,
            "contract": "contracts/Limbo.sol:Limbo",
            "label": "flanPerSecond",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(User)5051_storage": {
        "encoding": "inplace",
        "label": "struct Limbo.User",
        "members": [
          {
            "astId": 5046,
            "contract": "contracts/Limbo.sol:Limbo",
            "label": "stakedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5048,
            "contract": "contracts/Limbo.sol:Limbo",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5050,
            "contract": "contracts/Limbo.sol:Limbo",
            "label": "bonusPaid",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}