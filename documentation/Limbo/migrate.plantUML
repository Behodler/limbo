@startuml
!define yoghurt #eeb0ff
!define bluegrey #b2c0ed
start
:Limbo.migrate(address token);
partition yoghurt "transaction"{
    if(enabled) then (yes)
        if(soul is threshold type\nAND\nsoul is waiting to cross) then (yes)
            if(soul has been waiting to migrate for minimum required wait) then (yes)
                bluegrey:prepare morgoth migration power invoker;
                bluegrey:execute migration -> collect generated SCX;
                :adjust rectangle of fairness according to the will of the community;
                if(rectangle > scx minted) then (yes)
                    :set rectangle to half scx minted;
                endif
                :burn SCX - rectangle and transfer to AMM helper;
                :AmmHelper.priceTiltFlan();
                partition #LightSkyBlue "Uniswap helper"{
                    if(latest price stamps have not been taken) then (yes)
                        #lightpink:revert;
                        stop
                    else
                        if(caller is not limbo) then (yes)
                            #lightpink:revert;
                            stop
                        else
                            :incrementBondingCurveCount;
                            :LP_syntheticPrice = (latestDaiBalanceOnBehodler*Num_BondingCurves)/Scarcity_totalSupply;
                            :finalSCXBalance = rectange + existingBalanceOn LP;
                            :R = ratio of Dai spot price in SCX to LP_syntheticPrice;
                            :FinalFlanBal on Uni = finalSCXBalance * R;
                            :flanToMint = FinalFan - currentFlanBalance;
                            :mint flanToMint and send to LP;
                            :Send rectangle SCX to LP;
                            :Mint new LP tokens;
                        endif
                    endif
                }
                :reward caller of migrate function with new flan to compensate for gas;
                :set soul state to crossedOver;
            else  (no)
                #lightpink:revert;
                stop
            endif
        else (no)
            #lightpink:revert;
            stop
        endif
    else (no)
        #lightpink:revert;
        stop
    endif
}
stop
@enduml