@startuml
!define yoghurt #eeb0ff
!define bluegrey #b2c0ed
start
:Limbo.migrate(address token);
partition yoghurt "transaction"{
    if(enabled) then (yes)
        if(soul is threshold type\nAND\nsoul is waiting to cross) then (yes)
            if(soul has been waiting to migrate for minimum required wait) then (yes)
                bluegrey:prepare morgoth migration power invoker;
                bluegrey:execute migration -> collect generated SCX;
                :calculate marginal price of SCX;
                :calculate rectangle of fairness;
                :burn excess SCX and transfer to AMM helper;
                partition #LightSkyBlue "Uniswap helper"{
                    :get latest spot price of\nflan in terms of SCX from pair;
                    if (price has diverged significantly since last quote) then (yes)
                        #lightpink:revert;
                        stop
                    else (no)
                        if(price quote was acquired too recently) then (yes)
                            #lightpink:revert;
                            stop
                        else (no)
                            :get SCX transfer free;
                            :calculate expected flan given SCX quantity (adjust for fee);
                            :swap SCX for flan with outputDestination being SCX/Flan pair;
                            :send remaining SCX to SCX/Flan pair; 
                            :mint LP tokens and send them to blackhole contract;
                        endif
                    endif
                }
                :reward caller of migrate function with new flan to compensate for gas;
                :set soul state to crossedOver;
            else  (no)
                #lightpink:revert;
                stop
            endif
        else (no)
            #lightpink:revert;
            stop
        endif
    else (no)
        #lightpink:revert;
        stop
    endif
}
stop
@enduml